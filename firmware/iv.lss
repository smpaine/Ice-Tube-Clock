
iv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00002a6e  00002b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800246  00800246  00002c48  2**0
                  ALLOC
  3 .stab         00005f64  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000194c  00000000  00000000  00008bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__vector_1>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_3>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__vector_5>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_9>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_16>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      54:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_21>
      58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      5c:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_23>
      60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000068 <alphatable>:
      68:	fa 3e 1a 7a de 8e f6 2e 60 78 ae 1c aa 2a 3a ce     .>.z....`x...*:.
      78:	f3 0a b6 1e 38 38 b8 6e 76 da                       ....88.nv.

00000082 <alphatable_p>:
      82:	68 00                                               h.

00000084 <numbertable>:
      84:	fc 60 da f2 66 b6 be e0 fe f6                       .`..f.....

0000008e <numbertable_p>:
      8e:	84 00                                               ..

00000090 <digittable>:
      90:	03 07 08 09 06 0a 05 0c 04                          .........

00000099 <digittable_p>:
      99:	90 00                                               ..

0000009b <segmenttable>:
      9b:	0b 10 12 0f 0d 0e 11 13                             ........

000000a3 <segmenttable_p>:
      a3:	9b 00                                               ..

000000a5 <__c.3243>:
      a5:	61 6c 61 72 6d 20 6f 6e 21 00                       alarm on!.

000000af <__c.2550>:
      af:	61 6c 61 72 6d 20 6f 66 66 00                       alarm off.

000000b9 <__c.2287>:
      b9:	53 65 74 20 64 61 79 00                             Set day.

000000c1 <__c.2106>:
      c1:	64 6f 6e 65 00                                      done.

000000c6 <__c.2104>:
      c6:	61 6c 61 72 6d 20 69 6e 69 74 00                    alarm init.

000000d1 <__c.2102>:
      d1:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

000000dc <__c.2100>:
      dc:	73 70 65 61 6b 65 72 20 69 6e 69 74 00              speaker init.

000000e9 <__c.2098>:
      e9:	62 6f 6f 73 74 20 69 6e 69 74 00                    boost init.

000000f4 <__c.2096>:
      f4:	76 66 64 20 69 6e 69 74 00                          vfd init.

000000fd <__c.2094>:
      fd:	74 75 72 6e 69 6e 67 20 6f 6e 20 61 6c 61 72 6d     turning on alarm
     10d:	73 77 00                                            sw.

00000110 <__c.2092>:
     110:	74 75 72 6e 69 6e 67 20 6f 6e 20 62 75 74 74 6f     turning on butto
     120:	6e 73 00                                            ns.

00000123 <__c.2090>:
     123:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

0000012e <__c.2088>:
     12e:	21 00                                               !.

00000130 <__c.2056>:
     130:	77 61 6b 65 74 69 6d 65 00                          waketime.

00000139 <__c.1974>:
     139:	57 41 4b 45 52 45 53 45 54 00                       WAKERESET.

00000143 <__c.1972>:
     143:	7a 00                                               z.

00000145 <__c.1886>:
     145:	62 32 00                                            b2.

00000148 <__c.1834>:
     148:	62 33 00                                            b3.

0000014b <__c.1832>:
     14b:	62 31 00                                            b1.

0000014e <__c.1783>:
     14e:	73 6e 6f 6f 7a 65 00 00                             snooze..

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d4 e0       	ldi	r29, 0x04	; 4
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	12 e0       	ldi	r17, 0x02	; 2
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	ee e6       	ldi	r30, 0x6E	; 110
     16a:	fa e2       	ldi	r31, 0x2A	; 42
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a6 34       	cpi	r26, 0x46	; 70
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	a6 e4       	ldi	r26, 0x46	; 70
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a6 3f       	cpi	r26, 0xF6	; 246
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 74 11 	call	0x22e8	; 0x22e8 <main>
     18c:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <delayms>:
uint16_t snoozetimer = 0;

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
     194:	9c 01       	movw	r18, r24
  sei();
     196:	78 94       	sei

  milliseconds = 0;
     198:	10 92 56 02 	sts	0x0256, r1
     19c:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
     1a0:	80 91 55 02 	lds	r24, 0x0255
     1a4:	90 91 56 02 	lds	r25, 0x0256
     1a8:	82 17       	cp	r24, r18
     1aa:	93 07       	cpc	r25, r19
     1ac:	c8 f3       	brcs	.-14     	; 0x1a0 <delayms+0xc>
}
     1ae:	08 95       	ret

000001b0 <kickthedog>:
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
     1b0:	a8 95       	wdr
}
     1b2:	08 95       	ret

000001b4 <gotosleep>:
  // battery
  //if (sleepmode) //already asleep?
  //  return;
  //DEBUGP("sleeptime");
  
  sleepmode = 1;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 49 02 	sts	0x0249, r24
  VFDSWITCH_PORT |= _BV(VFDSWITCH); // turn off display
     1ba:	5b 9a       	sbi	0x0b, 3	; 11
  SPCR  &= ~_BV(SPE); // turn off spi
     1bc:	8c b5       	in	r24, 0x2c	; 44
     1be:	8f 7b       	andi	r24, 0xBF	; 191
     1c0:	8c bd       	out	0x2c, r24	; 44
  VFDCLK_PORT &= ~_BV(VFDCLK) & ~_BV(VFDDATA); // no power to vfdchip
     1c2:	85 b1       	in	r24, 0x05	; 5
     1c4:	87 7d       	andi	r24, 0xD7	; 215
     1c6:	85 b9       	out	0x05, r24	; 5
  BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
     1c8:	5e 98       	cbi	0x0b, 6	; 11
  TCCR0B = 0; // no boost
     1ca:	15 bc       	out	0x25, r1	; 37
  volume = 0; // low power buzzer
     1cc:	10 92 e3 02 	sts	0x02E3, r1
  PCICR = 0;  // ignore buttons
     1d0:	10 92 68 00 	sts	0x0068, r1
#ifdef FEATURE_AUTODIM
  DIMMER_POWER_PORT &= ~_BV(DIMMER_POWER_PIN); // no power to photoresistor
     1d4:	45 98       	cbi	0x08, 5	; 8
  // sleep time!
  //beep(3520, 1);
  //beep(1760, 1);
  //beep(880, 1);
  // turn beeper off
  PORTB &= ~_BV(SPK1) & ~_BV(SPK2); 
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	89 7f       	andi	r24, 0xF9	; 249
     1da:	85 b9       	out	0x05, r24	; 5
  
  // turn off pullups
  PORTD &= ~_BV(BUTTON1) & ~_BV(BUTTON3);
     1dc:	8b b1       	in	r24, 0x0b	; 11
     1de:	8f 7c       	andi	r24, 0xCF	; 207
     1e0:	8b b9       	out	0x0b, r24	; 11
  PORTB &= ~_BV(BUTTON2);
     1e2:	28 98       	cbi	0x05, 0	; 5
  DDRD &= ~_BV(BUTTON1) & ~_BV(BUTTON3);
     1e4:	8a b1       	in	r24, 0x0a	; 10
     1e6:	8f 7c       	andi	r24, 0xCF	; 207
     1e8:	8a b9       	out	0x0a, r24	; 10
  DDRB &= ~_BV(BUTTON2);
     1ea:	20 98       	cbi	0x04, 0	; 4
  ALARM_PORT &= ~_BV(ALARM);
     1ec:	5a 98       	cbi	0x0b, 2	; 11
  ALARM_DDR &= ~_BV(ALARM);
     1ee:	52 98       	cbi	0x0a, 2	; 10
  

  // reduce the clock speed
  CLKPR = _BV(CLKPCE);
     1f0:	e1 e6       	ldi	r30, 0x61	; 97
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	90 e8       	ldi	r25, 0x80	; 128
     1f6:	90 83       	st	Z, r25
  CLKPR = _BV(CLKPS3);
     1f8:	88 e0       	ldi	r24, 0x08	; 8
     1fa:	80 83       	st	Z, r24
  
  //  PPR |= _BV(PRUSART0) | _BV(PRADC) | _BV(PRSPI) | _BV(PRTIM1) | _BV(PRTIM0) | _BV(PRTWI);
  PORTC |= _BV(4);  // sleep signal
     1fc:	44 9a       	sbi	0x08, 4	; 8
  SMCR |= _BV(SM1) | _BV(SM0) | _BV(SE); // sleep mode
     1fe:	83 b7       	in	r24, 0x33	; 51
     200:	87 60       	ori	r24, 0x07	; 7
     202:	83 bf       	out	0x33, r24	; 51
  asm("sleep"); 
     204:	88 95       	sleep
  CLKPR = _BV(CLKPCE);
     206:	90 83       	st	Z, r25
  CLKPR = 0;
     208:	10 82       	st	Z, r1
  PORTC &= ~_BV(4);
     20a:	44 98       	cbi	0x08, 4	; 8
}
     20c:	08 95       	ret

0000020e <initbuttons>:
   kickthedog();
 }


void initbuttons(void) {
    DDRB =  _BV(VFDCLK) | _BV(VFDDATA) | _BV(SPK1) | _BV(SPK2);
     20e:	8e e2       	ldi	r24, 0x2E	; 46
     210:	84 b9       	out	0x04, r24	; 4
    DDRD = _BV(BOOST) | _BV(VFDSWITCH);
     212:	88 e4       	ldi	r24, 0x48	; 72
     214:	8a b9       	out	0x0a, r24	; 10
    DDRC = _BV(VFDLOAD) | _BV(VFDBLANK);
     216:	89 e0       	ldi	r24, 0x09	; 9
     218:	87 b9       	out	0x07, r24	; 7
    PORTD = _BV(BUTTON1) | _BV(BUTTON3) | _BV(ALARM);
     21a:	84 e3       	ldi	r24, 0x34	; 52
     21c:	8b b9       	out	0x0b, r24	; 11
    PORTB = _BV(BUTTON2);
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	95 b9       	out	0x05, r25	; 5

    PCICR = _BV(PCIE0) | _BV(PCIE2);
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	80 93 68 00 	sts	0x0068, r24
    PCMSK0 = _BV(PCINT0);
     228:	90 93 6b 00 	sts	0x006B, r25
    PCMSK2 = _BV(PCINT21) | _BV(PCINT20);    
     22c:	80 e3       	ldi	r24, 0x30	; 48
     22e:	80 93 6d 00 	sts	0x006D, r24
}
     232:	08 95       	ret

00000234 <leapyear>:
  }
}

// This will calculate leapyears, give it the year
// and it will return 1 (true) or 0 (false)
uint8_t leapyear(uint16_t y) {
     234:	fc 01       	movw	r30, r24
  return ( (!(y % 4) && (y % 100)) || !(y % 400));
     236:	83 70       	andi	r24, 0x03	; 3
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	89 2b       	or	r24, r25
     23c:	39 f4       	brne	.+14     	; 0x24c <leapyear+0x18>
     23e:	cf 01       	movw	r24, r30
     240:	64 e6       	ldi	r22, 0x64	; 100
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     248:	89 2b       	or	r24, r25
     24a:	49 f4       	brne	.+18     	; 0x25e <leapyear+0x2a>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	cf 01       	movw	r24, r30
     252:	60 e9       	ldi	r22, 0x90	; 144
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     25a:	89 2b       	or	r24, r25
     25c:	11 f4       	brne	.+4      	; 0x262 <leapyear+0x2e>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
}
     262:	82 2f       	mov	r24, r18
     264:	08 95       	ret

00000266 <tick>:
}

// This makes the speaker tick, it doesnt use PWM
// instead it just flicks the piezo
void tick(void) {
  TCCR1A = 0;
     266:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0;
     26a:	10 92 81 00 	sts	0x0081, r1

  // Send a pulse thru both pins, alternating
  SPK_PORT |= _BV(SPK1);
     26e:	29 9a       	sbi	0x05, 1	; 5
  SPK_PORT &= ~_BV(SPK2);
     270:	2a 98       	cbi	0x05, 2	; 5

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
     272:	78 94       	sei

  milliseconds = 0;
     274:	10 92 56 02 	sts	0x0256, r1
     278:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
     27c:	80 91 55 02 	lds	r24, 0x0255
     280:	90 91 56 02 	lds	r25, 0x0256
     284:	0a 97       	sbiw	r24, 0x0a	; 10
     286:	d0 f3       	brcs	.-12     	; 0x27c <tick+0x16>

  // Send a pulse thru both pins, alternating
  SPK_PORT |= _BV(SPK1);
  SPK_PORT &= ~_BV(SPK2);
  delayms(10);
  SPK_PORT |= _BV(SPK2);
     288:	2a 9a       	sbi	0x05, 2	; 5
  SPK_PORT &= ~_BV(SPK1);
     28a:	29 98       	cbi	0x05, 1	; 5

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
     28c:	78 94       	sei

  milliseconds = 0;
     28e:	10 92 56 02 	sts	0x0256, r1
     292:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
     296:	80 91 55 02 	lds	r24, 0x0255
     29a:	90 91 56 02 	lds	r25, 0x0256
     29e:	0a 97       	sbiw	r24, 0x0a	; 10
     2a0:	d0 f3       	brcs	.-12     	; 0x296 <tick+0x30>
  delayms(10);
  SPK_PORT |= _BV(SPK2);
  SPK_PORT &= ~_BV(SPK1);
  delayms(10);
  // turn them both off
  SPK_PORT &= ~_BV(SPK1) & ~_BV(SPK2);
     2a2:	85 b1       	in	r24, 0x05	; 5
     2a4:	89 7f       	andi	r24, 0xF9	; 249
     2a6:	85 b9       	out	0x05, r24	; 5

  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
     2a8:	82 eb       	ldi	r24, 0xB2	; 178
     2aa:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(WGM13) | _BV(WGM12);
     2ae:	88 e1       	ldi	r24, 0x18	; 24
     2b0:	80 93 81 00 	sts	0x0081, r24
}
     2b4:	08 95       	ret

000002b6 <beep>:

// We can play short beeps!
void beep(uint16_t freq, uint8_t times) {
     2b6:	1f 93       	push	r17
     2b8:	16 2f       	mov	r17, r22
  // set the PWM output to match the desired frequency
  ICR1 = (F_CPU/8)/freq;
     2ba:	9c 01       	movw	r18, r24
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	60 e4       	ldi	r22, 0x40	; 64
     2c2:	72 e4       	ldi	r23, 0x42	; 66
     2c4:	8f e0       	ldi	r24, 0x0F	; 15
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__divmodsi4>
     2cc:	30 93 87 00 	sts	0x0087, r19
     2d0:	20 93 86 00 	sts	0x0086, r18
  // we want 50% duty cycle square wave
  OCR1A = OCR1B = ICR1/2;
     2d4:	80 91 86 00 	lds	r24, 0x0086
     2d8:	90 91 87 00 	lds	r25, 0x0087
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
     2e0:	90 93 8b 00 	sts	0x008B, r25
     2e4:	80 93 8a 00 	sts	0x008A, r24
     2e8:	80 91 8a 00 	lds	r24, 0x008A
     2ec:	90 91 8b 00 	lds	r25, 0x008B
     2f0:	90 93 89 00 	sts	0x0089, r25
     2f4:	80 93 88 00 	sts	0x0088, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	28 ec       	ldi	r18, 0xC8	; 200
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	1c c0       	rjmp	.+56     	; 0x336 <beep+0x80>
   
  while (times--) {
    TCCR1B |= _BV(CS11); // turn it on!
     2fe:	80 91 81 00 	lds	r24, 0x0081
     302:	82 60       	ori	r24, 0x02	; 2
     304:	80 93 81 00 	sts	0x0081, r24
     308:	80 ed       	ldi	r24, 0xD0	; 208
     30a:	97 e0       	ldi	r25, 0x07	; 7
     30c:	f9 01       	movw	r30, r18
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <beep+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     314:	d9 f7       	brne	.-10     	; 0x30c <beep+0x56>
    // beeps are 200ms long on
    _delay_ms(200);
    TCCR1B &= ~_BV(CS11); // turn it off!
     316:	80 91 81 00 	lds	r24, 0x0081
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	80 93 81 00 	sts	0x0081, r24
    PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
     320:	85 b1       	in	r24, 0x05	; 5
     322:	89 7f       	andi	r24, 0xF9	; 249
     324:	85 b9       	out	0x05, r24	; 5
     326:	80 ed       	ldi	r24, 0xD0	; 208
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	f9 01       	movw	r30, r18
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <beep+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     330:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     332:	d9 f7       	brne	.-10     	; 0x32a <beep+0x74>
     334:	11 50       	subi	r17, 0x01	; 1
  // set the PWM output to match the desired frequency
  ICR1 = (F_CPU/8)/freq;
  // we want 50% duty cycle square wave
  OCR1A = OCR1B = ICR1/2;
   
  while (times--) {
     336:	11 23       	and	r17, r17
     338:	11 f7       	brne	.-60     	; 0x2fe <beep+0x48>
    PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
    // beeps are 200ms long off
    _delay_ms(200);
  }
  // turn speaker off
  PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
     33a:	85 b1       	in	r24, 0x05	; 5
     33c:	89 7f       	andi	r24, 0xF9	; 249
     33e:	85 b9       	out	0x05, r24	; 5
}
     340:	1f 91       	pop	r17
     342:	08 95       	ret

00000344 <dimmer_init>:

#ifdef FEATURE_AUTODIM
/**************************** DIMMER ****************************/
void dimmer_init(void) {
  // Power for the photoresistor
  DIMMER_POWER_DDR |= _BV(DIMMER_POWER_PIN); 
     344:	3d 9a       	sbi	0x07, 5	; 7
  DIMMER_POWER_PORT |= _BV(DIMMER_POWER_PIN);
     346:	45 9a       	sbi	0x08, 5	; 8

  ADCSRA |= _BV(ADPS2)| _BV(ADPS1); // Set ADC prescalar to 64 - 125KHz sample rate @ 8MHz F_CPU
     348:	aa e7       	ldi	r26, 0x7A	; 122
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 91       	ld	r24, X
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	8c 93       	st	X, r24
  ADMUX |= _BV(REFS0);  // Set ADC reference to AVCC
     352:	ec e7       	ldi	r30, 0x7C	; 124
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 64       	ori	r24, 0x40	; 64
     35a:	80 83       	st	Z, r24
  ADMUX |= _BV(DIMMER_SENSE_PIN);   // Set ADC input as ADC4 (PC4)
     35c:	80 81       	ld	r24, Z
     35e:	84 60       	ori	r24, 0x04	; 4
     360:	80 83       	st	Z, r24
  DIDR0 |= _BV(DIMMER_SENSE_PIND); // Disable the digital imput buffer on the sense pin to save power.
     362:	ee e7       	ldi	r30, 0x7E	; 126
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	80 61       	ori	r24, 0x10	; 16
     36a:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADEN);  // Enable ADC
     36c:	8c 91       	ld	r24, X
     36e:	80 68       	ori	r24, 0x80	; 128
     370:	8c 93       	st	X, r24
  ADCSRA |= _BV(ADIE);  // Enable ADC interrupt
     372:	8c 91       	ld	r24, X
     374:	88 60       	ori	r24, 0x08	; 8
     376:	8c 93       	st	X, r24
}
     378:	08 95       	ret

0000037a <dimmer_update>:

// Start ADC conversion for dimmer
void dimmer_update(void) {
  if (brightness_level == 0) 
     37a:	80 91 f1 02 	lds	r24, 0x02F1
     37e:	88 23       	and	r24, r24
     380:	29 f4       	brne	.+10     	; 0x38c <dimmer_update+0x12>
    ADCSRA |= _BV(ADSC);
     382:	80 91 7a 00 	lds	r24, 0x007A
     386:	80 64       	ori	r24, 0x40	; 64
     388:	80 93 7a 00 	sts	0x007A, r24
     38c:	08 95       	ret

0000038e <set_vfd_brightness>:
  TCCR0A |= _BV(COM0A1);
  TIMSK0 |= _BV(TOIE0); // turn on the interrupt for muxing
  sei();
}

void set_vfd_brightness(uint8_t brightness) {
     38e:	98 2f       	mov	r25, r24
  // Set PWM value, don't set it so high that
  // we could damage the MAX chip or display
  if (brightness > BRIGHTNESS_MAX)
     390:	8b 35       	cpi	r24, 0x5B	; 91
     392:	10 f0       	brcs	.+4      	; 0x398 <set_vfd_brightness+0xa>
     394:	9a e5       	ldi	r25, 0x5A	; 90
     396:	03 c0       	rjmp	.+6      	; 0x39e <set_vfd_brightness+0x10>
    brightness = BRIGHTNESS_MAX;

  // Or so low its not visible
  if (brightness < BRIGHTNESS_MIN)
     398:	8e 31       	cpi	r24, 0x1E	; 30
     39a:	08 f4       	brcc	.+2      	; 0x39e <set_vfd_brightness+0x10>
     39c:	9e e1       	ldi	r25, 0x1E	; 30
  //// Round up to the next brightness increment
  //if (brightness % BRIGHTNESS_INCREMENT != 0) {
  //  brightness += BRIGHTNESS_INCREMENT - (brightness % BRIGHTNESS_INCREMENT);
  //}

  if (OCR0A == brightness)
     39e:	87 b5       	in	r24, 0x27	; 39
     3a0:	89 13       	cpse	r24, r25
    return;

  OCR0A = brightness;
     3a2:	97 bd       	out	0x27, r25	; 39
     3a4:	08 95       	ret

000003a6 <boost_init>:

// We control the boost converter by changing the PWM output
// pins
void boost_init(uint8_t brightness) {

  set_vfd_brightness(brightness);
     3a6:	0e 94 c7 01 	call	0x38e	; 0x38e <set_vfd_brightness>

  // fast PWM, set OC0A (boost output pin) on match
  TCCR0A = _BV(WGM00) | _BV(WGM01);  
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	84 bd       	out	0x24, r24	; 36

  // Use the fastest clock
  TCCR0B = _BV(CS00);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	85 bd       	out	0x25, r24	; 37
 
  TCCR0A |= _BV(COM0A1);
     3b2:	84 b5       	in	r24, 0x24	; 36
     3b4:	80 68       	ori	r24, 0x80	; 128
     3b6:	84 bd       	out	0x24, r24	; 36
  TIMSK0 |= _BV(TOIE0); // turn on the interrupt for muxing
     3b8:	ee e6       	ldi	r30, 0x6E	; 110
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	81 60       	ori	r24, 0x01	; 1
     3c0:	80 83       	st	Z, r24
  sei();
     3c2:	78 94       	sei
}
     3c4:	08 95       	ret

000003c6 <__vector_21>:
  if (brightness_level == 0) 
    ADCSRA |= _BV(ADSC);
}

// Update brightness once ADC measurement completes
SIGNAL(SIG_ADC) {
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
  uint8_t low, high;
  unsigned int val;
  if (brightness_level != 0)
     3e8:	80 91 f1 02 	lds	r24, 0x02F1
     3ec:	88 23       	and	r24, r24
     3ee:	71 f5       	brne	.+92     	; 0x44c <__vector_21+0x86>
    return;
  // Read 2-byte value. Must read ADCL first because that locks the value.
  low = ADCL;
     3f0:	30 91 78 00 	lds	r19, 0x0078
  high = ADCH;
     3f4:	20 91 79 00 	lds	r18, 0x0079
  val = (high << 8) | low;
     3f8:	92 2f       	mov	r25, r18
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	63 2f       	mov	r22, r19
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	68 2b       	or	r22, r24
     402:	79 2b       	or	r23, r25
  // Set brightness to a value between min & max based on light reading.
  if (val >= PHOTOCELL_DARK) {
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	6f 3f       	cpi	r22, 0xFF	; 255
     408:	78 07       	cpc	r23, r24
     40a:	18 f0       	brcs	.+6      	; 0x412 <__vector_21+0x4c>
     40c:	8d e2       	ldi	r24, 0x2D	; 45
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	1b c0       	rjmp	.+54     	; 0x448 <__vector_21+0x82>
    val = PHOTOCELL_MIN;
  } else if (val <= PHOTOCELL_LIGHT) {
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	69 35       	cpi	r22, 0x59	; 89
     416:	78 07       	cpc	r23, r24
     418:	18 f4       	brcc	.+6      	; 0x420 <__vector_21+0x5a>
     41a:	8a e5       	ldi	r24, 0x5A	; 90
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	14 c0       	rjmp	.+40     	; 0x448 <__vector_21+0x82>
    val = PHOTOCELL_MAX;
  } else {
    val = PHOTOCELL_MAX - (((unsigned long)(PHOTOCELL_MAX - PHOTOCELL_MIN)) *
     420:	68 55       	subi	r22, 0x58	; 88
     422:	72 40       	sbci	r23, 0x02	; 2
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	2d e2       	ldi	r18, 0x2D	; 45
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	0e 94 5f 14 	call	0x28be	; 0x28be <__mulsi3>
     434:	27 ea       	ldi	r18, 0xA7	; 167
     436:	31 e0       	ldi	r19, 0x01	; 1
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	0e 94 be 14 	call	0x297c	; 0x297c <__udivmodsi4>
     440:	8a e5       	ldi	r24, 0x5A	; 90
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	82 1b       	sub	r24, r18
     446:	93 0b       	sbc	r25, r19
        (val - PHOTOCELL_LIGHT)) / (PHOTOCELL_DARK - PHOTOCELL_LIGHT);
  }
  set_vfd_brightness(val);
     448:	0e 94 c7 01 	call	0x38e	; 0x38e <set_vfd_brightness>
}
     44c:	ff 91       	pop	r31
     44e:	ef 91       	pop	r30
     450:	bf 91       	pop	r27
     452:	af 91       	pop	r26
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	7f 91       	pop	r23
     45a:	6f 91       	pop	r22
     45c:	5f 91       	pop	r21
     45e:	4f 91       	pop	r20
     460:	3f 91       	pop	r19
     462:	2f 91       	pop	r18
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <display_brightness>:
      }
    }
  }
}

void display_brightness(int brightness) {
     46e:	9c 01       	movw	r18, r24
#ifdef FEATURE_AUTODIM
  if (brightness == 0) {
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	a9 f4       	brne	.+42     	; 0x49e <display_brightness+0x30>
    // auto-dim
    display[7] =  pgm_read_byte(alphatable_p + 'a' - 'a') | 0x1;
     474:	e8 e6       	ldi	r30, 0x68	; 104
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	84 91       	lpm	r24, Z+
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 ec 02 	sts	0x02EC, r24
    display[8] =  pgm_read_byte(alphatable_p + 'u' - 'a') | 0x1;
     480:	74 96       	adiw	r30, 0x14	; 20
     482:	e4 91       	lpm	r30, Z+
     484:	e1 60       	ori	r30, 0x01	; 1
     486:	e0 93 ed 02 	sts	0x02ED, r30
  ADCSRA |= _BV(ADIE);  // Enable ADC interrupt
}

// Start ADC conversion for dimmer
void dimmer_update(void) {
  if (brightness_level == 0) 
     48a:	80 91 f1 02 	lds	r24, 0x02F1
     48e:	88 23       	and	r24, r24
     490:	01 f5       	brne	.+64     	; 0x4d2 <display_brightness+0x64>
    ADCSRA |= _BV(ADSC);
     492:	80 91 7a 00 	lds	r24, 0x007A
     496:	80 64       	ori	r24, 0x40	; 64
     498:	80 93 7a 00 	sts	0x007A, r24
     49c:	08 95       	ret
    display[8] =  pgm_read_byte(alphatable_p + 'u' - 'a') | 0x1;
    dimmer_update();
    return;
  }
#endif
  display[7] = pgm_read_byte(numbertable_p + (brightness / 10)) | 0x1;
     49e:	6a e0       	ldi	r22, 0x0A	; 10
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     4a6:	fb 01       	movw	r30, r22
     4a8:	ec 57       	subi	r30, 0x7C	; 124
     4aa:	ff 4f       	sbci	r31, 0xFF	; 255
     4ac:	e4 91       	lpm	r30, Z+
     4ae:	e1 60       	ori	r30, 0x01	; 1
     4b0:	e0 93 ec 02 	sts	0x02EC, r30
  display[8] = pgm_read_byte(numbertable_p + (brightness % 10)) | 0x1;
     4b4:	c9 01       	movw	r24, r18
     4b6:	6a e0       	ldi	r22, 0x0A	; 10
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     4be:	fc 01       	movw	r30, r24
     4c0:	ec 57       	subi	r30, 0x7C	; 124
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	e4 91       	lpm	r30, Z+
     4c6:	e1 60       	ori	r30, 0x01	; 1
     4c8:	e0 93 ed 02 	sts	0x02ED, r30
  set_vfd_brightness(brightness);
     4cc:	82 2f       	mov	r24, r18
     4ce:	0e 94 c7 01 	call	0x38e	; 0x38e <set_vfd_brightness>
     4d2:	08 95       	ret

000004d4 <display_time>:
    
  }
}

// This displays a time on the clock
void display_time(uint8_t h, uint8_t m, uint8_t s) {
     4d4:	1f 93       	push	r17
     4d6:	18 2f       	mov	r17, r24
     4d8:	26 2f       	mov	r18, r22
  
  // seconds and minutes are at the end
  display[8] =  pgm_read_byte(numbertable_p + (s % 10));
     4da:	84 2f       	mov	r24, r20
     4dc:	6a e0       	ldi	r22, 0x0A	; 10
     4de:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     4e2:	e9 2f       	mov	r30, r25
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	ec 57       	subi	r30, 0x7C	; 124
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	e4 91       	lpm	r30, Z+
     4ec:	e0 93 ed 02 	sts	0x02ED, r30
  display[7] =  pgm_read_byte(numbertable_p + (s / 10));
     4f0:	84 2f       	mov	r24, r20
     4f2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     4f6:	e8 2f       	mov	r30, r24
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ec 57       	subi	r30, 0x7C	; 124
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	e4 91       	lpm	r30, Z+
     500:	e0 93 ec 02 	sts	0x02EC, r30
  display[6] = 0;
     504:	10 92 eb 02 	sts	0x02EB, r1
  display[5] =  pgm_read_byte(numbertable_p + (m % 10));
     508:	82 2f       	mov	r24, r18
     50a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     50e:	e9 2f       	mov	r30, r25
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	ec 57       	subi	r30, 0x7C	; 124
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	e4 91       	lpm	r30, Z+
     518:	e0 93 ea 02 	sts	0x02EA, r30
  display[4] =  pgm_read_byte(numbertable_p + (m / 10)); 
     51c:	82 2f       	mov	r24, r18
     51e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     522:	e8 2f       	mov	r30, r24
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ec 57       	subi	r30, 0x7C	; 124
     528:	ff 4f       	sbci	r31, 0xFF	; 255
     52a:	e4 91       	lpm	r30, Z+
     52c:	e0 93 e9 02 	sts	0x02E9, r30
  display[3] = 0;
     530:	10 92 e8 02 	sts	0x02E8, r1

  // check euro (24h) or US (12h) style time
  if (region == REGION_US) {
     534:	80 91 48 02 	lds	r24, 0x0248
     538:	88 23       	and	r24, r24
     53a:	61 f5       	brne	.+88     	; 0x594 <__stack+0x95>
    display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
     53c:	81 2f       	mov	r24, r17
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0b 96       	adiw	r24, 0x0b	; 11
     542:	6c e0       	ldi	r22, 0x0C	; 12
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     54a:	9c 01       	movw	r18, r24
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	c9 01       	movw	r24, r18
     552:	6a e0       	ldi	r22, 0x0A	; 10
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     55a:	fc 01       	movw	r30, r24
     55c:	ec 57       	subi	r30, 0x7C	; 124
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	e4 91       	lpm	r30, Z+
     562:	e0 93 e7 02 	sts	0x02E7, r30
    display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));
     566:	c9 01       	movw	r24, r18
     568:	6a e0       	ldi	r22, 0x0A	; 10
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     570:	fb 01       	movw	r30, r22
     572:	ec 57       	subi	r30, 0x7C	; 124
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	e4 91       	lpm	r30, Z+
     578:	e0 93 e6 02 	sts	0x02E6, r30

    // We use the '*' as an am/pm notice
    if (h >= 12)
     57c:	1c 30       	cpi	r17, 0x0C	; 12
     57e:	20 f0       	brcs	.+8      	; 0x588 <__stack+0x89>
      display[0] |= 0x1;  // 'pm' notice
     580:	80 91 e5 02 	lds	r24, 0x02E5
     584:	81 60       	ori	r24, 0x01	; 1
     586:	03 c0       	rjmp	.+6      	; 0x58e <__stack+0x8f>
    else 
      display[0] &= ~0x1;  // 'pm' notice
     588:	80 91 e5 02 	lds	r24, 0x02E5
     58c:	8e 7f       	andi	r24, 0xFE	; 254
     58e:	80 93 e5 02 	sts	0x02E5, r24
     592:	1a c0       	rjmp	.+52     	; 0x5c8 <__stack+0xc9>
  } else {
    display[2] =  pgm_read_byte(numbertable_p + ( (h%24) % 10));
     594:	81 2f       	mov	r24, r17
     596:	68 e1       	ldi	r22, 0x18	; 24
     598:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     59c:	29 2f       	mov	r18, r25
     59e:	89 2f       	mov	r24, r25
     5a0:	6a e0       	ldi	r22, 0x0A	; 10
     5a2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     5a6:	e9 2f       	mov	r30, r25
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ec 57       	subi	r30, 0x7C	; 124
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	e4 91       	lpm	r30, Z+
     5b0:	e0 93 e7 02 	sts	0x02E7, r30
    display[1] =  pgm_read_byte(numbertable_p + ( (h%24) / 10));
     5b4:	82 2f       	mov	r24, r18
     5b6:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     5ba:	e8 2f       	mov	r30, r24
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ec 57       	subi	r30, 0x7C	; 124
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	e4 91       	lpm	r30, Z+
     5c4:	e0 93 e6 02 	sts	0x02E6, r30
  }
}
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <display_alarm>:

// Kinda like display_time but just hours and minutes
void display_alarm(uint8_t h, uint8_t m){ 
     5cc:	38 2f       	mov	r19, r24
     5ce:	26 2f       	mov	r18, r22
  display[8] = 0;
     5d0:	10 92 ed 02 	sts	0x02ED, r1
  display[7] = 0;
     5d4:	10 92 ec 02 	sts	0x02EC, r1
  display[6] = 0;
     5d8:	10 92 eb 02 	sts	0x02EB, r1
  display[5] = pgm_read_byte(numbertable_p + (m % 10));
     5dc:	86 2f       	mov	r24, r22
     5de:	6a e0       	ldi	r22, 0x0A	; 10
     5e0:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     5e4:	e9 2f       	mov	r30, r25
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ec 57       	subi	r30, 0x7C	; 124
     5ea:	ff 4f       	sbci	r31, 0xFF	; 255
     5ec:	e4 91       	lpm	r30, Z+
     5ee:	e0 93 ea 02 	sts	0x02EA, r30
  display[4] = pgm_read_byte(numbertable_p + (m / 10)); 
     5f2:	82 2f       	mov	r24, r18
     5f4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     5f8:	e8 2f       	mov	r30, r24
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	ec 57       	subi	r30, 0x7C	; 124
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	e4 91       	lpm	r30, Z+
     602:	e0 93 e9 02 	sts	0x02E9, r30
  display[3] = 0;
     606:	10 92 e8 02 	sts	0x02E8, r1

  // check euro or US style time
  if (region == REGION_US) {
     60a:	80 91 48 02 	lds	r24, 0x0248
     60e:	88 23       	and	r24, r24
     610:	09 f0       	breq	.+2      	; 0x614 <display_alarm+0x48>
     612:	3b c0       	rjmp	.+118    	; 0x68a <display_alarm+0xbe>
    if (h >= 12) {
     614:	3c 30       	cpi	r19, 0x0C	; 12
     616:	58 f0       	brcs	.+22     	; 0x62e <display_alarm+0x62>
      display[0] |= 0x1;  // 'pm' notice
     618:	80 91 e5 02 	lds	r24, 0x02E5
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	80 93 e5 02 	sts	0x02E5, r24
      display[7] = pgm_read_byte(alphatable_p + 'p' - 'a');
     622:	e7 e7       	ldi	r30, 0x77	; 119
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	e4 91       	lpm	r30, Z+
     628:	e0 93 ec 02 	sts	0x02EC, r30
     62c:	0a c0       	rjmp	.+20     	; 0x642 <display_alarm+0x76>
    } else {
      display[7] = pgm_read_byte(alphatable_p + 'a' - 'a');
     62e:	e8 e6       	ldi	r30, 0x68	; 104
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	e4 91       	lpm	r30, Z+
     634:	e0 93 ec 02 	sts	0x02EC, r30
      display[0] &= ~0x1;  // 'am' notice
     638:	80 91 e5 02 	lds	r24, 0x02E5
     63c:	8e 7f       	andi	r24, 0xFE	; 254
     63e:	80 93 e5 02 	sts	0x02E5, r24
    }
    display[8] = pgm_read_byte(alphatable_p + 'm' - 'a');
     642:	e4 e7       	ldi	r30, 0x74	; 116
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	e4 91       	lpm	r30, Z+
     648:	e0 93 ed 02 	sts	0x02ED, r30

    display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
     64c:	83 2f       	mov	r24, r19
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0b 96       	adiw	r24, 0x0b	; 11
     652:	6c e0       	ldi	r22, 0x0C	; 12
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     65a:	9c 01       	movw	r18, r24
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	c9 01       	movw	r24, r18
     662:	6a e0       	ldi	r22, 0x0A	; 10
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     66a:	fc 01       	movw	r30, r24
     66c:	ec 57       	subi	r30, 0x7C	; 124
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	e4 91       	lpm	r30, Z+
     672:	e0 93 e7 02 	sts	0x02E7, r30
    display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));
     676:	c9 01       	movw	r24, r18
     678:	6a e0       	ldi	r22, 0x0A	; 10
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     680:	fb 01       	movw	r30, r22
     682:	ec 57       	subi	r30, 0x7C	; 124
     684:	ff 4f       	sbci	r31, 0xFF	; 255
     686:	e4 91       	lpm	r30, Z+
     688:	1e c0       	rjmp	.+60     	; 0x6c6 <display_alarm+0xfa>
  } else {
      display[2] =  pgm_read_byte(numbertable_p + ( (((h+23)%24)+1) % 10));
     68a:	83 2f       	mov	r24, r19
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	47 96       	adiw	r24, 0x17	; 23
     690:	68 e1       	ldi	r22, 0x18	; 24
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     698:	9c 01       	movw	r18, r24
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	c9 01       	movw	r24, r18
     6a0:	6a e0       	ldi	r22, 0x0A	; 10
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     6a8:	fc 01       	movw	r30, r24
     6aa:	ec 57       	subi	r30, 0x7C	; 124
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	e4 91       	lpm	r30, Z+
     6b0:	e0 93 e7 02 	sts	0x02E7, r30
    display[1] =  pgm_read_byte(numbertable_p + ( (((h+23)%24)+1) / 10));
     6b4:	c9 01       	movw	r24, r18
     6b6:	6a e0       	ldi	r22, 0x0A	; 10
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     6be:	fb 01       	movw	r30, r22
     6c0:	ec 57       	subi	r30, 0x7C	; 124
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	e4 91       	lpm	r30, Z+
     6c6:	e0 93 e6 02 	sts	0x02E6, r30
     6ca:	08 95       	ret

000006cc <display_timezone>:
  }
}

// Kinda like display_time but just hours and minutes allows negative hours.
void display_timezone(int8_t h, uint8_t m){ 
     6cc:	48 2f       	mov	r20, r24
     6ce:	26 2f       	mov	r18, r22
  display[8] = pgm_read_byte(alphatable_p + 'c' - 'a');
     6d0:	ea e6       	ldi	r30, 0x6A	; 106
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	84 91       	lpm	r24, Z+
     6d6:	80 93 ed 02 	sts	0x02ED, r24
  display[7] = pgm_read_byte(alphatable_p + 't' - 'a');
     6da:	71 96       	adiw	r30, 0x11	; 17
     6dc:	84 91       	lpm	r24, Z+
     6de:	80 93 ec 02 	sts	0x02EC, r24
  display[6] = pgm_read_byte(alphatable_p + 'u' - 'a');
     6e2:	31 96       	adiw	r30, 0x01	; 1
     6e4:	e4 91       	lpm	r30, Z+
     6e6:	e0 93 eb 02 	sts	0x02EB, r30
  display[5] = pgm_read_byte(numbertable_p + (m % 10));
     6ea:	86 2f       	mov	r24, r22
     6ec:	6a e0       	ldi	r22, 0x0A	; 10
     6ee:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     6f2:	e9 2f       	mov	r30, r25
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ec 57       	subi	r30, 0x7C	; 124
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	e4 91       	lpm	r30, Z+
     6fc:	e0 93 ea 02 	sts	0x02EA, r30
  display[4] = pgm_read_byte(numbertable_p + (m / 10)); 
     700:	82 2f       	mov	r24, r18
     702:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
     706:	e8 2f       	mov	r30, r24
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ec 57       	subi	r30, 0x7C	; 124
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	e4 91       	lpm	r30, Z+
     710:	e0 93 e9 02 	sts	0x02E9, r30
  display[3] = 0;
     714:	10 92 e8 02 	sts	0x02E8, r1
  display[2] = pgm_read_byte(numbertable_p + (abs(h) % 10));
     718:	24 2f       	mov	r18, r20
     71a:	33 27       	eor	r19, r19
     71c:	27 fd       	sbrc	r18, 7
     71e:	30 95       	com	r19
     720:	37 ff       	sbrs	r19, 7
     722:	03 c0       	rjmp	.+6      	; 0x72a <display_timezone+0x5e>
     724:	30 95       	com	r19
     726:	21 95       	neg	r18
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	c9 01       	movw	r24, r18
     72c:	6a e0       	ldi	r22, 0x0A	; 10
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     734:	fc 01       	movw	r30, r24
     736:	ec 57       	subi	r30, 0x7C	; 124
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	e4 91       	lpm	r30, Z+
     73c:	e0 93 e7 02 	sts	0x02E7, r30
  display[1] = pgm_read_byte(numbertable_p + (abs(h) / 10));
     740:	c9 01       	movw	r24, r18
     742:	6a e0       	ldi	r22, 0x0A	; 10
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     74a:	fb 01       	movw	r30, r22
     74c:	ec 57       	subi	r30, 0x7C	; 124
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	e4 91       	lpm	r30, Z+
     752:	e0 93 e6 02 	sts	0x02E6, r30
  // We use the '-' as a negative sign
  if (h >= 0)
     756:	47 fd       	sbrc	r20, 7
     758:	04 c0       	rjmp	.+8      	; 0x762 <display_timezone+0x96>
    display[0] &= ~0x2;  // positive numbers, implicit sign
     75a:	80 91 e5 02 	lds	r24, 0x02E5
     75e:	8d 7f       	andi	r24, 0xFD	; 253
     760:	03 c0       	rjmp	.+6      	; 0x768 <display_timezone+0x9c>
  else 
    display[0] |= 0x2;  // negative numbers, display negative sign
     762:	80 91 e5 02 	lds	r24, 0x02E5
     766:	82 60       	ori	r24, 0x02	; 2
     768:	80 93 e5 02 	sts	0x02E5, r24
     76c:	08 95       	ret

0000076e <display_str>:

}

// display words (menus, prompts, etc)
void display_str(char *s) {
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
  uint8_t i;

  // don't use the lefthand dot/slash digit
  display[0] = 0;
     772:	10 92 e5 02 	sts	0x02E5, r1
     776:	ec 01       	movw	r28, r24
     778:	a6 ee       	ldi	r26, 0xE6	; 230
     77a:	b2 e0       	ldi	r27, 0x02	; 2

  // up to 8 characters
  for (i=1; i<9; i++) {
    // check for null-termination
    if (s[i-1] == 0)
     77c:	e8 81       	ld	r30, Y
     77e:	ee 23       	and	r30, r30
     780:	d1 f0       	breq	.+52     	; 0x7b6 <display_str+0x48>
      return;

    // Numbers and leters are looked up in the font table!
    if ((s[i-1] >= 'a') && (s[i-1] <= 'z')) {
     782:	8e 2f       	mov	r24, r30
     784:	81 56       	subi	r24, 0x61	; 97
     786:	8a 31       	cpi	r24, 0x1A	; 26
     788:	28 f4       	brcc	.+10     	; 0x794 <display_str+0x26>
      display[i] =  pgm_read_byte(alphatable_p + s[i-1] - 'a');
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	e9 5f       	subi	r30, 0xF9	; 249
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	e4 91       	lpm	r30, Z+
     792:	08 c0       	rjmp	.+16     	; 0x7a4 <display_str+0x36>
    } else if ((s[i-1] >= '0') && (s[i-1] <= '9')) {
     794:	8e 2f       	mov	r24, r30
     796:	80 53       	subi	r24, 0x30	; 48
     798:	8a 30       	cpi	r24, 0x0A	; 10
     79a:	30 f4       	brcc	.+12     	; 0x7a8 <display_str+0x3a>
      display[i] =  pgm_read_byte(numbertable_p + s[i-1] - '0');
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	ec 5a       	subi	r30, 0xAC	; 172
     7a0:	ff 4f       	sbci	r31, 0xFF	; 255
     7a2:	e4 91       	lpm	r30, Z+
     7a4:	ec 93       	st	X, r30
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <display_str+0x3c>
    } else {
      display[i] = 0;      // spaces and other stuff are ignored :(
     7a8:	1c 92       	st	X, r1
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	11 96       	adiw	r26, 0x01	; 1

  // don't use the lefthand dot/slash digit
  display[0] = 0;

  // up to 8 characters
  for (i=1; i<9; i++) {
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	ae 3e       	cpi	r26, 0xEE	; 238
     7b2:	b8 07       	cpc	r27, r24
     7b4:	19 f7       	brne	.-58     	; 0x77c <display_str+0xe>
      display[i] =  pgm_read_byte(numbertable_p + s[i-1] - '0');
    } else {
      display[i] = 0;      // spaces and other stuff are ignored :(
    }
  }
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <display_date>:
}

/**************************** DISPLAY *****************************/

// We can display the current date!
void display_date(uint8_t style) {
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29

  // This type is mm-dd-yy OR dd-mm-yy depending on our pref.
  if (style == DATE) {
     7c0:	88 23       	and	r24, r24
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <display_date+0xa>
     7c4:	96 c0       	rjmp	.+300    	; 0x8f2 <display_date+0x136>
    display[0] = 0;
     7c6:	10 92 e5 02 	sts	0x02E5, r1
    display[6] = display[3] = 0x02;     // put dashes between num
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	80 93 e8 02 	sts	0x02E8, r24
     7d0:	80 93 eb 02 	sts	0x02EB, r24

    if (region == REGION_US) {
     7d4:	80 91 48 02 	lds	r24, 0x0248
     7d8:	88 23       	and	r24, r24
     7da:	09 f0       	breq	.+2      	; 0x7de <display_date+0x22>
     7dc:	37 c0       	rjmp	.+110    	; 0x84c <display_date+0x90>
      // mm-dd-yy
      display[1] = pgm_read_byte(numbertable_p + (date_m / 10));
     7de:	80 91 f4 02 	lds	r24, 0x02F4
     7e2:	6a e0       	ldi	r22, 0x0A	; 10
     7e4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     7e8:	e8 2f       	mov	r30, r24
     7ea:	ff 27       	eor	r31, r31
     7ec:	e7 fd       	sbrc	r30, 7
     7ee:	f0 95       	com	r31
     7f0:	ec 57       	subi	r30, 0x7C	; 124
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	e4 91       	lpm	r30, Z+
     7f6:	e0 93 e6 02 	sts	0x02E6, r30
      display[2] = pgm_read_byte(numbertable_p + (date_m % 10));
     7fa:	80 91 f4 02 	lds	r24, 0x02F4
     7fe:	6a e0       	ldi	r22, 0x0A	; 10
     800:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     804:	e9 2f       	mov	r30, r25
     806:	ff 27       	eor	r31, r31
     808:	e7 fd       	sbrc	r30, 7
     80a:	f0 95       	com	r31
     80c:	ec 57       	subi	r30, 0x7C	; 124
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	e4 91       	lpm	r30, Z+
     812:	e0 93 e7 02 	sts	0x02E7, r30
      display[4] = pgm_read_byte(numbertable_p + (date_d / 10));
     816:	80 91 e4 02 	lds	r24, 0x02E4
     81a:	6a e0       	ldi	r22, 0x0A	; 10
     81c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     820:	e8 2f       	mov	r30, r24
     822:	ff 27       	eor	r31, r31
     824:	e7 fd       	sbrc	r30, 7
     826:	f0 95       	com	r31
     828:	ec 57       	subi	r30, 0x7C	; 124
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	e4 91       	lpm	r30, Z+
     82e:	e0 93 e9 02 	sts	0x02E9, r30
      display[5] = pgm_read_byte(numbertable_p + (date_d % 10));
     832:	80 91 e4 02 	lds	r24, 0x02E4
     836:	6a e0       	ldi	r22, 0x0A	; 10
     838:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     83c:	e9 2f       	mov	r30, r25
     83e:	ff 27       	eor	r31, r31
     840:	e7 fd       	sbrc	r30, 7
     842:	f0 95       	com	r31
     844:	ec 57       	subi	r30, 0x7C	; 124
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	e4 91       	lpm	r30, Z+
     84a:	36 c0       	rjmp	.+108    	; 0x8b8 <display_date+0xfc>
    } else {
      // dd-mm-yy
      display[1] = pgm_read_byte(numbertable_p + (date_d / 10));
     84c:	80 91 e4 02 	lds	r24, 0x02E4
     850:	6a e0       	ldi	r22, 0x0A	; 10
     852:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     856:	e8 2f       	mov	r30, r24
     858:	ff 27       	eor	r31, r31
     85a:	e7 fd       	sbrc	r30, 7
     85c:	f0 95       	com	r31
     85e:	ec 57       	subi	r30, 0x7C	; 124
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	e4 91       	lpm	r30, Z+
     864:	e0 93 e6 02 	sts	0x02E6, r30
      display[2] = pgm_read_byte(numbertable_p + (date_d % 10));
     868:	80 91 e4 02 	lds	r24, 0x02E4
     86c:	6a e0       	ldi	r22, 0x0A	; 10
     86e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     872:	e9 2f       	mov	r30, r25
     874:	ff 27       	eor	r31, r31
     876:	e7 fd       	sbrc	r30, 7
     878:	f0 95       	com	r31
     87a:	ec 57       	subi	r30, 0x7C	; 124
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	e4 91       	lpm	r30, Z+
     880:	e0 93 e7 02 	sts	0x02E7, r30
      display[4] = pgm_read_byte(numbertable_p + (date_m / 10));
     884:	80 91 f4 02 	lds	r24, 0x02F4
     888:	6a e0       	ldi	r22, 0x0A	; 10
     88a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     88e:	e8 2f       	mov	r30, r24
     890:	ff 27       	eor	r31, r31
     892:	e7 fd       	sbrc	r30, 7
     894:	f0 95       	com	r31
     896:	ec 57       	subi	r30, 0x7C	; 124
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	e4 91       	lpm	r30, Z+
     89c:	e0 93 e9 02 	sts	0x02E9, r30
      display[5] = pgm_read_byte(numbertable_p + (date_m % 10));
     8a0:	80 91 f4 02 	lds	r24, 0x02F4
     8a4:	6a e0       	ldi	r22, 0x0A	; 10
     8a6:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     8aa:	e9 2f       	mov	r30, r25
     8ac:	ff 27       	eor	r31, r31
     8ae:	e7 fd       	sbrc	r30, 7
     8b0:	f0 95       	com	r31
     8b2:	ec 57       	subi	r30, 0x7C	; 124
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	e4 91       	lpm	r30, Z+
     8b8:	e0 93 ea 02 	sts	0x02EA, r30
    }
    // the yy part is the same
    display[7] = pgm_read_byte(numbertable_p + (date_y / 10));
     8bc:	80 91 e1 02 	lds	r24, 0x02E1
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     8c6:	e8 2f       	mov	r30, r24
     8c8:	ff 27       	eor	r31, r31
     8ca:	e7 fd       	sbrc	r30, 7
     8cc:	f0 95       	com	r31
     8ce:	ec 57       	subi	r30, 0x7C	; 124
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	e4 91       	lpm	r30, Z+
     8d4:	e0 93 ec 02 	sts	0x02EC, r30
    display[8] = pgm_read_byte(numbertable_p + (date_y % 10));
     8d8:	80 91 e1 02 	lds	r24, 0x02E1
     8dc:	6a e0       	ldi	r22, 0x0A	; 10
     8de:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     8e2:	e9 2f       	mov	r30, r25
     8e4:	ff 27       	eor	r31, r31
     8e6:	e7 fd       	sbrc	r30, 7
     8e8:	f0 95       	com	r31
     8ea:	ec 57       	subi	r30, 0x7C	; 124
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	e4 91       	lpm	r30, Z+
     8f0:	ee c0       	rjmp	.+476    	; 0xace <display_date+0x312>

  } else if (style == DAY) {
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <display_date+0x13c>
     8f6:	ed c0       	rjmp	.+474    	; 0xad2 <display_date+0x316>
    uint16_t month, year;
    uint8_t dotw;

    // Calculate day of the week
    
    month = date_m;
     8f8:	80 91 f4 02 	lds	r24, 0x02F4
     8fc:	c8 2f       	mov	r28, r24
     8fe:	dd 27       	eor	r29, r29
     900:	c7 fd       	sbrc	r28, 7
     902:	d0 95       	com	r29
    year = 2000 + date_y;
     904:	80 91 e1 02 	lds	r24, 0x02E1
     908:	e8 2f       	mov	r30, r24
     90a:	ff 27       	eor	r31, r31
     90c:	e7 fd       	sbrc	r30, 7
     90e:	f0 95       	com	r31
     910:	e0 53       	subi	r30, 0x30	; 48
     912:	f8 4f       	sbci	r31, 0xF8	; 248
    if (date_m < 3)  {
     914:	80 91 f4 02 	lds	r24, 0x02F4
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	14 f4       	brge	.+4      	; 0x920 <display_date+0x164>
      month += 12;
     91c:	2c 96       	adiw	r28, 0x0c	; 12
      year -= 1;
     91e:	31 97       	sbiw	r30, 0x01	; 1
    }
    dotw = (date_d + (2 * month) + (6 * (month+1)/10) + year + (year/4) - (year/100) + (year/400) + 1) % 7;
     920:	20 91 e4 02 	lds	r18, 0x02E4

    // Display the day first
    display[8] = display[7] = 0;
     924:	10 92 ec 02 	sts	0x02EC, r1
     928:	10 92 ed 02 	sts	0x02ED, r1
    switch (dotw) {
     92c:	33 27       	eor	r19, r19
     92e:	27 fd       	sbrc	r18, 7
     930:	30 95       	com	r19
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	2e 0f       	add	r18, r30
     938:	3f 1f       	adc	r19, r31
     93a:	ce 01       	movw	r24, r28
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	28 0f       	add	r18, r24
     942:	39 1f       	adc	r19, r25
     944:	cf 01       	movw	r24, r30
     946:	96 95       	lsr	r25
     948:	87 95       	ror	r24
     94a:	96 95       	lsr	r25
     94c:	87 95       	ror	r24
     94e:	28 0f       	add	r18, r24
     950:	39 1f       	adc	r19, r25
     952:	cf 01       	movw	r24, r30
     954:	60 e9       	ldi	r22, 0x90	; 144
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     95c:	26 0f       	add	r18, r22
     95e:	37 1f       	adc	r19, r23
     960:	cf 01       	movw	r24, r30
     962:	64 e6       	ldi	r22, 0x64	; 100
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     96a:	26 1b       	sub	r18, r22
     96c:	37 0b       	sbc	r19, r23
     96e:	ae 01       	movw	r20, r28
     970:	4f 5f       	subi	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	ca 01       	movw	r24, r20
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	84 0f       	add	r24, r20
     97c:	95 1f       	adc	r25, r21
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	6a e0       	ldi	r22, 0x0A	; 10
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     98a:	c9 01       	movw	r24, r18
     98c:	86 0f       	add	r24, r22
     98e:	97 1f       	adc	r25, r23
     990:	67 e0       	ldi	r22, 0x07	; 7
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	b9 f0       	breq	.+46     	; 0x9ca <display_date+0x20e>
     99c:	84 30       	cpi	r24, 0x04	; 4
     99e:	28 f4       	brcc	.+10     	; 0x9aa <display_date+0x1ee>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	69 f0       	breq	.+26     	; 0x9be <display_date+0x202>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	70 f4       	brcc	.+28     	; 0x9c4 <display_date+0x208>
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <display_date+0x1fc>
     9aa:	85 30       	cpi	r24, 0x05	; 5
     9ac:	a1 f0       	breq	.+40     	; 0x9d6 <display_date+0x21a>
     9ae:	85 30       	cpi	r24, 0x05	; 5
     9b0:	78 f0       	brcs	.+30     	; 0x9d0 <display_date+0x214>
     9b2:	86 30       	cpi	r24, 0x06	; 6
     9b4:	b9 f4       	brne	.+46     	; 0x9e4 <display_date+0x228>
     9b6:	12 c0       	rjmp	.+36     	; 0x9dc <display_date+0x220>
    case 0:
      display_str("sunday"); break;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <display_date+0x224>
    case 1:
      display_str("monday"); break;
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <display_date+0x224>
    case 2:
      display_str("tuesday"); break;
     9c4:	8e e0       	ldi	r24, 0x0E	; 14
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0b c0       	rjmp	.+22     	; 0x9e0 <display_date+0x224>
    case 3:
      display_str("wednsday"); break;
     9ca:	86 e1       	ldi	r24, 0x16	; 22
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <display_date+0x224>
    case 4:
      display_str("thursday"); break;
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <display_date+0x224>
    case 5:
      display_str("friday"); break;
     9d6:	88 e2       	ldi	r24, 0x28	; 40
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <display_date+0x224>
    case 6:
      display_str("saturday"); break;
     9dc:	8f e2       	ldi	r24, 0x2F	; 47
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
     9e4:	78 94       	sei

  milliseconds = 0;
     9e6:	10 92 56 02 	sts	0x0256, r1
     9ea:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
     9ee:	80 91 55 02 	lds	r24, 0x0255
     9f2:	90 91 56 02 	lds	r25, 0x0256
     9f6:	88 5e       	subi	r24, 0xE8	; 232
     9f8:	93 40       	sbci	r25, 0x03	; 3
     9fa:	c8 f3       	brcs	.-14     	; 0x9ee <display_date+0x232>
    
    // wait one seconds about
    delayms(1000);

    // Then display the month and date
    display[6] = display[5] = display[4] = 0;
     9fc:	10 92 e9 02 	sts	0x02E9, r1
     a00:	10 92 ea 02 	sts	0x02EA, r1
     a04:	10 92 eb 02 	sts	0x02EB, r1
    switch (date_m) {
     a08:	80 91 f4 02 	lds	r24, 0x02F4
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	79 f1       	breq	.+94     	; 0xa6e <display_date+0x2b2>
     a10:	87 30       	cpi	r24, 0x07	; 7
     a12:	74 f4       	brge	.+28     	; 0xa30 <display_date+0x274>
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	11 f1       	breq	.+68     	; 0xa5c <display_date+0x2a0>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	2c f4       	brge	.+10     	; 0xa26 <display_date+0x26a>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	c1 f0       	breq	.+48     	; 0xa50 <display_date+0x294>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	d9 f5       	brne	.+118    	; 0xa9a <display_date+0x2de>
     a24:	18 c0       	rjmp	.+48     	; 0xa56 <display_date+0x29a>
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	e1 f0       	breq	.+56     	; 0xa62 <display_date+0x2a6>
     a2a:	85 30       	cpi	r24, 0x05	; 5
     a2c:	b1 f5       	brne	.+108    	; 0xa9a <display_date+0x2de>
     a2e:	1c c0       	rjmp	.+56     	; 0xa68 <display_date+0x2ac>
     a30:	89 30       	cpi	r24, 0x09	; 9
     a32:	31 f1       	breq	.+76     	; 0xa80 <display_date+0x2c4>
     a34:	8a 30       	cpi	r24, 0x0A	; 10
     a36:	2c f4       	brge	.+10     	; 0xa42 <display_date+0x286>
     a38:	87 30       	cpi	r24, 0x07	; 7
     a3a:	e1 f0       	breq	.+56     	; 0xa74 <display_date+0x2b8>
     a3c:	88 30       	cpi	r24, 0x08	; 8
     a3e:	69 f5       	brne	.+90     	; 0xa9a <display_date+0x2de>
     a40:	1c c0       	rjmp	.+56     	; 0xa7a <display_date+0x2be>
     a42:	8b 30       	cpi	r24, 0x0B	; 11
     a44:	19 f1       	breq	.+70     	; 0xa8c <display_date+0x2d0>
     a46:	8b 30       	cpi	r24, 0x0B	; 11
     a48:	f4 f0       	brlt	.+60     	; 0xa86 <display_date+0x2ca>
     a4a:	8c 30       	cpi	r24, 0x0C	; 12
     a4c:	31 f5       	brne	.+76     	; 0xa9a <display_date+0x2de>
     a4e:	21 c0       	rjmp	.+66     	; 0xa92 <display_date+0x2d6>
    case 1:
      display_str("jan"); break;
     a50:	88 e3       	ldi	r24, 0x38	; 56
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <display_date+0x2da>
    case 2:
      display_str("feb"); break;
     a56:	8c e3       	ldi	r24, 0x3C	; 60
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	1d c0       	rjmp	.+58     	; 0xa96 <display_date+0x2da>
    case 3:
      display_str("march"); break;
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	1a c0       	rjmp	.+52     	; 0xa96 <display_date+0x2da>
    case 4:
      display_str("april"); break;
     a62:	86 e4       	ldi	r24, 0x46	; 70
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	17 c0       	rjmp	.+46     	; 0xa96 <display_date+0x2da>
    case 5:
      display_str("may"); break;
     a68:	8c e4       	ldi	r24, 0x4C	; 76
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	14 c0       	rjmp	.+40     	; 0xa96 <display_date+0x2da>
    case 6:
      display_str("june"); break;
     a6e:	80 e5       	ldi	r24, 0x50	; 80
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	11 c0       	rjmp	.+34     	; 0xa96 <display_date+0x2da>
    case 7:
      display_str("july"); break;
     a74:	85 e5       	ldi	r24, 0x55	; 85
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <display_date+0x2da>
    case 8:
      display_str("augst"); break;
     a7a:	8a e5       	ldi	r24, 0x5A	; 90
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0b c0       	rjmp	.+22     	; 0xa96 <display_date+0x2da>
    case 9:
      display_str("sept"); break;
     a80:	80 e6       	ldi	r24, 0x60	; 96
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	08 c0       	rjmp	.+16     	; 0xa96 <display_date+0x2da>
    case 10:
      display_str("octob"); break;
     a86:	85 e6       	ldi	r24, 0x65	; 101
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <display_date+0x2da>
    case 11:
      display_str("novem"); break;
     a8c:	8b e6       	ldi	r24, 0x6B	; 107
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <display_date+0x2da>
    case 12:
      display_str("decem"); break;
     a92:	81 e7       	ldi	r24, 0x71	; 113
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
    }
    display[7] = pgm_read_byte(numbertable_p + (date_d / 10));
     a9a:	80 91 e4 02 	lds	r24, 0x02E4
     a9e:	6a e0       	ldi	r22, 0x0A	; 10
     aa0:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     aa4:	e8 2f       	mov	r30, r24
     aa6:	ff 27       	eor	r31, r31
     aa8:	e7 fd       	sbrc	r30, 7
     aaa:	f0 95       	com	r31
     aac:	ec 57       	subi	r30, 0x7C	; 124
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	e4 91       	lpm	r30, Z+
     ab2:	e0 93 ec 02 	sts	0x02EC, r30
    display[8] = pgm_read_byte(numbertable_p + (date_d % 10));
     ab6:	80 91 e4 02 	lds	r24, 0x02E4
     aba:	6a e0       	ldi	r22, 0x0A	; 10
     abc:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
     ac0:	e9 2f       	mov	r30, r25
     ac2:	ff 27       	eor	r31, r31
     ac4:	e7 fd       	sbrc	r30, 7
     ac6:	f0 95       	com	r31
     ac8:	ec 57       	subi	r30, 0x7C	; 124
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	e4 91       	lpm	r30, Z+
     ace:	e0 93 ed 02 	sts	0x02ED, r30
    
  }
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <vfd_init>:

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
     ad8:	81 e5       	ldi	r24, 0x51	; 81
     ada:	8c bd       	out	0x2c, r24	; 44
}
     adc:	08 95       	ret

00000ade <vfd_send>:
  vfd_send(d);
}

// send raw data to display, its pretty straightforward. Just send 32 bits via SPI
// the bottom 20 define the segments
void vfd_send(uint32_t d) {
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
  // send lowest 20 bits
  cli();       // to prevent flicker we turn off interrupts
     ae2:	f8 94       	cli
  spi_xfer(d >> 16);
     ae4:	ca 01       	movw	r24, r20
     ae6:	aa 27       	eor	r26, r26
     ae8:	bb 27       	eor	r27, r27
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) {

  SPDR = c;
     aea:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & _BV(SPIF)));
     aec:	0d b4       	in	r0, 0x2d	; 45
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <vfd_send+0xe>
// the bottom 20 define the segments
void vfd_send(uint32_t d) {
  // send lowest 20 bits
  cli();       // to prevent flicker we turn off interrupts
  spi_xfer(d >> 16);
  spi_xfer(d >> 8);
     af2:	bb 27       	eor	r27, r27
     af4:	a5 2f       	mov	r26, r21
     af6:	94 2f       	mov	r25, r20
     af8:	83 2f       	mov	r24, r19
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) {

  SPDR = c;
     afa:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & _BV(SPIF)));
     afc:	0d b4       	in	r0, 0x2d	; 45
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <vfd_send+0x1e>
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) {

  SPDR = c;
     b02:	2e bd       	out	0x2e, r18	; 46
  while (! (SPSR & _BV(SPIF)));
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <vfd_send+0x26>
  spi_xfer(d >> 16);
  spi_xfer(d >> 8);
  spi_xfer(d);

  // latch data
  VFDLOAD_PORT |= _BV(VFDLOAD);
     b0a:	40 9a       	sbi	0x08, 0	; 8
  VFDLOAD_PORT &= ~_BV(VFDLOAD);
     b0c:	40 98       	cbi	0x08, 0	; 8
  sei();
     b0e:	78 94       	sei
}
     b10:	08 95       	ret

00000b12 <setdisplay>:
}

// This changes and updates the display
// We use the digit/segment table to determine which
// pins on the MAX6921 to turn on
void setdisplay(uint8_t digit, uint8_t segments) {
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
  uint32_t d = 0;  // we only need 20 bits but 32 will do
  uint8_t i;

  // Set the digit selection pin
  d |= _BV(pgm_read_byte(digittable_p + digit));
     b22:	e8 2f       	mov	r30, r24
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	e0 57       	subi	r30, 0x70	; 112
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	e4 91       	lpm	r30, Z+
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <setdisplay+0x24>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	ea 95       	dec	r30
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <setdisplay+0x20>
     b3a:	7c 01       	movw	r14, r24
     b3c:	00 27       	eor	r16, r16
     b3e:	f7 fc       	sbrc	r15, 7
     b40:	00 95       	com	r16
     b42:	10 2f       	mov	r17, r16
     b44:	20 91 5c 02 	lds	r18, 0x025C
     b48:	30 91 5d 02 	lds	r19, 0x025D
     b4c:	40 91 5e 02 	lds	r20, 0x025E
     b50:	50 91 5f 02 	lds	r21, 0x025F
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
    if (segments & _BV(i)) {
     b58:	70 e0       	ldi	r23, 0x00	; 0
      t = 1;
      t <<= pgm_read_byte(segmenttable_p + i);
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	a9 2e       	mov	r10, r25
     b5e:	b1 2c       	mov	r11, r1
     b60:	c1 2c       	mov	r12, r1
     b62:	d1 2c       	mov	r13, r1
  d |= _BV(pgm_read_byte(digittable_p + digit));

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
    if (segments & _BV(i)) {
     b64:	cb 01       	movw	r24, r22
     b66:	0a 2e       	mov	r0, r26
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <setdisplay+0x5c>
     b6a:	95 95       	asr	r25
     b6c:	87 95       	ror	r24
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <setdisplay+0x58>
     b72:	80 ff       	sbrs	r24, 0
     b74:	11 c0       	rjmp	.+34     	; 0xb98 <setdisplay+0x86>
      t = 1;
      t <<= pgm_read_byte(segmenttable_p + i);
     b76:	fd 01       	movw	r30, r26
     b78:	e5 56       	subi	r30, 0x65	; 101
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	e4 91       	lpm	r30, Z+
     b7e:	a6 01       	movw	r20, r12
     b80:	95 01       	movw	r18, r10
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <setdisplay+0x7a>
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	44 1f       	adc	r20, r20
     b8a:	55 1f       	adc	r21, r21
     b8c:	ea 95       	dec	r30
     b8e:	d2 f7       	brpl	.-12     	; 0xb84 <setdisplay+0x72>
      d |= t;
     b90:	e2 2a       	or	r14, r18
     b92:	f3 2a       	or	r15, r19
     b94:	04 2b       	or	r16, r20
     b96:	15 2b       	or	r17, r21
     b98:	11 96       	adiw	r26, 0x01	; 1
  // Set the digit selection pin
  d |= _BV(pgm_read_byte(digittable_p + digit));

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
     b9a:	a8 30       	cpi	r26, 0x08	; 8
     b9c:	b1 05       	cpc	r27, r1
     b9e:	11 f7       	brne	.-60     	; 0xb64 <setdisplay+0x52>
     ba0:	20 93 5c 02 	sts	0x025C, r18
     ba4:	30 93 5d 02 	sts	0x025D, r19
     ba8:	40 93 5e 02 	sts	0x025E, r20
     bac:	50 93 5f 02 	sts	0x025F, r21
      d |= t;
    }
  }

  // Shift the data out to the display
  vfd_send(d);
     bb0:	c8 01       	movw	r24, r16
     bb2:	b7 01       	movw	r22, r14
     bb4:	0e 94 6f 05 	call	0xade	; 0xade <vfd_send>
}
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	08 95       	ret

00000bca <__vector_16>:
void kickthedog(void) {
  wdt_reset();
}

// called @ (F_CPU/256) = ~30khz (31.25 khz)
SIGNAL (SIG_OVERFLOW0) {
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	2f 93       	push	r18
     bd6:	3f 93       	push	r19
     bd8:	4f 93       	push	r20
     bda:	5f 93       	push	r21
     bdc:	6f 93       	push	r22
     bde:	7f 93       	push	r23
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
  // allow other interrupts to go off while we're doing display updates
  sei();
     bec:	78 94       	sei
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
     bee:	a8 95       	wdr

  // kick the dog
  kickthedog();

  // divide down to 100Hz * digits
  muxdiv++;
     bf0:	80 91 4f 02 	lds	r24, 0x024F
     bf4:	90 91 50 02 	lds	r25, 0x0250
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 50 02 	sts	0x0250, r25
     bfe:	80 93 4f 02 	sts	0x024F, r24
  if (muxdiv < MUX_DIVIDER)
     c02:	81 97       	sbiw	r24, 0x21	; 33
     c04:	08 f4       	brcc	.+2      	; 0xc08 <__vector_16+0x3e>
     c06:	6c c0       	rjmp	.+216    	; 0xce0 <__vector_16+0x116>
    return;
  muxdiv = 0;
     c08:	10 92 50 02 	sts	0x0250, r1
     c0c:	10 92 4f 02 	sts	0x024F, r1
  // now at 100Hz * digits

  // ok its not really 1ms but its like within 10% :)
  milliseconds++;
     c10:	80 91 55 02 	lds	r24, 0x0255
     c14:	90 91 56 02 	lds	r25, 0x0256
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	90 93 56 02 	sts	0x0256, r25
     c1e:	80 93 55 02 	sts	0x0255, r24

  // Cycle through each digit in the display
  if (currdigit >= DISPLAYSIZE)
     c22:	80 91 4e 02 	lds	r24, 0x024E
     c26:	89 30       	cpi	r24, 0x09	; 9
     c28:	10 f0       	brcs	.+4      	; 0xc2e <__vector_16+0x64>
    currdigit = 0;
     c2a:	10 92 4e 02 	sts	0x024E, r1

  // Set the current display's segments
  setdisplay(currdigit, display[currdigit]);
     c2e:	80 91 4e 02 	lds	r24, 0x024E
     c32:	e8 2f       	mov	r30, r24
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	eb 51       	subi	r30, 0x1B	; 27
     c38:	fd 4f       	sbci	r31, 0xFD	; 253
     c3a:	60 81       	ld	r22, Z
     c3c:	0e 94 89 05 	call	0xb12	; 0xb12 <setdisplay>
  // and go to the next
  currdigit++;
     c40:	80 91 4e 02 	lds	r24, 0x024E
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	80 93 4e 02 	sts	0x024E, r24

  // check if we should have the alarm on
  if (alarming && !snoozetimer) {
     c4a:	80 91 f2 02 	lds	r24, 0x02F2
     c4e:	88 23       	and	r24, r24
     c50:	09 f4       	brne	.+2      	; 0xc54 <__vector_16+0x8a>
     c52:	46 c0       	rjmp	.+140    	; 0xce0 <__vector_16+0x116>
     c54:	80 91 53 02 	lds	r24, 0x0253
     c58:	90 91 54 02 	lds	r25, 0x0254
     c5c:	89 2b       	or	r24, r25
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__vector_16+0x98>
     c60:	3f c0       	rjmp	.+126    	; 0xce0 <__vector_16+0x116>
    alarmdiv++;
     c62:	80 91 51 02 	lds	r24, 0x0251
     c66:	90 91 52 02 	lds	r25, 0x0252
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	90 93 52 02 	sts	0x0252, r25
     c70:	80 93 51 02 	sts	0x0251, r24
    if (alarmdiv > ALARM_DIVIDER) {
     c74:	85 36       	cpi	r24, 0x65	; 101
     c76:	91 05       	cpc	r25, r1
     c78:	98 f1       	brcs	.+102    	; 0xce0 <__vector_16+0x116>
      alarmdiv = 0;
     c7a:	10 92 52 02 	sts	0x0252, r1
     c7e:	10 92 51 02 	sts	0x0251, r1
      return;
    }
    // This part only gets reached at 1Hz

    // This sets the buzzer frequency
    ICR1 = 250;
     c82:	8a ef       	ldi	r24, 0xFA	; 250
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 87 00 	sts	0x0087, r25
     c8a:	80 93 86 00 	sts	0x0086, r24
    OCR1A = OCR1B = ICR1/2;
     c8e:	80 91 86 00 	lds	r24, 0x0086
     c92:	90 91 87 00 	lds	r25, 0x0087
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	90 93 8b 00 	sts	0x008B, r25
     c9e:	80 93 8a 00 	sts	0x008A, r24
     ca2:	80 91 8a 00 	lds	r24, 0x008A
     ca6:	90 91 8b 00 	lds	r25, 0x008B
     caa:	90 93 89 00 	sts	0x0089, r25
     cae:	80 93 88 00 	sts	0x0088, r24

    // ok alarm is ringing!
    if (alarming & 0xF0) { // top bit indicates pulsing alarm state
     cb2:	80 91 f2 02 	lds	r24, 0x02F2
     cb6:	80 7f       	andi	r24, 0xF0	; 240
     cb8:	49 f0       	breq	.+18     	; 0xccc <__vector_16+0x102>
      alarming &= ~0xF0;
     cba:	80 91 f2 02 	lds	r24, 0x02F2
     cbe:	8f 70       	andi	r24, 0x0F	; 15
     cc0:	80 93 f2 02 	sts	0x02F2, r24
      TCCR1B &= ~_BV(CS11); // turn buzzer off!
     cc4:	80 91 81 00 	lds	r24, 0x0081
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <__vector_16+0x112>
    } else {
      alarming |= 0xF0;
     ccc:	80 91 f2 02 	lds	r24, 0x02F2
     cd0:	80 6f       	ori	r24, 0xF0	; 240
     cd2:	80 93 f2 02 	sts	0x02F2, r24
      TCCR1B |= _BV(CS11); // turn buzzer on!
     cd6:	80 91 81 00 	lds	r24, 0x0081
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	80 93 81 00 	sts	0x0081, r24
    }
  }
  
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <spi_xfer>:
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) {

  SPDR = c;
     d02:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & _BV(SPIF)));
     d04:	0d b4       	in	r0, 0x2d	; 45
     d06:	07 fe       	sbrs	r0, 7
     d08:	fd cf       	rjmp	.-6      	; 0xd04 <spi_xfer+0x2>
}
     d0a:	08 95       	ret

00000d0c <gpsdataready>:
//GPS serial data handling functions:

//Check to see if there is any serial data.
uint8_t gpsdataready(void) {

  return (UCSR0A & _BV(RXC0));
     d0c:	80 91 c0 00 	lds	r24, 0x00C0

}
     d10:	80 78       	andi	r24, 0x80	; 128
     d12:	08 95       	ret

00000d14 <setgpstime>:
  }

}

//Set the time with a string taken from GPS data:
void setgpstime(char* str) {
     d14:	fc 01       	movw	r30, r24

  intTempHr = (str[0] - '0') * 10;
  intTempHr = intTempHr + (str[1] - '0');

  intTempMin = (str[2] - '0') * 10;
  intTempMin = intTempMin + (str[3] - '0');
     d16:	53 81       	ldd	r21, Z+3	; 0x03
     d18:	50 51       	subi	r21, 0x10	; 16
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	4a e0       	ldi	r20, 0x0A	; 10
     d1e:	84 9f       	mul	r24, r20
     d20:	c0 01       	movw	r24, r0
     d22:	11 24       	eor	r1, r1
     d24:	58 0f       	add	r21, r24

  intTempSec = (str[4] - '0') * 10;
     d26:	74 81       	ldd	r23, Z+4	; 0x04
  intTempSec = intTempSec + (str[5] - '0');
     d28:	65 81       	ldd	r22, Z+5	; 0x05

  time_h = intTempHr + intTimeZoneHour;
     d2a:	30 91 44 02 	lds	r19, 0x0244
     d2e:	23 2f       	mov	r18, r19
     d30:	20 51       	subi	r18, 0x10	; 16
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	28 0f       	add	r18, r24
     d36:	80 81       	ld	r24, Z
     d38:	84 9f       	mul	r24, r20
     d3a:	c0 01       	movw	r24, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	28 0f       	add	r18, r24
     d40:	20 93 60 02 	sts	0x0260, r18
     d44:	80 91 4d 02 	lds	r24, 0x024D

  //If the time zone offset is negative, then subtract minutes
  if ( 0 > intTimeZoneHour )
     d48:	37 ff       	sbrs	r19, 7
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <setgpstime+0x3c>
    time_m = intTempMin - intTimeZoneMin;
     d4c:	58 1b       	sub	r21, r24
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <setgpstime+0x3e>
  else
    time_m = intTempMin + intTimeZoneMin;
     d50:	58 0f       	add	r21, r24
     d52:	50 93 ee 02 	sts	0x02EE, r21

  time_s = intTempSec;
     d56:	60 51       	subi	r22, 0x10	; 16
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	78 9f       	mul	r23, r24
     d5c:	c0 01       	movw	r24, r0
     d5e:	11 24       	eor	r1, r1
     d60:	68 0f       	add	r22, r24
     d62:	60 93 f5 02 	sts	0x02F5, r22

}
     d66:	08 95       	ret

00000d68 <setgpsdate>:

//Set the date with a string taken from GPS data:
void setgpsdate(char* str) {
     d68:	fc 01       	movw	r30, r24
  uint8_t intTempDay = 0;
  uint8_t intTempMon = 0;
  uint8_t intTempYr = 0;

  intTempDay = (str[0] - '0') * 10;
  intTempDay = intTempDay + (str[1] - '0');
     d6a:	51 81       	ldd	r21, Z+1	; 0x01
     d6c:	50 51       	subi	r21, 0x10	; 16
     d6e:	80 81       	ld	r24, Z
     d70:	4a e0       	ldi	r20, 0x0A	; 10
     d72:	84 9f       	mul	r24, r20
     d74:	c0 01       	movw	r24, r0
     d76:	11 24       	eor	r1, r1
     d78:	58 0f       	add	r21, r24

  intTempMon = (str[2] - '0') * 10;
  intTempMon = intTempMon + (str[3] - '0');
     d7a:	33 81       	ldd	r19, Z+3	; 0x03
     d7c:	30 51       	subi	r19, 0x10	; 16
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	84 9f       	mul	r24, r20
     d82:	c0 01       	movw	r24, r0
     d84:	11 24       	eor	r1, r1
     d86:	38 0f       	add	r19, r24

  intTempYr = (str[4] - '0') * 10;
  intTempYr = intTempYr + (str[5] - '0');
     d88:	25 81       	ldd	r18, Z+5	; 0x05
     d8a:	20 51       	subi	r18, 0x10	; 16
     d8c:	84 81       	ldd	r24, Z+4	; 0x04
     d8e:	84 9f       	mul	r24, r20
     d90:	c0 01       	movw	r24, r0
     d92:	11 24       	eor	r1, r1
     d94:	28 0f       	add	r18, r24

  timeunknown = 0;
     d96:	10 92 4a 02 	sts	0x024A, r1
  restored = 0;
     d9a:	10 92 4b 02 	sts	0x024B, r1

  date_d = intTempDay;
     d9e:	50 93 e4 02 	sts	0x02E4, r21
  date_m = intTempMon;
     da2:	30 93 f4 02 	sts	0x02F4, r19
  date_y = intTempYr;
     da6:	20 93 e1 02 	sts	0x02E1, r18

}
     daa:	08 95       	ret

00000dac <fix_time>:

//Fixes the time variables whenever time is changed
void fix_time(void) {

  // a minute!
  if (time_s >= 60) {
     dac:	80 91 f5 02 	lds	r24, 0x02F5
     db0:	8c 33       	cpi	r24, 0x3C	; 60
     db2:	54 f0       	brlt	.+20     	; 0xdc8 <fix_time+0x1c>
    time_s = time_s - 60;
     db4:	80 91 f5 02 	lds	r24, 0x02F5
     db8:	8c 53       	subi	r24, 0x3C	; 60
     dba:	80 93 f5 02 	sts	0x02F5, r24
    time_m++;
     dbe:	80 91 ee 02 	lds	r24, 0x02EE
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	80 93 ee 02 	sts	0x02EE, r24
  }
  // If someone decides to make offset seconds with a negative number...
  if (time_s < 0) {
     dc8:	80 91 f5 02 	lds	r24, 0x02F5
     dcc:	87 ff       	sbrs	r24, 7
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <fix_time+0x38>
    time_s =  60 + time_s;
     dd0:	80 91 f5 02 	lds	r24, 0x02F5
     dd4:	84 5c       	subi	r24, 0xC4	; 196
     dd6:	80 93 f5 02 	sts	0x02F5, r24
    time_m--;
     dda:	80 91 ee 02 	lds	r24, 0x02EE
     dde:	81 50       	subi	r24, 0x01	; 1
     de0:	80 93 ee 02 	sts	0x02EE, r24
  }

  // an hour...
  if (time_m >= 60) {
     de4:	80 91 ee 02 	lds	r24, 0x02EE
     de8:	8c 33       	cpi	r24, 0x3C	; 60
     dea:	b4 f0       	brlt	.+44     	; 0xe18 <fix_time+0x6c>
    time_m = time_m - 60;
     dec:	80 91 ee 02 	lds	r24, 0x02EE
     df0:	8c 53       	subi	r24, 0x3C	; 60
     df2:	80 93 ee 02 	sts	0x02EE, r24
    time_h++; 
     df6:	80 91 60 02 	lds	r24, 0x0260
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	80 93 60 02 	sts	0x0260, r24
    // let's write the time to the EEPROM
    eeprom_write_byte((uint8_t *)EE_HOUR, time_h);
     e00:	60 91 60 02 	lds	r22, 0x0260
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    eeprom_write_byte((uint8_t *)EE_MIN, time_m);
     e0c:	60 91 ee 02 	lds	r22, 0x02EE
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }
  // When offsets create negative minutes...
  if (time_m < 0) {
     e18:	80 91 ee 02 	lds	r24, 0x02EE
     e1c:	87 ff       	sbrs	r24, 7
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <fix_time+0xa0>
    time_m = 60 + time_m;
     e20:	80 91 ee 02 	lds	r24, 0x02EE
     e24:	84 5c       	subi	r24, 0xC4	; 196
     e26:	80 93 ee 02 	sts	0x02EE, r24
    time_h--; 
     e2a:	80 91 60 02 	lds	r24, 0x0260
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	80 93 60 02 	sts	0x0260, r24
    eeprom_write_byte((uint8_t *)EE_HOUR, time_h);
     e34:	60 91 60 02 	lds	r22, 0x0260
     e38:	84 e0       	ldi	r24, 0x04	; 4
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    eeprom_write_byte((uint8_t *)EE_MIN, time_m);
     e40:	60 91 ee 02 	lds	r22, 0x02EE
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }

  // a day....
  if (time_h >= 24) {
     e4c:	80 91 60 02 	lds	r24, 0x0260
     e50:	88 31       	cpi	r24, 0x18	; 24
     e52:	84 f0       	brlt	.+32     	; 0xe74 <fix_time+0xc8>
    time_h = time_h - 24;
     e54:	80 91 60 02 	lds	r24, 0x0260
     e58:	88 51       	subi	r24, 0x18	; 24
     e5a:	80 93 60 02 	sts	0x0260, r24
    date_d++;
     e5e:	80 91 e4 02 	lds	r24, 0x02E4
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 e4 02 	sts	0x02E4, r24
    eeprom_write_byte((uint8_t *)EE_DAY, date_d);
     e68:	60 91 e4 02 	lds	r22, 0x02E4
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }
  // When offsets create negative hours...
  if (time_h < 0) {
     e74:	80 91 60 02 	lds	r24, 0x0260
     e78:	87 ff       	sbrs	r24, 7
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <fix_time+0xf0>
    time_h = 24 + time_h;
     e7c:	80 91 60 02 	lds	r24, 0x0260
     e80:	88 5e       	subi	r24, 0xE8	; 232
     e82:	80 93 60 02 	sts	0x0260, r24
    date_d--;
     e86:	80 91 e4 02 	lds	r24, 0x02E4
     e8a:	81 50       	subi	r24, 0x01	; 1
     e8c:	80 93 e4 02 	sts	0x02E4, r24
    eeprom_write_byte((uint8_t *)EE_DAY, date_d);
     e90:	60 91 e4 02 	lds	r22, 0x02E4
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  //}
  

  // a full month!
  // we check the leapyear and date to verify when it's time to roll over months
  if ((date_d > 31) ||
     e9c:	80 91 e4 02 	lds	r24, 0x02E4
     ea0:	80 32       	cpi	r24, 0x20	; 32
     ea2:	7c f5       	brge	.+94     	; 0xf02 <fix_time+0x156>
     ea4:	80 91 e4 02 	lds	r24, 0x02E4
     ea8:	8f 31       	cpi	r24, 0x1F	; 31
     eaa:	81 f4       	brne	.+32     	; 0xecc <fix_time+0x120>
     eac:	80 91 f4 02 	lds	r24, 0x02F4
     eb0:	84 30       	cpi	r24, 0x04	; 4
     eb2:	39 f1       	breq	.+78     	; 0xf02 <fix_time+0x156>
     eb4:	80 91 f4 02 	lds	r24, 0x02F4
     eb8:	86 30       	cpi	r24, 0x06	; 6
     eba:	19 f1       	breq	.+70     	; 0xf02 <fix_time+0x156>
     ebc:	80 91 f4 02 	lds	r24, 0x02F4
     ec0:	89 30       	cpi	r24, 0x09	; 9
     ec2:	f9 f0       	breq	.+62     	; 0xf02 <fix_time+0x156>
     ec4:	80 91 f4 02 	lds	r24, 0x02F4
     ec8:	8b 30       	cpi	r24, 0x0B	; 11
     eca:	d9 f0       	breq	.+54     	; 0xf02 <fix_time+0x156>
     ecc:	80 91 e4 02 	lds	r24, 0x02E4
     ed0:	8e 31       	cpi	r24, 0x1E	; 30
     ed2:	21 f4       	brne	.+8      	; 0xedc <fix_time+0x130>
     ed4:	80 91 f4 02 	lds	r24, 0x02F4
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	99 f0       	breq	.+38     	; 0xf02 <fix_time+0x156>
     edc:	80 91 e4 02 	lds	r24, 0x02E4
     ee0:	8d 31       	cpi	r24, 0x1D	; 29
     ee2:	e9 f4       	brne	.+58     	; 0xf1e <fix_time+0x172>
     ee4:	80 91 f4 02 	lds	r24, 0x02F4
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	c9 f4       	brne	.+50     	; 0xf1e <fix_time+0x172>
     eec:	80 91 e1 02 	lds	r24, 0x02E1
     ef0:	99 27       	eor	r25, r25
     ef2:	87 fd       	sbrc	r24, 7
     ef4:	90 95       	com	r25
     ef6:	80 53       	subi	r24, 0x30	; 48
     ef8:	98 4f       	sbci	r25, 0xF8	; 248
     efa:	0e 94 1a 01 	call	0x234	; 0x234 <leapyear>
     efe:	88 23       	and	r24, r24
     f00:	71 f4       	brne	.+28     	; 0xf1e <fix_time+0x172>
      ((date_d == 31) && ((date_m == 4)||(date_m == 6)||(date_m == 9)||(date_m == 11))) ||
      ((date_d == 30) && (date_m == 2)) ||
      ((date_d == 29) && (date_m == 2) && !leapyear(2000+date_y))) {
    date_d = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 e4 02 	sts	0x02E4, r24
    date_m++;
     f08:	80 91 f4 02 	lds	r24, 0x02F4
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	80 93 f4 02 	sts	0x02F4, r24
    eeprom_write_byte((uint8_t *)EE_MONTH, date_m);
     f12:	60 91 f4 02 	lds	r22, 0x02F4
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }
  // When offsets create negative days...
  if (date_d < 1) {
     f1e:	80 91 e4 02 	lds	r24, 0x02E4
     f22:	18 16       	cp	r1, r24
     f24:	0c f4       	brge	.+2      	; 0xf28 <fix_time+0x17c>
     f26:	49 c0       	rjmp	.+146    	; 0xfba <fix_time+0x20e>
    //Find which month we are going back to:
    switch (date_m) {
     f28:	80 91 f4 02 	lds	r24, 0x02F4
     f2c:	86 30       	cpi	r24, 0x06	; 6
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <fix_time+0x1b8>
     f30:	87 30       	cpi	r24, 0x07	; 7
     f32:	64 f4       	brge	.+24     	; 0xf4c <fix_time+0x1a0>
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	29 f1       	breq	.+74     	; 0xf82 <fix_time+0x1d6>
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	1c f4       	brge	.+6      	; 0xf42 <fix_time+0x196>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	94 f4       	brge	.+36     	; 0xf64 <fix_time+0x1b8>
     f40:	33 c0       	rjmp	.+102    	; 0xfa8 <fix_time+0x1fc>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	79 f0       	breq	.+30     	; 0xf64 <fix_time+0x1b8>
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	79 f5       	brne	.+94     	; 0xfa8 <fix_time+0x1fc>
     f4a:	10 c0       	rjmp	.+32     	; 0xf6c <fix_time+0x1c0>
     f4c:	8a 30       	cpi	r24, 0x0A	; 10
     f4e:	1c f4       	brge	.+6      	; 0xf56 <fix_time+0x1aa>
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	44 f4       	brge	.+16     	; 0xf64 <fix_time+0x1b8>
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <fix_time+0x1c0>
     f56:	8b 30       	cpi	r24, 0x0B	; 11
     f58:	29 f0       	breq	.+10     	; 0xf64 <fix_time+0x1b8>
     f5a:	8b 30       	cpi	r24, 0x0B	; 11
     f5c:	3c f0       	brlt	.+14     	; 0xf6c <fix_time+0x1c0>
     f5e:	8c 30       	cpi	r24, 0x0C	; 12
     f60:	19 f5       	brne	.+70     	; 0xfa8 <fix_time+0x1fc>
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <fix_time+0x1c0>
      case 4: //April -> March
      case 6: //June -> May
      case 8: //August -> July
      case 9: //September -> August
      case 11: //November -> October
        date_d = 31 + date_d;
     f64:	80 91 e4 02 	lds	r24, 0x02E4
     f68:	81 5e       	subi	r24, 0xE1	; 225
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <fix_time+0x1c6>

      case 5: //May -> April
      case 7: //July -> June
      case 10: //October -> September
      case 12: //December -> November
        date_d = 30 + date_d;
     f6c:	80 91 e4 02 	lds	r24, 0x02E4
     f70:	82 5e       	subi	r24, 0xE2	; 226
     f72:	80 93 e4 02 	sts	0x02E4, r24
        date_m--;
     f76:	80 91 f4 02 	lds	r24, 0x02F4
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	80 93 f4 02 	sts	0x02F4, r24
     f80:	16 c0       	rjmp	.+44     	; 0xfae <fix_time+0x202>
        break;

      case 3: //March -> February, the fun case
        //If we are in a leapyear, February is 29 days long...
        if ( leapyear(2000+date_y) )
     f82:	80 91 e1 02 	lds	r24, 0x02E1
     f86:	99 27       	eor	r25, r25
     f88:	87 fd       	sbrc	r24, 7
     f8a:	90 95       	com	r25
     f8c:	80 53       	subi	r24, 0x30	; 48
     f8e:	98 4f       	sbci	r25, 0xF8	; 248
     f90:	0e 94 1a 01 	call	0x234	; 0x234 <leapyear>
     f94:	88 23       	and	r24, r24
     f96:	21 f0       	breq	.+8      	; 0xfa0 <fix_time+0x1f4>
          date_d = 29 + date_d;
     f98:	80 91 e4 02 	lds	r24, 0x02E4
     f9c:	83 5e       	subi	r24, 0xE3	; 227
     f9e:	e9 cf       	rjmp	.-46     	; 0xf72 <fix_time+0x1c6>
        else //otherwise, it is 28 days long...
          date_d = 28 + date_d;
     fa0:	80 91 e4 02 	lds	r24, 0x02E4
     fa4:	84 5e       	subi	r24, 0xE4	; 228
     fa6:	e5 cf       	rjmp	.-54     	; 0xf72 <fix_time+0x1c6>
        date_m--;
        break;
      default:
        date_d = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 e4 02 	sts	0x02E4, r24
        break;
    }

    eeprom_write_byte((uint8_t *)EE_MONTH, date_m);
     fae:	60 91 f4 02 	lds	r22, 0x02F4
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }
  
  // HAPPY NEW YEAR!
  if (date_m >= 13) {
     fba:	80 91 f4 02 	lds	r24, 0x02F4
     fbe:	8d 30       	cpi	r24, 0x0D	; 13
     fc0:	74 f0       	brlt	.+28     	; 0xfde <fix_time+0x232>
    date_y++;
     fc2:	80 91 e1 02 	lds	r24, 0x02E1
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 e1 02 	sts	0x02E1, r24
    date_m = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 f4 02 	sts	0x02F4, r24
    eeprom_write_byte((uint8_t *)EE_YEAR, date_y);
     fd2:	60 91 e1 02 	lds	r22, 0x02E1
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
  }
  //This takes away the years and is cheaper than any cream you can buy...
  if (date_m < 1) {
     fde:	80 91 f4 02 	lds	r24, 0x02F4
     fe2:	18 16       	cp	r1, r24
     fe4:	b4 f0       	brlt	.+44     	; 0x1012 <fix_time+0x266>
    date_m = 12 + date_m;
     fe6:	80 91 f4 02 	lds	r24, 0x02F4
     fea:	84 5f       	subi	r24, 0xF4	; 244
     fec:	80 93 f4 02 	sts	0x02F4, r24
    date_y--;
     ff0:	80 91 e1 02 	lds	r24, 0x02E1
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	80 93 e1 02 	sts	0x02E1, r24
    eeprom_write_byte((uint8_t *)EE_MONTH, date_m);
     ffa:	60 91 f4 02 	lds	r22, 0x02F4
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    eeprom_write_byte((uint8_t *)EE_YEAR, date_y);
    1006:	60 91 e1 02 	lds	r22, 0x02E1
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    1012:	08 95       	ret

00001014 <set_brightness>:
	delayms(75);
    }
  }
}

void set_brightness(void) {
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	80 93 5b 02 	sts	0x025B, r24
    1020:	10 e0       	ldi	r17, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1022:	3a e0       	ldi	r19, 0x0A	; 10
    1024:	f3 2e       	mov	r15, r19
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;
      if (mode == SET_BRITE) {
        // Increment brightness level. Zero means auto-dim.
	if (brightness_level == 0) {
	  brightness_level = BRIGHTNESS_MIN;
    1026:	0e e1       	ldi	r16, 0x1E	; 30
    1028:	01 c0       	rjmp	.+2      	; 0x102c <set_brightness+0x18>
}

void set_brightness(void) {
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    102a:	10 e0       	ldi	r17, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
    102c:	80 91 58 02 	lds	r24, 0x0258
    1030:	88 23       	and	r24, r24
    1032:	21 f4       	brne	.+8      	; 0x103c <set_brightness+0x28>
    1034:	80 91 59 02 	lds	r24, 0x0259
    1038:	88 23       	and	r24, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <set_brightness+0x2e>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    103c:	f0 92 5b 02 	sts	0x025B, r15
    1040:	04 c0       	rjmp	.+8      	; 0x104a <set_brightness+0x36>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1042:	80 91 5b 02 	lds	r24, 0x025B
    1046:	88 23       	and	r24, r24
    1048:	b9 f0       	breq	.+46     	; 0x1078 <set_brightness+0x64>
      //timed out!
      displaymode = SHOW_TIME;     
      eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness_level);
      return;
    }
    if (just_pressed & 0x1) { // mode change
    104a:	80 91 58 02 	lds	r24, 0x0258
    104e:	80 fd       	sbrc	r24, 0
    1050:	40 c0       	rjmp	.+128    	; 0x10d2 <set_brightness+0xbe>
      return;
    }
    if (just_pressed & 0x2) {
    1052:	80 91 58 02 	lds	r24, 0x0258
    1056:	81 ff       	sbrs	r24, 1
    1058:	18 c0       	rjmp	.+48     	; 0x108a <set_brightness+0x76>

      just_pressed = 0;
    105a:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    105e:	11 23       	and	r17, r17
    1060:	59 f4       	brne	.+22     	; 0x1078 <set_brightness+0x64>
	// start!
	mode = SET_BRITE;
	// display brightness
	display_str("brite ");
    1062:	87 e7       	ldi	r24, 0x77	; 119
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	display_brightness(brightness_level);
    106a:	80 91 f1 02 	lds	r24, 0x02F1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 37 02 	call	0x46e	; 0x46e <display_brightness>
    1074:	11 e0       	ldi	r17, 0x01	; 1
    1076:	09 c0       	rjmp	.+18     	; 0x108a <set_brightness+0x76>
      } else {	
	displaymode = SHOW_TIME;
    1078:	10 92 f3 02 	sts	0x02F3, r1
	eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness_level);
    107c:	60 91 f1 02 	lds	r22, 0x02F1
    1080:	89 e0       	ldi	r24, 0x09	; 9
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    1088:	24 c0       	rjmp	.+72     	; 0x10d2 <set_brightness+0xbe>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    108a:	80 91 58 02 	lds	r24, 0x0258
    108e:	82 fd       	sbrc	r24, 2
    1090:	04 c0       	rjmp	.+8      	; 0x109a <set_brightness+0x86>
    1092:	80 91 59 02 	lds	r24, 0x0259
    1096:	82 ff       	sbrs	r24, 2
    1098:	c9 cf       	rjmp	.-110    	; 0x102c <set_brightness+0x18>
      just_pressed = 0;
    109a:	10 92 58 02 	sts	0x0258, r1
      if (mode == SET_BRITE) {
    109e:	11 30       	cpi	r17, 0x01	; 1
    10a0:	21 f6       	brne	.-120    	; 0x102a <set_brightness+0x16>
        // Increment brightness level. Zero means auto-dim.
	if (brightness_level == 0) {
    10a2:	80 91 f1 02 	lds	r24, 0x02F1
    10a6:	88 23       	and	r24, r24
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <set_brightness+0x9c>
	  brightness_level = BRIGHTNESS_MIN;
    10aa:	00 93 f1 02 	sts	0x02F1, r16
    10ae:	0b c0       	rjmp	.+22     	; 0x10c6 <set_brightness+0xb2>
	} else {
	  brightness_level += BRIGHTNESS_INCREMENT;
    10b0:	80 91 f1 02 	lds	r24, 0x02F1
    10b4:	8b 5f       	subi	r24, 0xFB	; 251
    10b6:	80 93 f1 02 	sts	0x02F1, r24
	  if (brightness_level > BRIGHTNESS_MAX) {
    10ba:	80 91 f1 02 	lds	r24, 0x02F1
    10be:	8b 35       	cpi	r24, 0x5B	; 91
    10c0:	10 f0       	brcs	.+4      	; 0x10c6 <set_brightness+0xb2>
#ifdef FEATURE_AUTODIM
	    brightness_level = 0;
    10c2:	10 92 f1 02 	sts	0x02F1, r1
#else
	    brightness_level = BRIGHTNESS_MIN;
#endif
	  }
	}
	display_brightness(brightness_level);
    10c6:	80 91 f1 02 	lds	r24, 0x02F1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 37 02 	call	0x46e	; 0x46e <display_brightness>
    10d0:	ad cf       	rjmp	.-166    	; 0x102c <set_brightness+0x18>
      }
    }
  }
}
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	08 95       	ret

000010da <set_time>:
    }
  }
}

void set_time(void) 
{
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
  uint8_t mode;
  uint8_t hour, min, sec;
    
  hour = time_h;
    10e4:	e0 90 60 02 	lds	r14, 0x0260
  min = time_m;
    10e8:	f0 90 ee 02 	lds	r15, 0x02EE
  sec = time_s;
    10ec:	00 91 f5 02 	lds	r16, 0x02F5
  mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	80 93 5b 02 	sts	0x025B, r24
    10f6:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    if (just_pressed & 0x1) { // mode change
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
    10f8:	4a e0       	ldi	r20, 0x0A	; 10
    10fa:	d4 2e       	mov	r13, r20
  mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;
  
  while (1) {
    if (just_pressed & 0x1) { // mode change
    10fc:	80 91 58 02 	lds	r24, 0x0258
    1100:	80 fd       	sbrc	r24, 0
    1102:	d7 c0       	rjmp	.+430    	; 0x12b2 <set_time+0x1d8>
      return;
    }
    if (just_pressed || pressed) {
    1104:	80 91 58 02 	lds	r24, 0x0258
    1108:	88 23       	and	r24, r24
    110a:	21 f4       	brne	.+8      	; 0x1114 <set_time+0x3a>
    110c:	80 91 59 02 	lds	r24, 0x0259
    1110:	88 23       	and	r24, r24
    1112:	19 f0       	breq	.+6      	; 0x111a <set_time+0x40>
      timeoutcounter = INACTIVITYTIMEOUT;  
    1114:	d0 92 5b 02 	sts	0x025B, r13
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <set_time+0x4a>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    111a:	80 91 5b 02 	lds	r24, 0x025B
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <set_time+0x4a>
    1122:	4b c0       	rjmp	.+150    	; 0x11ba <set_time+0xe0>
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x2) {
    1124:	80 91 58 02 	lds	r24, 0x0258
    1128:	81 ff       	sbrs	r24, 1
    112a:	4a c0       	rjmp	.+148    	; 0x11c0 <set_time+0xe6>
      just_pressed = 0;
    112c:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    1130:	11 23       	and	r17, r17
    1132:	b9 f4       	brne	.+46     	; 0x1162 <set_time+0x88>
	hour = time_h;
    1134:	e0 90 60 02 	lds	r14, 0x0260
	min = time_m;
    1138:	f0 90 ee 02 	lds	r15, 0x02EE
	sec = time_s;
    113c:	00 91 f5 02 	lds	r16, 0x02F5

	// ok now its selected
	mode = SET_HOUR;
	display_time(hour, min, sec);
    1140:	8e 2d       	mov	r24, r14
    1142:	6f 2d       	mov	r22, r15
    1144:	40 2f       	mov	r20, r16
    1146:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[1] |= 0x1;
    114a:	80 91 e6 02 	lds	r24, 0x02E6
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;	
    1154:	80 91 e7 02 	lds	r24, 0x02E7
    1158:	81 60       	ori	r24, 0x01	; 1
    115a:	80 93 e7 02 	sts	0x02E7, r24
    115e:	11 e0       	ldi	r17, 0x01	; 1
    1160:	2f c0       	rjmp	.+94     	; 0x11c0 <set_time+0xe6>
      } else if (mode == SET_HOUR) {
    1162:	11 30       	cpi	r17, 0x01	; 1
    1164:	89 f4       	brne	.+34     	; 0x1188 <set_time+0xae>
	mode = SET_MIN;
	display_time(hour, min, sec);
    1166:	8e 2d       	mov	r24, r14
    1168:	6f 2d       	mov	r22, r15
    116a:	40 2f       	mov	r20, r16
    116c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[4] |= 0x1;
    1170:	80 91 e9 02 	lds	r24, 0x02E9
    1174:	81 60       	ori	r24, 0x01	; 1
    1176:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    117a:	80 91 ea 02 	lds	r24, 0x02EA
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	80 93 ea 02 	sts	0x02EA, r24
    1184:	12 e0       	ldi	r17, 0x02	; 2
    1186:	1c c0       	rjmp	.+56     	; 0x11c0 <set_time+0xe6>
      } else if (mode == SET_MIN) {
    1188:	12 30       	cpi	r17, 0x02	; 2
    118a:	89 f4       	brne	.+34     	; 0x11ae <set_time+0xd4>
	mode = SET_SEC;
	display_time(hour, min, sec);
    118c:	8e 2d       	mov	r24, r14
    118e:	6f 2d       	mov	r22, r15
    1190:	40 2f       	mov	r20, r16
    1192:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[7] |= 0x1;
    1196:	80 91 ec 02 	lds	r24, 0x02EC
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    11a0:	80 91 ed 02 	lds	r24, 0x02ED
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	80 93 ed 02 	sts	0x02ED, r24
    11aa:	13 e0       	ldi	r17, 0x03	; 3
    11ac:	09 c0       	rjmp	.+18     	; 0x11c0 <set_time+0xe6>
      } else {
	// done!
	time_h = hour;
    11ae:	e0 92 60 02 	sts	0x0260, r14
	time_m = min;
    11b2:	f0 92 ee 02 	sts	0x02EE, r15
	time_s = sec;
    11b6:	00 93 f5 02 	sts	0x02F5, r16
	displaymode = SHOW_TIME;
    11ba:	10 92 f3 02 	sts	0x02F3, r1
    11be:	79 c0       	rjmp	.+242    	; 0x12b2 <set_time+0x1d8>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    11c0:	80 91 58 02 	lds	r24, 0x0258
    11c4:	82 fd       	sbrc	r24, 2
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <set_time+0xf6>
    11c8:	80 91 59 02 	lds	r24, 0x0259
    11cc:	82 ff       	sbrs	r24, 2
    11ce:	96 cf       	rjmp	.-212    	; 0x10fc <set_time+0x22>
      just_pressed = 0;
    11d0:	10 92 58 02 	sts	0x0258, r1
      
      if (mode == SET_HOUR) {
    11d4:	11 30       	cpi	r17, 0x01	; 1
    11d6:	f9 f4       	brne	.+62     	; 0x1216 <set_time+0x13c>
	hour = (hour+1) % 24;
    11d8:	8e 2d       	mov	r24, r14
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	68 e1       	ldi	r22, 0x18	; 24
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    11e6:	e8 2e       	mov	r14, r24
	display_time(hour, min, sec);
    11e8:	6f 2d       	mov	r22, r15
    11ea:	40 2f       	mov	r20, r16
    11ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[1] |= 0x1;
    11f0:	80 91 e6 02 	lds	r24, 0x02E6
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;
    11fa:	80 91 e7 02 	lds	r24, 0x02E7
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 93 e7 02 	sts	0x02E7, r24
	time_h = hour;
    1204:	e0 92 60 02 	sts	0x0260, r14
	eeprom_write_byte((uint8_t *)EE_HOUR, time_h);    
    1208:	60 91 60 02 	lds	r22, 0x0260
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    1214:	3d c0       	rjmp	.+122    	; 0x1290 <set_time+0x1b6>
      }
      if (mode == SET_MIN) {
    1216:	12 30       	cpi	r17, 0x02	; 2
    1218:	01 f5       	brne	.+64     	; 0x125a <set_time+0x180>
	min = (min+1) % 60;
    121a:	8f 2d       	mov	r24, r15
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	6c e3       	ldi	r22, 0x3C	; 60
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    1228:	f8 2e       	mov	r15, r24
	display_time(hour, min, sec);
    122a:	8e 2d       	mov	r24, r14
    122c:	6f 2d       	mov	r22, r15
    122e:	40 2f       	mov	r20, r16
    1230:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[4] |= 0x1;
    1234:	80 91 e9 02 	lds	r24, 0x02E9
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    123e:	80 91 ea 02 	lds	r24, 0x02EA
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	80 93 ea 02 	sts	0x02EA, r24
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
    1248:	60 91 ee 02 	lds	r22, 0x02EE
    124c:	85 e0       	ldi	r24, 0x05	; 5
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	time_m = min;
    1254:	f0 92 ee 02 	sts	0x02EE, r15
    1258:	1b c0       	rjmp	.+54     	; 0x1290 <set_time+0x1b6>
      }
      if ((mode == SET_SEC) ) {
    125a:	13 30       	cpi	r17, 0x03	; 3
    125c:	c9 f4       	brne	.+50     	; 0x1290 <set_time+0x1b6>
	sec = (sec+1) % 60;
    125e:	80 2f       	mov	r24, r16
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	6c e3       	ldi	r22, 0x3C	; 60
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    126c:	08 2f       	mov	r16, r24
	display_time(hour, min, sec);
    126e:	8e 2d       	mov	r24, r14
    1270:	6f 2d       	mov	r22, r15
    1272:	40 2f       	mov	r20, r16
    1274:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
	display[7] |= 0x1;
    1278:	80 91 ec 02 	lds	r24, 0x02EC
    127c:	81 60       	ori	r24, 0x01	; 1
    127e:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    1282:	80 91 ed 02 	lds	r24, 0x02ED
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	80 93 ed 02 	sts	0x02ED, r24
	time_s = sec;
    128c:	00 93 f5 02 	sts	0x02F5, r16
      }
      
      if (pressed & 0x4)
    1290:	80 91 59 02 	lds	r24, 0x0259
    1294:	82 ff       	sbrs	r24, 2
    1296:	32 cf       	rjmp	.-412    	; 0x10fc <set_time+0x22>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    1298:	78 94       	sei

  milliseconds = 0;
    129a:	10 92 56 02 	sts	0x0256, r1
    129e:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    12a2:	80 91 55 02 	lds	r24, 0x0255
    12a6:	90 91 56 02 	lds	r25, 0x0256
    12aa:	8b 34       	cpi	r24, 0x4B	; 75
    12ac:	91 05       	cpc	r25, r1
    12ae:	c8 f3       	brcs	.-14     	; 0x12a2 <set_time+0x1c8>
    12b0:	25 cf       	rjmp	.-438    	; 0x10fc <set_time+0x22>
      
      if (pressed & 0x4)
	delayms(75);
    }
  }
}
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	08 95       	ret

000012be <set_alarm>:
}

/**************************** SUB-MENUS *****************************/

void set_alarm(void) 
{
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
  uint8_t hour, min, sec;
    
  hour = min = sec = 0;
  mode = SHOW_MENU;

  hour = alarm_h;
    12c6:	10 91 f0 02 	lds	r17, 0x02F0
  min = alarm_m;
    12ca:	00 91 e2 02 	lds	r16, 0x02E2
  sec = 0;
  
  timeoutcounter = INACTIVITYTIMEOUT;
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	80 93 5b 02 	sts	0x025B, r24
    12d4:	ff 24       	eor	r15, r15
  while (1) {
    if (just_pressed & 0x1) { // mode change
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
    12d6:	6a e0       	ldi	r22, 0x0A	; 10
    12d8:	e6 2e       	mov	r14, r22
  sec = 0;
  
  timeoutcounter = INACTIVITYTIMEOUT;
  
  while (1) {
    if (just_pressed & 0x1) { // mode change
    12da:	80 91 58 02 	lds	r24, 0x0258
    12de:	80 fd       	sbrc	r24, 0
    12e0:	af c0       	rjmp	.+350    	; 0x1440 <set_alarm+0x182>
      return;
    }
    if (just_pressed || pressed) {
    12e2:	80 91 58 02 	lds	r24, 0x0258
    12e6:	88 23       	and	r24, r24
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <set_alarm+0x34>
    12ea:	80 91 59 02 	lds	r24, 0x0259
    12ee:	88 23       	and	r24, r24
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <set_alarm+0x3a>
      timeoutcounter = INACTIVITYTIMEOUT;  
    12f2:	e0 92 5b 02 	sts	0x025B, r14
    12f6:	17 c0       	rjmp	.+46     	; 0x1326 <set_alarm+0x68>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    12f8:	80 91 5b 02 	lds	r24, 0x025B
    12fc:	88 23       	and	r24, r24
    12fe:	99 f4       	brne	.+38     	; 0x1326 <set_alarm+0x68>
      //timed out!
      displaymode = SHOW_TIME;     
    1300:	10 92 f3 02 	sts	0x02F3, r1
      alarm_h = hour;
    1304:	10 93 f0 02 	sts	0x02F0, r17
      alarm_m = min;
    1308:	00 93 e2 02 	sts	0x02E2, r16
      eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);    
    130c:	60 91 f0 02 	lds	r22, 0x02F0
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
      eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);    
    1318:	60 91 e2 02 	lds	r22, 0x02E2
    131c:	88 e0       	ldi	r24, 0x08	; 8
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    1324:	8d c0       	rjmp	.+282    	; 0x1440 <set_alarm+0x182>
      return;
    }
    if (just_pressed & 0x2) {
    1326:	80 91 58 02 	lds	r24, 0x0258
    132a:	81 ff       	sbrs	r24, 1
    132c:	3c c0       	rjmp	.+120    	; 0x13a6 <set_alarm+0xe8>
      just_pressed = 0;
    132e:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    1332:	ff 20       	and	r15, r15
    1334:	89 f4       	brne	.+34     	; 0x1358 <set_alarm+0x9a>
	// ok now its selected
	mode = SET_HOUR;
	display_alarm(hour, min);
    1336:	81 2f       	mov	r24, r17
    1338:	60 2f       	mov	r22, r16
    133a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <display_alarm>
	display[1] |= 0x1;
    133e:	80 91 e6 02 	lds	r24, 0x02E6
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;	
    1348:	80 91 e7 02 	lds	r24, 0x02E7
    134c:	81 60       	ori	r24, 0x01	; 1
    134e:	80 93 e7 02 	sts	0x02E7, r24
    1352:	ff 24       	eor	r15, r15
    1354:	f3 94       	inc	r15
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <set_alarm+0xe8>
      } else if (mode == SET_HOUR) {
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	f8 16       	cp	r15, r24
    135c:	89 f4       	brne	.+34     	; 0x1380 <set_alarm+0xc2>
	mode = SET_MIN;
	display_alarm(hour, min);
    135e:	81 2f       	mov	r24, r17
    1360:	60 2f       	mov	r22, r16
    1362:	0e 94 e6 02 	call	0x5cc	; 0x5cc <display_alarm>
	display[4] |= 0x1;
    1366:	80 91 e9 02 	lds	r24, 0x02E9
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    1370:	80 91 ea 02 	lds	r24, 0x02EA
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 93 ea 02 	sts	0x02EA, r24
    137a:	52 e0       	ldi	r21, 0x02	; 2
    137c:	f5 2e       	mov	r15, r21
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <set_alarm+0xe8>
      } else {
	// done!
	alarm_h = hour;
    1380:	10 93 f0 02 	sts	0x02F0, r17
	alarm_m = min;
    1384:	00 93 e2 02 	sts	0x02E2, r16
	eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);    
    1388:	60 91 f0 02 	lds	r22, 0x02F0
    138c:	87 e0       	ldi	r24, 0x07	; 7
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);    
    1394:	60 91 e2 02 	lds	r22, 0x02E2
    1398:	88 e0       	ldi	r24, 0x08	; 8
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	displaymode = SHOW_TIME;
    13a0:	10 92 f3 02 	sts	0x02F3, r1
    13a4:	4d c0       	rjmp	.+154    	; 0x1440 <set_alarm+0x182>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    13a6:	80 91 58 02 	lds	r24, 0x0258
    13aa:	82 fd       	sbrc	r24, 2
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <set_alarm+0xf8>
    13ae:	80 91 59 02 	lds	r24, 0x0259
    13b2:	82 ff       	sbrs	r24, 2
    13b4:	92 cf       	rjmp	.-220    	; 0x12da <set_alarm+0x1c>
      just_pressed = 0;
    13b6:	10 92 58 02 	sts	0x0258, r1

      if (mode == SET_HOUR) {
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	f8 16       	cp	r15, r24
    13be:	b1 f4       	brne	.+44     	; 0x13ec <set_alarm+0x12e>
	hour = (hour+1) % 24;
    13c0:	81 2f       	mov	r24, r17
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	68 e1       	ldi	r22, 0x18	; 24
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    13ce:	18 2f       	mov	r17, r24
	display_alarm(hour, min);
    13d0:	60 2f       	mov	r22, r16
    13d2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <display_alarm>
	display[1] |= 0x1;
    13d6:	80 91 e6 02 	lds	r24, 0x02E6
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;
    13e0:	80 91 e7 02 	lds	r24, 0x02E7
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 93 e7 02 	sts	0x02E7, r24
    13ea:	19 c0       	rjmp	.+50     	; 0x141e <set_alarm+0x160>
      }
      if (mode == SET_MIN) {
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	f8 16       	cp	r15, r24
    13f0:	b1 f4       	brne	.+44     	; 0x141e <set_alarm+0x160>
	min = (min+1) % 60;
    13f2:	80 2f       	mov	r24, r16
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	6c e3       	ldi	r22, 0x3C	; 60
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    1400:	08 2f       	mov	r16, r24
	display_alarm(hour, min);
    1402:	81 2f       	mov	r24, r17
    1404:	60 2f       	mov	r22, r16
    1406:	0e 94 e6 02 	call	0x5cc	; 0x5cc <display_alarm>
	display[4] |= 0x1;
    140a:	80 91 e9 02 	lds	r24, 0x02E9
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    1414:	80 91 ea 02 	lds	r24, 0x02EA
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	80 93 ea 02 	sts	0x02EA, r24
      }

      if (pressed & 0x4)
    141e:	80 91 59 02 	lds	r24, 0x0259
    1422:	82 ff       	sbrs	r24, 2
    1424:	5a cf       	rjmp	.-332    	; 0x12da <set_alarm+0x1c>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    1426:	78 94       	sei

  milliseconds = 0;
    1428:	10 92 56 02 	sts	0x0256, r1
    142c:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    1430:	80 91 55 02 	lds	r24, 0x0255
    1434:	90 91 56 02 	lds	r25, 0x0256
    1438:	8b 34       	cpi	r24, 0x4B	; 75
    143a:	91 05       	cpc	r25, r1
    143c:	c8 f3       	brcs	.-14     	; 0x1430 <set_alarm+0x172>
    143e:	4d cf       	rjmp	.-358    	; 0x12da <set_alarm+0x1c>

      if (pressed & 0x4)
	delayms(75);
    }
  }
}
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	08 95       	ret

0000144a <check_alarm>:
  date_y = intTempYr;

}

//Checks the alarm against the passed time.
void check_alarm(uint8_t h, uint8_t m, uint8_t s) {
    144a:	98 2f       	mov	r25, r24

  if (alarm_on && (alarm_h == h) && (alarm_m == m) && (0 == s)) {
    144c:	80 91 ef 02 	lds	r24, 0x02EF
    1450:	88 23       	and	r24, r24
    1452:	b1 f0       	breq	.+44     	; 0x1480 <check_alarm+0x36>
    1454:	80 91 f0 02 	lds	r24, 0x02F0
    1458:	89 17       	cp	r24, r25
    145a:	91 f4       	brne	.+36     	; 0x1480 <check_alarm+0x36>
    145c:	80 91 e2 02 	lds	r24, 0x02E2
    1460:	86 17       	cp	r24, r22
    1462:	71 f4       	brne	.+28     	; 0x1480 <check_alarm+0x36>
    1464:	44 23       	and	r20, r20
    1466:	61 f4       	brne	.+24     	; 0x1480 <check_alarm+0x36>
    DEBUGP("alarm on!");
    1468:	85 ea       	ldi	r24, 0xA5	; 165
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    alarming = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 f2 02 	sts	0x02F2, r24
    snoozetimer = 0;
    1478:	10 92 54 02 	sts	0x0254, r1
    147c:	10 92 53 02 	sts	0x0253, r1
    1480:	08 95       	ret

00001482 <__vector_9>:
// This variable keeps track of whether we have not pressed any
// buttons in a few seconds, and turns off the menu display
volatile uint8_t timeoutcounter = 0;

// this goes off once a second
SIGNAL (TIMER2_OVF_vect) {
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	11 24       	eor	r1, r1
    148c:	2f 93       	push	r18
    148e:	3f 93       	push	r19
    1490:	4f 93       	push	r20
    1492:	5f 93       	push	r21
    1494:	6f 93       	push	r22
    1496:	7f 93       	push	r23
    1498:	8f 93       	push	r24
    149a:	9f 93       	push	r25
    149c:	af 93       	push	r26
    149e:	bf 93       	push	r27
    14a0:	ef 93       	push	r30
    14a2:	ff 93       	push	r31
  CLKPR = _BV(CLKPCE);  //MEME
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	80 93 61 00 	sts	0x0061, r24
  CLKPR = 0;
    14aa:	10 92 61 00 	sts	0x0061, r1

  time_s++;             // one second has gone by
    14ae:	80 91 f5 02 	lds	r24, 0x02F5
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	80 93 f5 02 	sts	0x02F5, r24

  fix_time();
    14b8:	0e 94 d6 06 	call	0xdac	; 0xdac <fix_time>

  // If we're in low power mode we should get out now since the display is off
  if (sleepmode)
    14bc:	80 91 49 02 	lds	r24, 0x0249
    14c0:	88 23       	and	r24, r24
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <__vector_9+0x44>
    14c4:	5f c0       	rjmp	.+190    	; 0x1584 <__vector_9+0x102>
    return;
   

  if (displaymode == SHOW_TIME) {
    14c6:	80 91 f3 02 	lds	r24, 0x02F3
    14ca:	88 23       	and	r24, r24
    14cc:	11 f5       	brne	.+68     	; 0x1512 <__vector_9+0x90>
    if (timeunknown && (time_s % 2)) {
    14ce:	80 91 4a 02 	lds	r24, 0x024A
    14d2:	88 23       	and	r24, r24
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <__vector_9+0x66>
    14d6:	80 91 f5 02 	lds	r24, 0x02F5
    14da:	80 ff       	sbrs	r24, 0
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__vector_9+0x66>
      display_str("        ");
    14de:	8e e7       	ldi	r24, 0x7E	; 126
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <__vector_9+0x76>
    } else {
      display_time(time_h, time_m, time_s);
    14e8:	80 91 60 02 	lds	r24, 0x0260
    14ec:	60 91 ee 02 	lds	r22, 0x02EE
    14f0:	40 91 f5 02 	lds	r20, 0x02F5
    14f4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_time>
    }
    if (alarm_on)
    14f8:	80 91 ef 02 	lds	r24, 0x02EF
    14fc:	88 23       	and	r24, r24
    14fe:	21 f0       	breq	.+8      	; 0x1508 <__vector_9+0x86>
      display[0] |= 0x2;
    1500:	80 91 e5 02 	lds	r24, 0x02E5
    1504:	82 60       	ori	r24, 0x02	; 2
    1506:	03 c0       	rjmp	.+6      	; 0x150e <__vector_9+0x8c>
    else 
      display[0] &= ~0x2;
    1508:	80 91 e5 02 	lds	r24, 0x02E5
    150c:	8d 7f       	andi	r24, 0xFD	; 253
    150e:	80 93 e5 02 	sts	0x02E5, r24
  ADCSRA |= _BV(ADIE);  // Enable ADC interrupt
}

// Start ADC conversion for dimmer
void dimmer_update(void) {
  if (brightness_level == 0) 
    1512:	80 91 f1 02 	lds	r24, 0x02F1
    1516:	88 23       	and	r24, r24
    1518:	29 f4       	brne	.+10     	; 0x1524 <__vector_9+0xa2>
    ADCSRA |= _BV(ADSC);
    151a:	80 91 7a 00 	lds	r24, 0x007A
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	80 93 7a 00 	sts	0x007A, r24
  }

#ifdef FEATURE_AUTODIM
  dimmer_update();
#endif
  check_alarm(time_h, time_m, time_s);
    1524:	80 91 60 02 	lds	r24, 0x0260
    1528:	60 91 ee 02 	lds	r22, 0x02EE
    152c:	40 91 f5 02 	lds	r20, 0x02F5
    1530:	0e 94 25 0a 	call	0x144a	; 0x144a <check_alarm>

  if (timeoutcounter)
    1534:	80 91 5b 02 	lds	r24, 0x025B
    1538:	88 23       	and	r24, r24
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_9+0xc4>
    timeoutcounter--;
    153c:	80 91 5b 02 	lds	r24, 0x025B
    1540:	81 50       	subi	r24, 0x01	; 1
    1542:	80 93 5b 02 	sts	0x025B, r24
  if (buttonholdcounter)
    1546:	80 91 5a 02 	lds	r24, 0x025A
    154a:	88 23       	and	r24, r24
    154c:	29 f0       	breq	.+10     	; 0x1558 <__vector_9+0xd6>
    buttonholdcounter--;
    154e:	80 91 5a 02 	lds	r24, 0x025A
    1552:	81 50       	subi	r24, 0x01	; 1
    1554:	80 93 5a 02 	sts	0x025A, r24
  if (snoozetimer) {
    1558:	80 91 53 02 	lds	r24, 0x0253
    155c:	90 91 54 02 	lds	r25, 0x0254
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	81 f0       	breq	.+32     	; 0x1584 <__vector_9+0x102>
    snoozetimer--;
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	90 93 54 02 	sts	0x0254, r25
    156a:	80 93 53 02 	sts	0x0253, r24
    if (snoozetimer % 2) 
    156e:	80 ff       	sbrs	r24, 0
    1570:	04 c0       	rjmp	.+8      	; 0x157a <__vector_9+0xf8>
      display[0] |= 0x2;
    1572:	80 91 e5 02 	lds	r24, 0x02E5
    1576:	82 60       	ori	r24, 0x02	; 2
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <__vector_9+0xfe>
    else
      display[0] &= ~0x2;
    157a:	80 91 e5 02 	lds	r24, 0x02E5
    157e:	8d 7f       	andi	r24, 0xFD	; 253
    1580:	80 93 e5 02 	sts	0x02E5, r24
  }
}
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <setalarmstate>:
}

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(void) {
  if (ALARM_PIN & _BV(ALARM)) { 
    15a6:	4a 9b       	sbis	0x09, 2	; 9
    15a8:	34 c0       	rjmp	.+104    	; 0x1612 <setalarmstate+0x6c>
    // Don't display the alarm/beep if we already have
    if  (!alarm_on) {
    15aa:	80 91 ef 02 	lds	r24, 0x02EF
    15ae:	88 23       	and	r24, r24
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <setalarmstate+0xe>
    15b2:	4c c0       	rjmp	.+152    	; 0x164c <setalarmstate+0xa6>
      // alarm on!
      alarm_on = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 ef 02 	sts	0x02EF, r24
      // reset snoozing
      snoozetimer = 0;
    15ba:	10 92 54 02 	sts	0x0254, r1
    15be:	10 92 53 02 	sts	0x0253, r1
      // show the status on the VFD tube
      display_str("alarm on");
    15c2:	87 e8       	ldi	r24, 0x87	; 135
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
      // its not actually SHOW_SNOOZE but just anything but SHOW_TIME
      displaymode = SHOW_SNOOZE;
    15ca:	89 e0       	ldi	r24, 0x09	; 9
    15cc:	80 93 f3 02 	sts	0x02F3, r24

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    15d0:	78 94       	sei

  milliseconds = 0;
    15d2:	10 92 56 02 	sts	0x0256, r1
    15d6:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    15da:	80 91 55 02 	lds	r24, 0x0255
    15de:	90 91 56 02 	lds	r25, 0x0256
    15e2:	88 5e       	subi	r24, 0xE8	; 232
    15e4:	93 40       	sbci	r25, 0x03	; 3
    15e6:	c8 f3       	brcs	.-14     	; 0x15da <setalarmstate+0x34>
      display_str("alarm on");
      // its not actually SHOW_SNOOZE but just anything but SHOW_TIME
      displaymode = SHOW_SNOOZE;
      delayms(1000);
      // show the current alarm time set
      display_alarm(alarm_h, alarm_m);
    15e8:	80 91 f0 02 	lds	r24, 0x02F0
    15ec:	60 91 e2 02 	lds	r22, 0x02E2
    15f0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <display_alarm>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    15f4:	78 94       	sei

  milliseconds = 0;
    15f6:	10 92 56 02 	sts	0x0256, r1
    15fa:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    15fe:	80 91 55 02 	lds	r24, 0x0255
    1602:	90 91 56 02 	lds	r25, 0x0256
    1606:	88 5e       	subi	r24, 0xE8	; 232
    1608:	93 40       	sbci	r25, 0x03	; 3
    160a:	c8 f3       	brcs	.-14     	; 0x15fe <setalarmstate+0x58>
      delayms(1000);
      // show the current alarm time set
      display_alarm(alarm_h, alarm_m);
      delayms(1000);
      // after a second, go back to clock mode
      displaymode = SHOW_TIME;
    160c:	10 92 f3 02 	sts	0x02F3, r1
    1610:	08 95       	ret
    }
  } else {
    if (alarm_on) {
    1612:	80 91 ef 02 	lds	r24, 0x02EF
    1616:	88 23       	and	r24, r24
    1618:	c9 f0       	breq	.+50     	; 0x164c <setalarmstate+0xa6>
      // turn off the alarm
      alarm_on = 0;
    161a:	10 92 ef 02 	sts	0x02EF, r1
      snoozetimer = 0;
    161e:	10 92 54 02 	sts	0x0254, r1
    1622:	10 92 53 02 	sts	0x0253, r1
      if (alarming) {
    1626:	80 91 f2 02 	lds	r24, 0x02F2
    162a:	88 23       	and	r24, r24
    162c:	79 f0       	breq	.+30     	; 0x164c <setalarmstate+0xa6>
	// if the alarm is going off, we should turn it off
	// and quiet the speaker
	DEBUGP("alarm off");
    162e:	8f ea       	ldi	r24, 0xAF	; 175
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
	alarming = 0;
    1638:	10 92 f2 02 	sts	0x02F2, r1
	TCCR1B &= ~_BV(CS11); // turn it off!
    163c:	80 91 81 00 	lds	r24, 0x0081
    1640:	8d 7f       	andi	r24, 0xFD	; 253
    1642:	80 93 81 00 	sts	0x0081, r24
	PORTB |= _BV(SPK1) | _BV(SPK2);
    1646:	85 b1       	in	r24, 0x05	; 5
    1648:	86 60       	ori	r24, 0x06	; 6
    164a:	85 b9       	out	0x05, r24	; 5
    164c:	08 95       	ret

0000164e <set_date>:
  }
}



void set_date(void) {
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    1654:	8a e0       	ldi	r24, 0x0A	; 10
    1656:	80 93 5b 02 	sts	0x025B, r24
    165a:	10 e0       	ldi	r17, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    165c:	0a e0       	ldi	r16, 0x0A	; 10
	display_date(DATE);
	display[1] |= 0x1;
	display[2] |= 0x1;
      } else if (((mode == SET_MONTH) && (region == REGION_US)) ||
		 ((mode == SET_DAY) && (region == REGION_EU))) {
	if (region == REGION_US)
    165e:	ff 24       	eor	r15, r15
    1660:	f3 94       	inc	r15
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  

  while (1) {
    if (just_pressed || pressed) {
    1662:	80 91 58 02 	lds	r24, 0x0258
    1666:	88 23       	and	r24, r24
    1668:	21 f4       	brne	.+8      	; 0x1672 <set_date+0x24>
    166a:	80 91 59 02 	lds	r24, 0x0259
    166e:	88 23       	and	r24, r24
    1670:	19 f0       	breq	.+6      	; 0x1678 <set_date+0x2a>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1672:	00 93 5b 02 	sts	0x025B, r16
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <set_date+0x34>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1678:	80 91 5b 02 	lds	r24, 0x025B
    167c:	88 23       	and	r24, r24
    167e:	09 f4       	brne	.+2      	; 0x1682 <set_date+0x34>
    1680:	72 c0       	rjmp	.+228    	; 0x1766 <set_date+0x118>
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
    1682:	80 91 58 02 	lds	r24, 0x0258
    1686:	80 fd       	sbrc	r24, 0
    1688:	08 c1       	rjmp	.+528    	; 0x189a <set_date+0x24c>
      return;
    }
    if (just_pressed & 0x2) {
    168a:	80 91 58 02 	lds	r24, 0x0258
    168e:	81 ff       	sbrs	r24, 1
    1690:	6d c0       	rjmp	.+218    	; 0x176c <set_date+0x11e>

      just_pressed = 0;
    1692:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    1696:	11 23       	and	r17, r17
    1698:	d1 f4       	brne	.+52     	; 0x16ce <set_date+0x80>
	// start!
	if (region == REGION_US) {
    169a:	80 91 48 02 	lds	r24, 0x0248
    169e:	88 23       	and	r24, r24
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <set_date+0x58>
    16a2:	11 e0       	ldi	r17, 0x01	; 1
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <set_date+0x64>
	  mode = SET_MONTH;
	}
	else {
	  DEBUGP("Set day");
    16a6:	89 eb       	ldi	r24, 0xB9	; 185
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    16b0:	12 e0       	ldi	r17, 0x02	; 2
	  mode = SET_DAY;
	}
	display_date(DATE);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
	display[1] |= 0x1;
    16b8:	80 91 e6 02 	lds	r24, 0x02E6
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;
    16c2:	80 91 e7 02 	lds	r24, 0x02E7
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	80 93 e7 02 	sts	0x02E7, r24
    16cc:	4f c0       	rjmp	.+158    	; 0x176c <set_date+0x11e>
      } else if (((mode == SET_MONTH) && (region == REGION_US)) ||
    16ce:	11 30       	cpi	r17, 0x01	; 1
    16d0:	29 f4       	brne	.+10     	; 0x16dc <set_date+0x8e>
    16d2:	80 91 48 02 	lds	r24, 0x0248
    16d6:	88 23       	and	r24, r24
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <set_date+0x9a>
    16da:	20 c0       	rjmp	.+64     	; 0x171c <set_date+0xce>
    16dc:	12 30       	cpi	r17, 0x02	; 2
    16de:	e1 f4       	brne	.+56     	; 0x1718 <set_date+0xca>
    16e0:	80 91 48 02 	lds	r24, 0x0248
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	a9 f4       	brne	.+42     	; 0x1712 <set_date+0xc4>
		 ((mode == SET_DAY) && (region == REGION_EU))) {
	if (region == REGION_US)
    16e8:	80 91 48 02 	lds	r24, 0x0248
    16ec:	88 23       	and	r24, r24
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <set_date+0xa6>
    16f0:	11 e0       	ldi	r17, 0x01	; 1
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <set_date+0xa8>
    16f4:	12 e0       	ldi	r17, 0x02	; 2
	  mode = SET_DAY;
	else
	  mode = SET_MONTH;
	display_date(DATE);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
	display[4] |= 0x1;
    16fc:	80 91 e9 02 	lds	r24, 0x02E9
    1700:	81 60       	ori	r24, 0x01	; 1
    1702:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    1706:	80 91 ea 02 	lds	r24, 0x02EA
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	80 93 ea 02 	sts	0x02EA, r24
    1710:	2d c0       	rjmp	.+90     	; 0x176c <set_date+0x11e>
      } else if (((mode == SET_DAY) && (region == REGION_US)) ||
    1712:	88 23       	and	r24, r24
    1714:	39 f0       	breq	.+14     	; 0x1724 <set_date+0xd6>
    1716:	15 c0       	rjmp	.+42     	; 0x1742 <set_date+0xf4>
    1718:	11 30       	cpi	r17, 0x01	; 1
    171a:	99 f4       	brne	.+38     	; 0x1742 <set_date+0xf4>
    171c:	80 91 48 02 	lds	r24, 0x0248
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	79 f4       	brne	.+30     	; 0x1742 <set_date+0xf4>
	((mode == SET_MONTH) && (region == REGION_EU))) {
	mode = SET_YEAR;
	display_date(DATE);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
	display[7] |= 0x1;
    172a:	80 91 ec 02 	lds	r24, 0x02EC
    172e:	81 60       	ori	r24, 0x01	; 1
    1730:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    1734:	80 91 ed 02 	lds	r24, 0x02ED
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	80 93 ed 02 	sts	0x02ED, r24
    173e:	13 e0       	ldi	r17, 0x03	; 3
    1740:	15 c0       	rjmp	.+42     	; 0x176c <set_date+0x11e>
      } else {
	displaymode = NONE;
    1742:	83 e6       	ldi	r24, 0x63	; 99
    1744:	80 93 f3 02 	sts	0x02F3, r24
	display_date(DATE);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    174e:	78 94       	sei

  milliseconds = 0;
    1750:	10 92 56 02 	sts	0x0256, r1
    1754:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    1758:	80 91 55 02 	lds	r24, 0x0255
    175c:	90 91 56 02 	lds	r25, 0x0256
    1760:	8c 5d       	subi	r24, 0xDC	; 220
    1762:	95 40       	sbci	r25, 0x05	; 5
    1764:	c8 f3       	brcs	.-14     	; 0x1758 <set_date+0x10a>
	display[8] |= 0x1;
      } else {
	displaymode = NONE;
	display_date(DATE);
	delayms(1500);
	displaymode = SHOW_TIME;
    1766:	10 92 f3 02 	sts	0x02F3, r1
    176a:	97 c0       	rjmp	.+302    	; 0x189a <set_date+0x24c>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    176c:	80 91 58 02 	lds	r24, 0x0258
    1770:	82 fd       	sbrc	r24, 2
    1772:	04 c0       	rjmp	.+8      	; 0x177c <set_date+0x12e>
    1774:	80 91 59 02 	lds	r24, 0x0259
    1778:	82 ff       	sbrs	r24, 2
    177a:	73 cf       	rjmp	.-282    	; 0x1662 <set_date+0x14>
      just_pressed = 0;
    177c:	10 92 58 02 	sts	0x0258, r1
      if (mode == SET_MONTH) {
    1780:	11 30       	cpi	r17, 0x01	; 1
    1782:	61 f5       	brne	.+88     	; 0x17dc <set_date+0x18e>
	date_m++;
    1784:	80 91 f4 02 	lds	r24, 0x02F4
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	80 93 f4 02 	sts	0x02F4, r24
	if (date_m >= 13)
    178e:	80 91 f4 02 	lds	r24, 0x02F4
    1792:	8d 30       	cpi	r24, 0x0D	; 13
    1794:	14 f0       	brlt	.+4      	; 0x179a <set_date+0x14c>
	  date_m = 1;
    1796:	10 93 f4 02 	sts	0x02F4, r17
	display_date(DATE);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
	if (region == REGION_US) {
    17a0:	80 91 48 02 	lds	r24, 0x0248
    17a4:	88 23       	and	r24, r24
    17a6:	59 f4       	brne	.+22     	; 0x17be <set_date+0x170>
	  display[1] |= 0x1;
    17a8:	80 91 e6 02 	lds	r24, 0x02E6
    17ac:	81 60       	ori	r24, 0x01	; 1
    17ae:	80 93 e6 02 	sts	0x02E6, r24
	  display[2] |= 0x1;
    17b2:	80 91 e7 02 	lds	r24, 0x02E7
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	80 93 e7 02 	sts	0x02E7, r24
    17bc:	0a c0       	rjmp	.+20     	; 0x17d2 <set_date+0x184>
	} else {
	  display[4] |= 0x1;
    17be:	80 91 e9 02 	lds	r24, 0x02E9
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	80 93 e9 02 	sts	0x02E9, r24
	  display[5] |= 0x1;
    17c8:	80 91 ea 02 	lds	r24, 0x02EA
    17cc:	81 60       	ori	r24, 0x01	; 1
    17ce:	80 93 ea 02 	sts	0x02EA, r24
	}
	eeprom_write_byte((uint8_t *)EE_MONTH, date_m);    
    17d2:	60 91 f4 02 	lds	r22, 0x02F4
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	4d c0       	rjmp	.+154    	; 0x1876 <set_date+0x228>
      }
      if (mode == SET_DAY) {
    17dc:	12 30       	cpi	r17, 0x02	; 2
    17de:	61 f5       	brne	.+88     	; 0x1838 <set_date+0x1ea>
	date_d++;
    17e0:	80 91 e4 02 	lds	r24, 0x02E4
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	80 93 e4 02 	sts	0x02E4, r24
	if (date_d > 31)
    17ea:	80 91 e4 02 	lds	r24, 0x02E4
    17ee:	80 32       	cpi	r24, 0x20	; 32
    17f0:	14 f0       	brlt	.+4      	; 0x17f6 <set_date+0x1a8>
	  date_d = 1;
    17f2:	f0 92 e4 02 	sts	0x02E4, r15
	display_date(DATE);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>

	if (region == REGION_EU) {
    17fc:	80 91 48 02 	lds	r24, 0x0248
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	59 f4       	brne	.+22     	; 0x181a <set_date+0x1cc>
	  display[1] |= 0x1;
    1804:	80 91 e6 02 	lds	r24, 0x02E6
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	80 93 e6 02 	sts	0x02E6, r24
	  display[2] |= 0x1;
    180e:	80 91 e7 02 	lds	r24, 0x02E7
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	80 93 e7 02 	sts	0x02E7, r24
    1818:	0a c0       	rjmp	.+20     	; 0x182e <set_date+0x1e0>
	} else {
	  display[4] |= 0x1;
    181a:	80 91 e9 02 	lds	r24, 0x02E9
    181e:	81 60       	ori	r24, 0x01	; 1
    1820:	80 93 e9 02 	sts	0x02E9, r24
	  display[5] |= 0x1;
    1824:	80 91 ea 02 	lds	r24, 0x02EA
    1828:	81 60       	ori	r24, 0x01	; 1
    182a:	80 93 ea 02 	sts	0x02EA, r24
	}
	eeprom_write_byte((uint8_t *)EE_DAY, date_d);    
    182e:	60 91 e4 02 	lds	r22, 0x02E4
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <set_date+0x228>
      }
      if (mode == SET_YEAR) {
    1838:	13 30       	cpi	r17, 0x03	; 3
    183a:	f9 f4       	brne	.+62     	; 0x187a <set_date+0x22c>
	date_y++;
    183c:	80 91 e1 02 	lds	r24, 0x02E1
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 e1 02 	sts	0x02E1, r24
	date_y %= 100;
    1846:	80 91 e1 02 	lds	r24, 0x02E1
    184a:	64 e6       	ldi	r22, 0x64	; 100
    184c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodqi4>
    1850:	90 93 e1 02 	sts	0x02E1, r25
	display_date(DATE);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
	display[7] |= 0x1;
    185a:	80 91 ec 02 	lds	r24, 0x02EC
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    1864:	80 91 ed 02 	lds	r24, 0x02ED
    1868:	81 60       	ori	r24, 0x01	; 1
    186a:	80 93 ed 02 	sts	0x02ED, r24
	eeprom_write_byte((uint8_t *)EE_YEAR, date_y);    
    186e:	60 91 e1 02 	lds	r22, 0x02E1
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
      }

      if (pressed & 0x4)
    187a:	80 91 59 02 	lds	r24, 0x0259
    187e:	82 ff       	sbrs	r24, 2
    1880:	f0 ce       	rjmp	.-544    	; 0x1662 <set_date+0x14>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    1882:	78 94       	sei

  milliseconds = 0;
    1884:	10 92 56 02 	sts	0x0256, r1
    1888:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    188c:	80 91 55 02 	lds	r24, 0x0255
    1890:	90 91 56 02 	lds	r25, 0x0256
    1894:	cc 97       	sbiw	r24, 0x3c	; 60
    1896:	d0 f3       	brcs	.-12     	; 0x188c <set_date+0x23e>
    1898:	e4 ce       	rjmp	.-568    	; 0x1662 <set_date+0x14>

      if (pressed & 0x4)
	delayms(60);
    }
  }
}
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	08 95       	ret

000018a2 <__vector_23>:
  EIMSK = _BV(INT0);  //And reenable it before exiting.
}



SIGNAL(SIG_COMPARATOR) {
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
  //DEBUGP("COMP");
  if (ACSR & _BV(ACO)) {
    18c4:	00 b6       	in	r0, 0x30	; 48
    18c6:	05 fe       	sbrs	r0, 5
    18c8:	29 c0       	rjmp	.+82     	; 0x191c <__vector_23+0x7a>
    //DEBUGP("HIGH");
    if (!sleepmode) {
    18ca:	80 91 49 02 	lds	r24, 0x0249
    18ce:	88 23       	and	r24, r24
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <__vector_23+0x32>
    18d2:	42 c0       	rjmp	.+132    	; 0x1958 <__vector_23+0xb6>
      VFDSWITCH_PORT |= _BV(VFDSWITCH); // turn off display
    18d4:	5b 9a       	sbi	0x0b, 3	; 11
      VFDCLK_PORT &= ~_BV(VFDCLK) & ~_BV(VFDDATA); // no power to vfdchip
    18d6:	85 b1       	in	r24, 0x05	; 5
    18d8:	87 7d       	andi	r24, 0xD7	; 215
    18da:	85 b9       	out	0x05, r24	; 5
      BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
    18dc:	5e 98       	cbi	0x0b, 6	; 11
      SPCR  &= ~_BV(SPE); // turn off spi
    18de:	8c b5       	in	r24, 0x2c	; 44
    18e0:	8f 7b       	andi	r24, 0xBF	; 191
    18e2:	8c bd       	out	0x2c, r24	; 44
      if (restored) {
    18e4:	80 91 4b 02 	lds	r24, 0x024B
    18e8:	88 23       	and	r24, r24
    18ea:	61 f0       	breq	.+24     	; 0x1904 <__vector_23+0x62>
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
    18ec:	60 91 ee 02 	lds	r22, 0x02EE
    18f0:	85 e0       	ldi	r24, 0x05	; 5
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	eeprom_write_byte((uint8_t *)EE_SEC, time_s);
    18f8:	60 91 f5 02 	lds	r22, 0x02F5
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
      }
      DEBUGP("z");
    1904:	83 e4       	ldi	r24, 0x43	; 67
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
      TCCR0B = 0; // no boost
    190e:	15 bc       	out	0x25, r1	; 37
      volume = 0; // low power buzzer
    1910:	10 92 e3 02 	sts	0x02E3, r1
      PCICR = 0;  // ignore buttons
    1914:	10 92 68 00 	sts	0x0068, r1
#ifdef FEATURE_AUTODIM
      DIMMER_POWER_PORT &= ~_BV(DIMMER_POWER_PIN); // no power to photoresistor
    1918:	45 98       	cbi	0x08, 5	; 8
    191a:	19 c0       	rjmp	.+50     	; 0x194e <__vector_23+0xac>

      app_start();
    }
  } else {
    //DEBUGP("LOW");
    if (sleepmode) {
    191c:	80 91 49 02 	lds	r24, 0x0249
    1920:	88 23       	and	r24, r24
    1922:	d1 f0       	breq	.+52     	; 0x1958 <__vector_23+0xb6>
      if (restored) {
    1924:	80 91 4b 02 	lds	r24, 0x024B
    1928:	88 23       	and	r24, r24
    192a:	61 f0       	breq	.+24     	; 0x1944 <__vector_23+0xa2>
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
    192c:	60 91 ee 02 	lds	r22, 0x02EE
    1930:	85 e0       	ldi	r24, 0x05	; 5
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	eeprom_write_byte((uint8_t *)EE_SEC, time_s);
    1938:	60 91 f5 02 	lds	r22, 0x02F5
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
      }
      DEBUGP("WAKERESET"); 
    1944:	89 e3       	ldi	r24, 0x39	; 57
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
      app_start();
    194e:	e0 91 46 02 	lds	r30, 0x0246
    1952:	f0 91 47 02 	lds	r31, 0x0247
    1956:	09 95       	icall
    }
  }
}
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <setsnooze>:
// this sets the snoozetimer off in MAXSNOOZE seconds - which turns on
// the alarm again
void setsnooze(void) {
  //snoozetimer = eeprom_read_byte((uint8_t *)EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    197a:	88 e5       	ldi	r24, 0x58	; 88
    197c:	92 e0       	ldi	r25, 0x02	; 2
    197e:	90 93 54 02 	sts	0x0254, r25
    1982:	80 93 53 02 	sts	0x0253, r24
  DEBUGP("snooze");
    1986:	8e e4       	ldi	r24, 0x4E	; 78
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
  display_str("snoozing");
    1990:	80 e9       	ldi	r24, 0x90	; 144
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
  displaymode = SHOW_SNOOZE;
    1998:	89 e0       	ldi	r24, 0x09	; 9
    199a:	80 93 f3 02 	sts	0x02F3, r24

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    199e:	78 94       	sei

  milliseconds = 0;
    19a0:	10 92 56 02 	sts	0x0256, r1
    19a4:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    19a8:	80 91 55 02 	lds	r24, 0x0255
    19ac:	90 91 56 02 	lds	r25, 0x0256
    19b0:	88 5e       	subi	r24, 0xE8	; 232
    19b2:	93 40       	sbci	r25, 0x03	; 3
    19b4:	c8 f3       	brcs	.-14     	; 0x19a8 <setsnooze+0x2e>
  snoozetimer = MAXSNOOZE;
  DEBUGP("snooze");
  display_str("snoozing");
  displaymode = SHOW_SNOOZE;
  delayms(1000);
  displaymode = SHOW_TIME;
    19b6:	10 92 f3 02 	sts	0x02F3, r1
}
    19ba:	08 95       	ret

000019bc <__vector_3>:
  }
  PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
}

// Just button #2
SIGNAL(SIG_PIN_CHANGE0) {
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
  PCMSK0 = 0;
    19de:	10 92 6b 00 	sts	0x006B, r1
  sei();
    19e2:	78 94       	sei
  if (! (PINB & _BV(BUTTON2))) {
    19e4:	18 99       	sbic	0x03, 0	; 3
    19e6:	2a c0       	rjmp	.+84     	; 0x1a3c <__vector_3+0x80>
    // button2 is pressed
    if (! (last_buttonstate & 0x2)) { // was not pressed before
    19e8:	80 91 57 02 	lds	r24, 0x0257
    19ec:	81 fd       	sbrc	r24, 1
    19ee:	2b c0       	rjmp	.+86     	; 0x1a46 <__vector_3+0x8a>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    19f0:	78 94       	sei

  milliseconds = 0;
    19f2:	10 92 56 02 	sts	0x0256, r1
    19f6:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    19fa:	80 91 55 02 	lds	r24, 0x0255
    19fe:	90 91 56 02 	lds	r25, 0x0256
    1a02:	0a 97       	sbiw	r24, 0x0a	; 10
    1a04:	d0 f3       	brcs	.-12     	; 0x19fa <__vector_3+0x3e>
  sei();
  if (! (PINB & _BV(BUTTON2))) {
    // button2 is pressed
    if (! (last_buttonstate & 0x2)) { // was not pressed before
      delayms(10);                    // debounce
      if (PINB & _BV(BUTTON2))        // filter out bounces
    1a06:	18 99       	sbic	0x03, 0	; 3
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <__vector_3+0x8a>
      {
        PCMSK0 = _BV(PCINT0);
	return;
      }
      tick();                         // make a noise
    1a0a:	0e 94 33 01 	call	0x266	; 0x266 <tick>
      // check if we will snag this button press for snoozing
      if (alarming) {
    1a0e:	80 91 f2 02 	lds	r24, 0x02F2
    1a12:	88 23       	and	r24, r24
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <__vector_3+0x60>
	setsnooze(); 	// turn on snooze
    1a16:	0e 94 bd 0c 	call	0x197a	; 0x197a <setsnooze>
    1a1a:	15 c0       	rjmp	.+42     	; 0x1a46 <__vector_3+0x8a>
	PCMSK0 = _BV(PCINT0);
	return;
      }
      last_buttonstate |= 0x2;
    1a1c:	80 91 57 02 	lds	r24, 0x0257
    1a20:	82 60       	ori	r24, 0x02	; 2
    1a22:	80 93 57 02 	sts	0x0257, r24
      just_pressed |= 0x2;
    1a26:	80 91 58 02 	lds	r24, 0x0258
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	80 93 58 02 	sts	0x0258, r24
      DEBUGP("b2");
    1a30:	85 e4       	ldi	r24, 0x45	; 69
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <__vector_3+0x8a>
    }
  } else {
    last_buttonstate &= ~0x2;
    1a3c:	80 91 57 02 	lds	r24, 0x0257
    1a40:	8d 7f       	andi	r24, 0xFD	; 253
    1a42:	80 93 57 02 	sts	0x0257, r24
  }
  PCMSK0 = _BV(PCINT0);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 6b 00 	sts	0x006B, r24
}
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	bf 91       	pop	r27
    1a52:	af 91       	pop	r26
    1a54:	9f 91       	pop	r25
    1a56:	8f 91       	pop	r24
    1a58:	7f 91       	pop	r23
    1a5a:	6f 91       	pop	r22
    1a5c:	5f 91       	pop	r21
    1a5e:	4f 91       	pop	r20
    1a60:	3f 91       	pop	r19
    1a62:	2f 91       	pop	r18
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	0f 90       	pop	r0
    1a6a:	1f 90       	pop	r1
    1a6c:	18 95       	reti

00001a6e <__vector_5>:
// This allows for 'high speed incrementing' when setting the time
volatile uint8_t last_buttonstate = 0, just_pressed = 0, pressed = 0;
volatile uint8_t buttonholdcounter = 0;

// This interrupt detects switches 1 and 3
SIGNAL(SIG_PIN_CHANGE2) {
    1a6e:	1f 92       	push	r1
    1a70:	0f 92       	push	r0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	2f 93       	push	r18
    1a7a:	3f 93       	push	r19
    1a7c:	4f 93       	push	r20
    1a7e:	5f 93       	push	r21
    1a80:	6f 93       	push	r22
    1a82:	7f 93       	push	r23
    1a84:	8f 93       	push	r24
    1a86:	9f 93       	push	r25
    1a88:	af 93       	push	r26
    1a8a:	bf 93       	push	r27
    1a8c:	ef 93       	push	r30
    1a8e:	ff 93       	push	r31
  // allow interrupts while we're doing this
  PCMSK2 = 0;
    1a90:	10 92 6d 00 	sts	0x006D, r1
  sei();
    1a94:	78 94       	sei
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    1a96:	a8 95       	wdr
  PCMSK2 = 0;
  sei();
  // kick the dog
  kickthedog();

  if (! (PIND & _BV(BUTTON1))) {
    1a98:	4d 99       	sbic	0x09, 5	; 9
    1a9a:	27 c0       	rjmp	.+78     	; 0x1aea <__vector_5+0x7c>
    // button1 is pressed
    if (! (last_buttonstate & 0x1)) { // was not pressed before
    1a9c:	80 91 57 02 	lds	r24, 0x0257
    1aa0:	80 fd       	sbrc	r24, 0
    1aa2:	28 c0       	rjmp	.+80     	; 0x1af4 <__vector_5+0x86>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    1aa4:	78 94       	sei

  milliseconds = 0;
    1aa6:	10 92 56 02 	sts	0x0256, r1
    1aaa:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    1aae:	80 91 55 02 	lds	r24, 0x0255
    1ab2:	90 91 56 02 	lds	r25, 0x0256
    1ab6:	0a 97       	sbiw	r24, 0x0a	; 10
    1ab8:	d0 f3       	brcs	.-12     	; 0x1aae <__vector_5+0x40>

  if (! (PIND & _BV(BUTTON1))) {
    // button1 is pressed
    if (! (last_buttonstate & 0x1)) { // was not pressed before
      delayms(10);                    // debounce
      if (PIND & _BV(BUTTON1))        // filter out bounces
    1aba:	4d 99       	sbic	0x09, 5	; 9
    1abc:	63 c0       	rjmp	.+198    	; 0x1b84 <__vector_5+0x116>
      {
        PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
         return;
      }
      tick();                         // make a noise
    1abe:	0e 94 33 01 	call	0x266	; 0x266 <tick>
      // check if we will snag this button press for snoozing
      if (alarming) {
    1ac2:	80 91 f2 02 	lds	r24, 0x02F2
    1ac6:	88 23       	and	r24, r24
    1ac8:	c9 f5       	brne	.+114    	; 0x1b3c <__vector_5+0xce>
	// turn on snooze
	setsnooze();
	PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
	return;
      }
      last_buttonstate |= 0x1;
    1aca:	80 91 57 02 	lds	r24, 0x0257
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	80 93 57 02 	sts	0x0257, r24
      just_pressed |= 0x1;
    1ad4:	80 91 58 02 	lds	r24, 0x0258
    1ad8:	81 60       	ori	r24, 0x01	; 1
    1ada:	80 93 58 02 	sts	0x0258, r24
      DEBUGP("b1");
    1ade:	8b e4       	ldi	r24, 0x4B	; 75
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <__vector_5+0x86>
    }
  } else {
    last_buttonstate &= ~0x1;
    1aea:	80 91 57 02 	lds	r24, 0x0257
    1aee:	8e 7f       	andi	r24, 0xFE	; 254
    1af0:	80 93 57 02 	sts	0x0257, r24
  }

  if (! (PIND & _BV(BUTTON3))) {
    1af4:	4c 99       	sbic	0x09, 4	; 9
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <__vector_5+0x108>
    // button3 is pressed
    if (! (last_buttonstate & 0x4)) { // was not pressed before
    1af8:	80 91 57 02 	lds	r24, 0x0257
    1afc:	82 fd       	sbrc	r24, 2
    1afe:	42 c0       	rjmp	.+132    	; 0x1b84 <__vector_5+0x116>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    1b00:	78 94       	sei

  milliseconds = 0;
    1b02:	10 92 56 02 	sts	0x0256, r1
    1b06:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    1b0a:	80 91 55 02 	lds	r24, 0x0255
    1b0e:	90 91 56 02 	lds	r25, 0x0256
    1b12:	0a 97       	sbiw	r24, 0x0a	; 10
    1b14:	d0 f3       	brcs	.-12     	; 0x1b0a <__vector_5+0x9c>

  if (! (PIND & _BV(BUTTON3))) {
    // button3 is pressed
    if (! (last_buttonstate & 0x4)) { // was not pressed before
      delayms(10);                    // debounce
      if (PIND & _BV(BUTTON3))        // filter out bounces
    1b16:	4c 99       	sbic	0x09, 4	; 9
    1b18:	35 c0       	rjmp	.+106    	; 0x1b84 <__vector_5+0x116>
      {
        PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
	return;
      }
      buttonholdcounter = 2;          // see if we're press-and-holding
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	80 93 5a 02 	sts	0x025A, r24
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <__vector_5+0xea>
      while (buttonholdcounter) {
	if (PIND & _BV(BUTTON3)) {        // released
    1b22:	4c 9b       	sbis	0x09, 4	; 9
    1b24:	19 c0       	rjmp	.+50     	; 0x1b58 <__vector_5+0xea>
	  tick();                         // make a noise
    1b26:	0e 94 33 01 	call	0x266	; 0x266 <tick>
	  last_buttonstate &= ~0x4;
    1b2a:	80 91 57 02 	lds	r24, 0x0257
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	80 93 57 02 	sts	0x0257, r24
	  // check if we will snag this button press for snoozing
	  if (alarming) {
    1b34:	80 91 f2 02 	lds	r24, 0x02F2
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <__vector_5+0xd4>
	    // turn on snooze
	    setsnooze();
    1b3c:	0e 94 bd 0c 	call	0x197a	; 0x197a <setsnooze>
    1b40:	21 c0       	rjmp	.+66     	; 0x1b84 <__vector_5+0x116>
	    PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
	    return;
	  }
	  DEBUGP("b3");
    1b42:	88 e4       	ldi	r24, 0x48	; 72
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
	  just_pressed |= 0x4;
    1b4c:	80 91 58 02 	lds	r24, 0x0258
    1b50:	84 60       	ori	r24, 0x04	; 4
    1b52:	80 93 58 02 	sts	0x0258, r24
    1b56:	16 c0       	rjmp	.+44     	; 0x1b84 <__vector_5+0x116>
      {
        PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
	return;
      }
      buttonholdcounter = 2;          // see if we're press-and-holding
      while (buttonholdcounter) {
    1b58:	80 91 5a 02 	lds	r24, 0x025A
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f7       	brne	.-62     	; 0x1b22 <__vector_5+0xb4>
	  just_pressed |= 0x4;
	  PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
	  return;
	}
      }
      last_buttonstate |= 0x4;
    1b60:	80 91 57 02 	lds	r24, 0x0257
    1b64:	84 60       	ori	r24, 0x04	; 4
    1b66:	80 93 57 02 	sts	0x0257, r24
      pressed |= 0x4;                 // held down
    1b6a:	80 91 59 02 	lds	r24, 0x0259
    1b6e:	84 60       	ori	r24, 0x04	; 4
    1b70:	80 93 59 02 	sts	0x0259, r24
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <__vector_5+0x116>
    }
  } else {
    pressed = 0;                      // button released
    1b76:	10 92 59 02 	sts	0x0259, r1
    last_buttonstate &= ~0x4;
    1b7a:	80 91 57 02 	lds	r24, 0x0257
    1b7e:	8b 7f       	andi	r24, 0xFB	; 251
    1b80:	80 93 57 02 	sts	0x0257, r24
  }
  PCMSK2 = _BV(PCINT21) | _BV(PCINT20);
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	80 93 6d 00 	sts	0x006D, r24
}
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <getgpstime>:
  return (UCSR0A & _BV(RXC0));

}


void getgpstime(void) {
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	2f 97       	sbiw	r28, 0x0f	; 15
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61

  uint8_t intOldHr = 0;
  uint8_t intOldMin = 0;
  uint8_t intOldSec = 0;

  char charReceived = UDR0;
    1bd2:	80 91 c6 00 	lds	r24, 0x00C6
    1bd6:	89 83       	std	Y+1, r24	; 0x01
  char strTime[7];
  char strDate[7];
  
  //If the buffer has not been started because a '$' has not been encountered
  //but a '$' is just now encountered, then start filling the buffer.
  if ( ( 0 == intBufferStatus ) && ( '$' == charReceived ) ) {
    1bd8:	90 91 4c 02 	lds	r25, 0x024C
    1bdc:	99 23       	and	r25, r25
    1bde:	49 f4       	brne	.+18     	; 0x1bf2 <getgpstime+0x46>
    1be0:	84 32       	cpi	r24, 0x24	; 36
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <getgpstime+0x3a>
    1be4:	e4 c0       	rjmp	.+456    	; 0x1dae <getgpstime+0x202>
    intBufferStatus = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 4c 02 	sts	0x024C, r24
    strncat(strBuffer, &charReceived, 1);
    1bec:	81 e6       	ldi	r24, 0x61	; 97
    1bee:	92 e0       	ldi	r25, 0x02	; 2
    1bf0:	d7 c0       	rjmp	.+430    	; 0x1da0 <getgpstime+0x1f4>
  }

  //If the buffer has started to fill...
  if ( 0 != intBufferStatus ) {
    //If for some reason, the buffer is full, clear it, and start over.
    if ( ! ( ( strlen(strBuffer) < BUFFERSIZE ) ) ) {
    1bf2:	01 e6       	ldi	r16, 0x61	; 97
    1bf4:	12 e0       	ldi	r17, 0x02	; 2
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	01 90       	ld	r0, Z+
    1bfa:	00 20       	and	r0, r0
    1bfc:	e9 f7       	brne	.-6      	; 0x1bf8 <getgpstime+0x4c>
    1bfe:	31 97       	sbiw	r30, 0x01	; 1
    1c00:	e0 1b       	sub	r30, r16
    1c02:	f1 0b       	sbc	r31, r17
    1c04:	e0 38       	cpi	r30, 0x80	; 128
    1c06:	f1 05       	cpc	r31, r1
    1c08:	c0 f4       	brcc	.+48     	; 0x1c3a <getgpstime+0x8e>
      intBufferStatus = 0;
      return;
    }
    //If the buffer has 6 characters in it, it is time to check to see if it is 
    //the line we are looking for that starts with "$GPRMC"
    else if ( 6 == strlen(strBuffer) ) {
    1c0a:	36 97       	sbiw	r30, 0x06	; 6
    1c0c:	89 f4       	brne	.+34     	; 0x1c30 <getgpstime+0x84>
      //If the buffer does contain the characters we are looking for,
      //then update the status, add to the buffer, and then return for more.
      if ( 0 == strcmp( strBuffer, "$GPRMC" ) ) {
    1c0e:	c8 01       	movw	r24, r16
    1c10:	69 e9       	ldi	r22, 0x99	; 153
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <strcmp>
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <getgpstime+0x78>
        //uart_puts("\n\r$GPRMC Found \n\r");
        intBufferStatus = 2;
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	80 93 4c 02 	sts	0x024C, r24
    1c22:	bd c0       	rjmp	.+378    	; 0x1d9e <getgpstime+0x1f2>
      //If the buffer does not contain the characters we are looking for,
      //then clear the buffer and start over..
      else {
        //uart_puts("\n\r$GPRMC Not Found:\t\t");
        //uart_puts(strBuffer);
        memset( strBuffer, 0, BUFFERSIZE );
    1c24:	80 e8       	ldi	r24, 0x80	; 128
    1c26:	f8 01       	movw	r30, r16
    1c28:	11 92       	st	Z+, r1
    1c2a:	8a 95       	dec	r24
    1c2c:	e9 f7       	brne	.-6      	; 0x1c28 <getgpstime+0x7c>
    1c2e:	b4 c0       	rjmp	.+360    	; 0x1d98 <getgpstime+0x1ec>
      }
    }

    //If the asterix at the start of the checksum at the end of the line is encountered,
    //then parse the buffer.
    else if ( '*' == charReceived ) {
    1c30:	8a 32       	cpi	r24, 0x2A	; 42
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <getgpstime+0x8a>
    1c34:	b4 c0       	rjmp	.+360    	; 0x1d9e <getgpstime+0x1f2>
      //If the buffer status indicates we have not already found the
      //needed start of the string, then start over.
      if ( 2 != intBufferStatus ) {
    1c36:	92 30       	cpi	r25, 0x02	; 2
    1c38:	19 f0       	breq	.+6      	; 0x1c40 <getgpstime+0x94>
        memset( strBuffer, 0, BUFFERSIZE );
    1c3a:	80 e8       	ldi	r24, 0x80	; 128
    1c3c:	d8 01       	movw	r26, r16
    1c3e:	a9 c0       	rjmp	.+338    	; 0x1d92 <getgpstime+0x1e6>
      //If the buffer status indicates we have already found the needed start of the string,
      //then go on to parse the buffer.
      else {
        //Parse the buffer here...
        //Let's test to see if this works:
        uart_puts("\n\r");
    1c40:	80 ea       	ldi	r24, 0xA0	; 160
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>
        uart_puts(strBuffer);
    1c48:	c8 01       	movw	r24, r16
    1c4a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>

        //Find the first comma:
        strPointer1 = strchr( strBuffer, ',');
    1c4e:	c8 01       	movw	r24, r16
    1c50:	6c e2       	ldi	r22, 0x2C	; 44
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strchr>

        //Copy the section of memory in the buffer that contains the time.
        memcpy( strTime, strPointer1 + 1, 6 );
    1c58:	de 01       	movw	r26, r28
    1c5a:	12 96       	adiw	r26, 0x02	; 2
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	31 96       	adiw	r30, 0x01	; 1
    1c60:	26 e0       	ldi	r18, 0x06	; 6
    1c62:	01 90       	ld	r0, Z+
    1c64:	0d 92       	st	X+, r0
    1c66:	21 50       	subi	r18, 0x01	; 1
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <getgpstime+0xb6>
        //add a null character to the end of the time string.
        strTime[6] = 0;
    1c6a:	18 86       	std	Y+8, r1	; 0x08
    1c6c:	00 e0       	ldi	r16, 0x00	; 0
    1c6e:	10 e0       	ldi	r17, 0x00	; 0



        //Find eight more commas to get the date:
        for ( int i = 0; i < 8; i++ ) {
          strPointer1 = strchr( strPointer1 + 1, ',');
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	6c e2       	ldi	r22, 0x2C	; 44
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strchr>
        strTime[6] = 0;



        //Find eight more commas to get the date:
        for ( int i = 0; i < 8; i++ ) {
    1c7a:	0f 5f       	subi	r16, 0xFF	; 255
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	08 30       	cpi	r16, 0x08	; 8
    1c80:	11 05       	cpc	r17, r1
    1c82:	b1 f7       	brne	.-20     	; 0x1c70 <getgpstime+0xc4>
          strPointer1 = strchr( strPointer1 + 1, ',');
        }

        //Copy the section of memory in the buffer that contains the date.
        memcpy( strDate, strPointer1 + 1, 6 );
    1c84:	de 01       	movw	r26, r28
    1c86:	19 96       	adiw	r26, 0x09	; 9
    1c88:	fc 01       	movw	r30, r24
    1c8a:	31 96       	adiw	r30, 0x01	; 1
    1c8c:	86 e0       	ldi	r24, 0x06	; 6
    1c8e:	01 90       	ld	r0, Z+
    1c90:	0d 92       	st	X+, r0
    1c92:	81 50       	subi	r24, 0x01	; 1
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <getgpstime+0xe2>
        //add a null character to the end of the date string.
        strDate[6] = 0;
    1c96:	1f 86       	std	Y+15, r1	; 0x0f

        //The GPS unit will not have the proper date unless it has received a time update.
        //NOTE: at the turn of the century, the clock will not get updates from GPS
        //for as many years as the value of PROGRAMMING_YEAR
        if ( PROGRAMMING_YEAR <= ( ( (strDate[4] - '0') * 10 ) ) + (strDate[5] - '0') ) {
    1c98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	80 51       	subi	r24, 0x10	; 16
    1c9e:	92 40       	sbci	r25, 0x02	; 2
    1ca0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ca2:	4a e0       	ldi	r20, 0x0A	; 10
    1ca4:	24 9f       	mul	r18, r20
    1ca6:	90 01       	movw	r18, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	0a 97       	sbiw	r24, 0x0a	; 10
    1cb0:	0c f4       	brge	.+2      	; 0x1cb4 <getgpstime+0x108>
    1cb2:	6b c0       	rjmp	.+214    	; 0x1d8a <getgpstime+0x1de>
          //Get the 'old' values of the time:
          intOldHr = time_h;
    1cb4:	10 91 60 02 	lds	r17, 0x0260
          intOldMin = time_m;
    1cb8:	00 91 ee 02 	lds	r16, 0x02EE
          intOldSec = time_s;
    1cbc:	80 91 f5 02 	lds	r24, 0x02F5

          //Change the time:
          setgpstime(strTime);
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	02 96       	adiw	r24, 0x02	; 2
    1cc4:	0e 94 8a 06 	call	0xd14	; 0xd14 <setgpstime>
          //Change the date:
          setgpsdate(strDate);
    1cc8:	ce 01       	movw	r24, r28
    1cca:	09 96       	adiw	r24, 0x09	; 9
    1ccc:	0e 94 b4 06 	call	0xd68	; 0xd68 <setgpsdate>

	  //Gussy up the time and date, make the numbers come out right:
          fix_time();
    1cd0:	0e 94 d6 06 	call	0xdac	; 0xdac <fix_time>

          //Turn the two time values into minutes past midnight
          uint16_t timeMinutes = ((time_h * 60) + (time_m));
    1cd4:	30 91 60 02 	lds	r19, 0x0260
    1cd8:	80 91 ee 02 	lds	r24, 0x02EE
    1cdc:	2c e3       	ldi	r18, 0x3C	; 60
    1cde:	32 02       	muls	r19, r18
    1ce0:	d0 01       	movw	r26, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	99 27       	eor	r25, r25
    1ce6:	87 fd       	sbrc	r24, 7
    1ce8:	90 95       	com	r25
    1cea:	a8 0f       	add	r26, r24
    1cec:	b9 1f       	adc	r27, r25
          uint16_t oldTimeMinutes = ((intOldHr * 60) + (intOldMin));
    1cee:	81 2e       	mov	r8, r17
    1cf0:	99 24       	eor	r9, r9
    1cf2:	8c e3       	ldi	r24, 0x3C	; 60
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	88 9e       	mul	r8, r24
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	89 9e       	mul	r8, r25
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	98 9e       	mul	r9, r24
    1d00:	f0 0d       	add	r31, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	e0 0f       	add	r30, r16
    1d06:	f1 1d       	adc	r31, r1

          int8_t intTempHr = time_h;
    1d08:	e0 90 60 02 	lds	r14, 0x0260
          int8_t intTempMin = time_m;
    1d0c:	f0 90 ee 02 	lds	r15, 0x02EE

          //If midnight happened between the old time and the new time
          //and we did not just go back in time...
          if ( ( 0 > (int16_t)( timeMinutes - oldTimeMinutes ) )
    1d10:	ad 01       	movw	r20, r26
    1d12:	4e 1b       	sub	r20, r30
    1d14:	5f 0b       	sbc	r21, r31
    1d16:	57 ff       	sbrs	r21, 7
    1d18:	18 c0       	rjmp	.+48     	; 0x1d4a <getgpstime+0x19e>
    1d1a:	bd 01       	movw	r22, r26
    1d1c:	60 56       	subi	r22, 0x60	; 96
    1d1e:	7a 4f       	sbci	r23, 0xFA	; 250
    1d20:	6e 17       	cp	r22, r30
    1d22:	7f 07       	cpc	r23, r31
    1d24:	90 f0       	brcs	.+36     	; 0x1d4a <getgpstime+0x19e>
    1d26:	9a 01       	movw	r18, r20
    1d28:	20 56       	subi	r18, 0x60	; 96
    1d2a:	3a 4f       	sbci	r19, 0xFA	; 250
    1d2c:	37 ff       	sbrs	r19, 7
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <getgpstime+0x18a>
    1d30:	30 95       	com	r19
    1d32:	21 95       	neg	r18
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	88 27       	eor	r24, r24
    1d38:	99 27       	eor	r25, r25
    1d3a:	84 1b       	sub	r24, r20
    1d3c:	95 0b       	sbc	r25, r21
    1d3e:	28 17       	cp	r18, r24
    1d40:	39 07       	cpc	r19, r25
    1d42:	1c f4       	brge	.+6      	; 0x1d4a <getgpstime+0x19e>
               && ( (timeMinutes + 1440) >= oldTimeMinutes )
               && ( abs( timeMinutes + 1440 - oldTimeMinutes ) < abs( timeMinutes - oldTimeMinutes ) ) ) {
            timeMinutes += 1440;
            intTempHr += 24;
    1d44:	b8 e1       	ldi	r27, 0x18	; 24
    1d46:	eb 0e       	add	r14, r27
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <getgpstime+0x1a0>
    1d4a:	bd 01       	movw	r22, r26
          }

          if ( timeMinutes > oldTimeMinutes ) {
    1d4c:	e6 17       	cp	r30, r22
    1d4e:	f7 07       	cpc	r31, r23
    1d50:	e0 f4       	brcc	.+56     	; 0x1d8a <getgpstime+0x1de>
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	10 e0       	ldi	r17, 0x00	; 0

            //Count backwards in time to the old time, checking the alarm for each minute.
            for ( ; intTempHr >= intOldHr; intTempHr-- ) {
    1d56:	ce 2c       	mov	r12, r14
    1d58:	dd 24       	eor	r13, r13
    1d5a:	c7 fc       	sbrc	r12, 7
    1d5c:	d0 94       	com	r13
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <getgpstime+0x1d2>
              for ( ; intTempMin >= 0; intTempMin-- ) {
                check_alarm( (uint8_t)intTempHr, (uint8_t)intTempMin, 0 );
    1d60:	8b 2d       	mov	r24, r11
    1d62:	6f 2d       	mov	r22, r15
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 25 0a 	call	0x144a	; 0x144a <check_alarm>

          if ( timeMinutes > oldTimeMinutes ) {

            //Count backwards in time to the old time, checking the alarm for each minute.
            for ( ; intTempHr >= intOldHr; intTempHr-- ) {
              for ( ; intTempMin >= 0; intTempMin-- ) {
    1d6a:	fa 94       	dec	r15
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <getgpstime+0x1c6>
                check_alarm( (uint8_t)intTempHr, (uint8_t)intTempMin, 0 );
    1d6e:	be 2c       	mov	r11, r14
    1d70:	b0 1a       	sub	r11, r16

          if ( timeMinutes > oldTimeMinutes ) {

            //Count backwards in time to the old time, checking the alarm for each minute.
            for ( ; intTempHr >= intOldHr; intTempHr-- ) {
              for ( ; intTempMin >= 0; intTempMin-- ) {
    1d72:	f7 fe       	sbrs	r15, 7
    1d74:	f5 cf       	rjmp	.-22     	; 0x1d60 <getgpstime+0x1b4>
    1d76:	0f 5f       	subi	r16, 0xFF	; 255
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	7b e3       	ldi	r23, 0x3B	; 59
    1d7c:	f7 2e       	mov	r15, r23
          }

          if ( timeMinutes > oldTimeMinutes ) {

            //Count backwards in time to the old time, checking the alarm for each minute.
            for ( ; intTempHr >= intOldHr; intTempHr-- ) {
    1d7e:	c6 01       	movw	r24, r12
    1d80:	80 1b       	sub	r24, r16
    1d82:	91 0b       	sbc	r25, r17
    1d84:	88 15       	cp	r24, r8
    1d86:	99 05       	cpc	r25, r9
    1d88:	94 f7       	brge	.-28     	; 0x1d6e <getgpstime+0x1c2>
          }

        }

        //We've done what we needed to do, so start over.
        memset( strBuffer, 0, BUFFERSIZE );
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	e1 e6       	ldi	r30, 0x61	; 97
    1d8e:	f2 e0       	ldi	r31, 0x02	; 2
    1d90:	df 01       	movw	r26, r30
    1d92:	1d 92       	st	X+, r1
    1d94:	8a 95       	dec	r24
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <getgpstime+0x1e6>
        intBufferStatus = 0;
    1d98:	10 92 4c 02 	sts	0x024C, r1
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <getgpstime+0x202>
        return;
      }
    }
    //If nothing else was found, add to the buffer.
    else {
      strncat(strBuffer, &charReceived, 1);
    1d9e:	c8 01       	movw	r24, r16
    1da0:	be 01       	movw	r22, r28
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <strncat>
    }


  }

}
    1dae:	2f 96       	adiw	r28, 0x0f	; 15
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	9f 90       	pop	r9
    1dce:	8f 90       	pop	r8
    1dd0:	08 95       	ret

00001dd2 <speaker_init>:
/**************************** SPEAKER *****************************/
// Set up the speaker to prepare for beeping!
void speaker_init(void) {

  // read the preferences for high/low volume
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1dda:	80 93 e3 02 	sts	0x02E3, r24

  // We use the built-in fast PWM, 8 bit timer
  PORTB |= _BV(SPK1) | _BV(SPK2); 
    1dde:	85 b1       	in	r24, 0x05	; 5
    1de0:	86 60       	ori	r24, 0x06	; 6
    1de2:	85 b9       	out	0x05, r24	; 5

  // Turn on PWM outputs for both pins
  TCCR1A = _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
    1de4:	82 e3       	ldi	r24, 0x32	; 50
    1de6:	80 93 80 00 	sts	0x0080, r24
  if (volume) {
    1dea:	80 91 e3 02 	lds	r24, 0x02E3
    1dee:	88 23       	and	r24, r24
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <speaker_init+0x2a>
    TCCR1A |= _BV(COM1A1);
    1df2:	80 91 80 00 	lds	r24, 0x0080
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	80 93 80 00 	sts	0x0080, r24
  } 
  TCCR1B = _BV(WGM13) | _BV(WGM12);
    1dfc:	88 e1       	ldi	r24, 0x18	; 24
    1dfe:	80 93 81 00 	sts	0x0081, r24

  // start at 4khz:  250 * 8 multiplier * 4000 = 8mhz
  ICR1 = 250;
    1e02:	8a ef       	ldi	r24, 0xFA	; 250
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	90 93 87 00 	sts	0x0087, r25
    1e0a:	80 93 86 00 	sts	0x0086, r24
  OCR1B = OCR1A = ICR1 / 2;
    1e0e:	80 91 86 00 	lds	r24, 0x0086
    1e12:	90 91 87 00 	lds	r25, 0x0087
    1e16:	96 95       	lsr	r25
    1e18:	87 95       	ror	r24
    1e1a:	90 93 89 00 	sts	0x0089, r25
    1e1e:	80 93 88 00 	sts	0x0088, r24
    1e22:	80 91 88 00 	lds	r24, 0x0088
    1e26:	90 91 89 00 	lds	r25, 0x0089
    1e2a:	90 93 8b 00 	sts	0x008B, r25
    1e2e:	80 93 8a 00 	sts	0x008A, r24
}
    1e32:	08 95       	ret

00001e34 <clock_init>:

/**************************** RTC & ALARM *****************************/
void clock_init(void) {
  // we store the time in EEPROM when switching from power modes so its
  // reasonable to start with whats in memory
  time_h = eeprom_read_byte((uint8_t *)EE_HOUR) % 24;
    1e34:	84 e0       	ldi	r24, 0x04	; 4
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e3c:	68 e1       	ldi	r22, 0x18	; 24
    1e3e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e42:	90 93 60 02 	sts	0x0260, r25
  time_m = eeprom_read_byte((uint8_t *)EE_MIN) % 60;
    1e46:	85 e0       	ldi	r24, 0x05	; 5
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e4e:	6c e3       	ldi	r22, 0x3C	; 60
    1e50:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e54:	90 93 ee 02 	sts	0x02EE, r25
  time_s = eeprom_read_byte((uint8_t *)EE_SEC) % 60;
    1e58:	86 e0       	ldi	r24, 0x06	; 6
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e60:	6c e3       	ldi	r22, 0x3C	; 60
    1e62:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e66:	90 93 f5 02 	sts	0x02F5, r25
  time_m = TIMEMIN;
  time_s = TIMESEC + 10;
  */

  // Set up the stored alarm time and date
  alarm_m = eeprom_read_byte((uint8_t *)EE_ALARM_MIN) % 60;
    1e6a:	88 e0       	ldi	r24, 0x08	; 8
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e72:	6c e3       	ldi	r22, 0x3C	; 60
    1e74:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e78:	90 93 e2 02 	sts	0x02E2, r25
  alarm_h = eeprom_read_byte((uint8_t *)EE_ALARM_HOUR) % 24;
    1e7c:	87 e0       	ldi	r24, 0x07	; 7
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e84:	68 e1       	ldi	r22, 0x18	; 24
    1e86:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e8a:	90 93 f0 02 	sts	0x02F0, r25

  date_y = eeprom_read_byte((uint8_t *)EE_YEAR) % 100;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1e96:	64 e6       	ldi	r22, 0x64	; 100
    1e98:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1e9c:	90 93 e1 02 	sts	0x02E1, r25
  date_m = eeprom_read_byte((uint8_t *)EE_MONTH) % 13;
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1ea8:	6d e0       	ldi	r22, 0x0D	; 13
    1eaa:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__udivmodqi4>
    1eae:	90 93 f4 02 	sts	0x02F4, r25
  date_d = eeprom_read_byte((uint8_t *)EE_DAY) % 32;
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1eba:	8f 71       	andi	r24, 0x1F	; 31
    1ebc:	80 93 e4 02 	sts	0x02E4, r24

  restored = 1;
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	90 93 4b 02 	sts	0x024B, r25

  // Turn on the RTC by selecting the external 32khz crystal
  // 32.768 / 128 = 256 which is exactly an 8-bit timer overflow
  ASSR |= _BV(AS2); // use crystal
    1ec6:	e6 eb       	ldi	r30, 0xB6	; 182
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	80 83       	st	Z, r24
  TCCR2B = _BV(CS22) | _BV(CS20); // div by 128
    1ed0:	85 e0       	ldi	r24, 0x05	; 5
    1ed2:	80 93 b1 00 	sts	0x00B1, r24
  // We will overflow once a second, and call an interrupt

  // enable interrupt
  TIMSK2 = _BV(TOIE2);
    1ed6:	90 93 70 00 	sts	0x0070, r25

  // enable all interrupts!
  sei();
    1eda:	78 94       	sei
}
    1edc:	08 95       	ret

00001ede <set_region>:
}




void set_region(void) {
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    1ee2:	8a e0       	ldi	r24, 0x0A	; 10
    1ee4:	80 93 5b 02 	sts	0x025B, r24
  region = eeprom_read_byte((uint8_t *)EE_REGION);
    1ee8:	8b e0       	ldi	r24, 0x0B	; 11
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1ef0:	80 93 48 02 	sts	0x0248, r24
    1ef4:	10 e0       	ldi	r17, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1ef6:	0a e0       	ldi	r16, 0x0A	; 10
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <set_region+0x1e>

void set_region(void) {
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
  region = eeprom_read_byte((uint8_t *)EE_REGION);
    1efa:	10 e0       	ldi	r17, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
    1efc:	80 91 58 02 	lds	r24, 0x0258
    1f00:	88 23       	and	r24, r24
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <set_region+0x2e>
    1f04:	80 91 59 02 	lds	r24, 0x0259
    1f08:	88 23       	and	r24, r24
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <set_region+0x34>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1f0c:	00 93 5b 02 	sts	0x025B, r16
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <set_region+0x3c>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1f12:	80 91 5b 02 	lds	r24, 0x025B
    1f16:	88 23       	and	r24, r24
    1f18:	c9 f0       	breq	.+50     	; 0x1f4c <set_region+0x6e>
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
    1f1a:	80 91 58 02 	lds	r24, 0x0258
    1f1e:	80 fd       	sbrc	r24, 0
    1f20:	38 c0       	rjmp	.+112    	; 0x1f92 <set_region+0xb4>
      return;
    }
    if (just_pressed & 0x2) {
    1f22:	80 91 58 02 	lds	r24, 0x0258
    1f26:	81 ff       	sbrs	r24, 1
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <set_region+0x74>
      just_pressed = 0;
    1f2a:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    1f2e:	11 23       	and	r17, r17
    1f30:	69 f4       	brne	.+26     	; 0x1f4c <set_region+0x6e>
	// start!
	mode = SET_REG;
	// display region
	if (region == REGION_US) {
    1f32:	80 91 48 02 	lds	r24, 0x0248
    1f36:	88 23       	and	r24, r24
    1f38:	19 f4       	brne	.+6      	; 0x1f40 <set_region+0x62>
	  display_str("usa-12hr");
    1f3a:	83 ea       	ldi	r24, 0xA3	; 163
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <set_region+0x66>
	} else {
	  display_str("eur-24hr");
    1f40:	8c ea       	ldi	r24, 0xAC	; 172
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
    1f48:	11 e0       	ldi	r17, 0x01	; 1
    1f4a:	03 c0       	rjmp	.+6      	; 0x1f52 <set_region+0x74>
	}
      } else {	
	displaymode = SHOW_TIME;
    1f4c:	10 92 f3 02 	sts	0x02F3, r1
    1f50:	20 c0       	rjmp	.+64     	; 0x1f92 <set_region+0xb4>
	return;
      }
    }
    if (just_pressed & 0x4) {
    1f52:	80 91 58 02 	lds	r24, 0x0258
    1f56:	82 ff       	sbrs	r24, 2
    1f58:	d1 cf       	rjmp	.-94     	; 0x1efc <set_region+0x1e>
      just_pressed = 0;
    1f5a:	10 92 58 02 	sts	0x0258, r1
      if (mode == SET_REG) {
    1f5e:	11 30       	cpi	r17, 0x01	; 1
    1f60:	61 f6       	brne	.-104    	; 0x1efa <set_region+0x1c>
	region = !region;
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	80 91 48 02 	lds	r24, 0x0248
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <set_region+0x90>
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	90 93 48 02 	sts	0x0248, r25
	if (region == REGION_US) {
    1f72:	99 23       	and	r25, r25
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <set_region+0x9e>
	  display_str("usa-12hr");
    1f76:	83 ea       	ldi	r24, 0xA3	; 163
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <set_region+0xa2>
	} else {
	  display_str("eur-24hr");
    1f7c:	8c ea       	ldi	r24, 0xAC	; 172
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	}
	eeprom_write_byte((uint8_t *)EE_REGION, region);
    1f84:	8b e0       	ldi	r24, 0x0B	; 11
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	60 91 48 02 	lds	r22, 0x0248
    1f8c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
    1f90:	b5 cf       	rjmp	.-150    	; 0x1efc <set_region+0x1e>
      }
    }
  }
}
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <set_volume>:
  display[7] = pgm_read_byte(numbertable_p + (brightness / 10)) | 0x1;
  display[8] = pgm_read_byte(numbertable_p + (brightness % 10)) | 0x1;
  set_vfd_brightness(brightness);
}

void set_volume(void) {
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;
  uint8_t volume;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    1fa0:	8a e0       	ldi	r24, 0x0A	; 10
    1fa2:	80 93 5b 02 	sts	0x025B, r24
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);
    1fa6:	8a e0       	ldi	r24, 0x0A	; 10
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    1fae:	f8 2e       	mov	r15, r24
    1fb0:	00 e0       	ldi	r16, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1fb2:	fa e0       	ldi	r31, 0x0A	; 10
    1fb4:	ef 2e       	mov	r14, r31
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <set_volume+0x22>
void set_volume(void) {
  uint8_t mode = SHOW_MENU;
  uint8_t volume;

  timeoutcounter = INACTIVITYTIMEOUT;;  
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);
    1fb8:	00 e0       	ldi	r16, 0x00	; 0

  while (1) {
    if (just_pressed || pressed) {
    1fba:	80 91 58 02 	lds	r24, 0x0258
    1fbe:	88 23       	and	r24, r24
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <set_volume+0x32>
    1fc2:	80 91 59 02 	lds	r24, 0x0259
    1fc6:	88 23       	and	r24, r24
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <set_volume+0x38>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1fca:	e0 92 5b 02 	sts	0x025B, r14
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <set_volume+0x40>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1fd0:	80 91 5b 02 	lds	r24, 0x025B
    1fd4:	88 23       	and	r24, r24
    1fd6:	69 f1       	breq	.+90     	; 0x2032 <set_volume+0x9a>
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
    1fd8:	80 91 58 02 	lds	r24, 0x0258
    1fdc:	80 fd       	sbrc	r24, 0
    1fde:	66 c0       	rjmp	.+204    	; 0x20ac <set_volume+0x114>
      return;
    }
    if (just_pressed & 0x2) {
    1fe0:	80 91 58 02 	lds	r24, 0x0258
    1fe4:	81 ff       	sbrs	r24, 1
    1fe6:	28 c0       	rjmp	.+80     	; 0x2038 <set_volume+0xa0>
      just_pressed = 0;
    1fe8:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    1fec:	00 23       	and	r16, r16
    1fee:	09 f5       	brne	.+66     	; 0x2032 <set_volume+0x9a>
	// start!
	mode = SET_VOL;
	// display volume
	if (volume) {
    1ff0:	ff 20       	and	r15, r15
    1ff2:	51 f0       	breq	.+20     	; 0x2008 <set_volume+0x70>
	  display_str("vol high");
    1ff4:	85 eb       	ldi	r24, 0xB5	; 181
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	  display[5] |= 0x1;
    1ffc:	80 91 ea 02 	lds	r24, 0x02EA
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	80 93 ea 02 	sts	0x02EA, r24
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <set_volume+0x78>
	} else {
	  display_str("vol  low");
    2008:	8e eb       	ldi	r24, 0xBE	; 190
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	}
	display[6] |= 0x1;
    2010:	80 91 eb 02 	lds	r24, 0x02EB
    2014:	81 60       	ori	r24, 0x01	; 1
    2016:	80 93 eb 02 	sts	0x02EB, r24
	display[7] |= 0x1;
    201a:	80 91 ec 02 	lds	r24, 0x02EC
    201e:	81 60       	ori	r24, 0x01	; 1
    2020:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    2024:	80 91 ed 02 	lds	r24, 0x02ED
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	80 93 ed 02 	sts	0x02ED, r24
    202e:	01 e0       	ldi	r16, 0x01	; 1
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <set_volume+0xa0>
      } else {	
	displaymode = SHOW_TIME;
    2032:	10 92 f3 02 	sts	0x02F3, r1
    2036:	3a c0       	rjmp	.+116    	; 0x20ac <set_volume+0x114>
	return;
      }
    }
    if (just_pressed & 0x4) {
    2038:	80 91 58 02 	lds	r24, 0x0258
    203c:	82 ff       	sbrs	r24, 2
    203e:	bd cf       	rjmp	.-134    	; 0x1fba <set_volume+0x22>
      just_pressed = 0;
    2040:	10 92 58 02 	sts	0x0258, r1
      if (mode == SET_VOL) {
    2044:	01 30       	cpi	r16, 0x01	; 1
    2046:	09 f0       	breq	.+2      	; 0x204a <set_volume+0xb2>
    2048:	b7 cf       	rjmp	.-146    	; 0x1fb8 <set_volume+0x20>
	volume = !volume;
    204a:	10 e0       	ldi	r17, 0x00	; 0
    204c:	ff 20       	and	r15, r15
    204e:	09 f4       	brne	.+2      	; 0x2052 <set_volume+0xba>
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	f1 2e       	mov	r15, r17
	if (volume) {
    2054:	11 23       	and	r17, r17
    2056:	51 f0       	breq	.+20     	; 0x206c <set_volume+0xd4>
	  display_str("vol high");
    2058:	85 eb       	ldi	r24, 0xB5	; 181
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	  display[5] |= 0x1;
    2060:	80 91 ea 02 	lds	r24, 0x02EA
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	80 93 ea 02 	sts	0x02EA, r24
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <set_volume+0xdc>
	} else {
	  display_str("vol  low");
    206c:	8e eb       	ldi	r24, 0xBE	; 190
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	}
	display[6] |= 0x1;
    2074:	80 91 eb 02 	lds	r24, 0x02EB
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	80 93 eb 02 	sts	0x02EB, r24
	display[7] |= 0x1;
    207e:	80 91 ec 02 	lds	r24, 0x02EC
    2082:	81 60       	ori	r24, 0x01	; 1
    2084:	80 93 ec 02 	sts	0x02EC, r24
	display[8] |= 0x1;
    2088:	80 91 ed 02 	lds	r24, 0x02ED
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	80 93 ed 02 	sts	0x02ED, r24
	eeprom_write_byte((uint8_t *)EE_VOLUME, volume);
    2092:	8a e0       	ldi	r24, 0x0A	; 10
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	61 2f       	mov	r22, r17
    2098:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	speaker_init();
    209c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <speaker_init>
	beep(4000, 1);
    20a0:	80 ea       	ldi	r24, 0xA0	; 160
    20a2:	9f e0       	ldi	r25, 0x0F	; 15
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <beep>
    20aa:	87 cf       	rjmp	.-242    	; 0x1fba <set_volume+0x22>
      }
    }
  }
}
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	08 95       	ret

000020b6 <wakeup>:
  CLKPR = 0;
  PORTC &= ~_BV(4);
}

 void wakeup(void) {
   if (!sleepmode)
    20b6:	80 91 49 02 	lds	r24, 0x0249
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <wakeup+0xa>
    20be:	40 c0       	rjmp	.+128    	; 0x2140 <wakeup+0x8a>
     return;
   CLKPR = _BV(CLKPCE);
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	80 93 61 00 	sts	0x0061, r24
   CLKPR = 0;
    20c6:	10 92 61 00 	sts	0x0061, r1
   DEBUGP("waketime");
    20ca:	80 e3       	ldi	r24, 0x30	; 48
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
   sleepmode = 0;
    20d4:	10 92 49 02 	sts	0x0249, r1
    20d8:	80 e4       	ldi	r24, 0x40	; 64
    20da:	9c e9       	ldi	r25, 0x9C	; 156
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <wakeup+0x26>
   // plugged in
   // wait to verify
   _delay_ms(20);
   if (ACSR & _BV(ACO)) 
    20e0:	00 b6       	in	r0, 0x30	; 48
    20e2:	05 fc       	sbrc	r0, 5
    20e4:	2d c0       	rjmp	.+90     	; 0x2140 <wakeup+0x8a>
     return;
   
   // turn on pullups
   initbuttons();
    20e6:	0e 94 07 01 	call	0x20e	; 0x20e <initbuttons>

#ifdef FEATURE_AUTODIM
   dimmer_init();
    20ea:	0e 94 a2 01 	call	0x344	; 0x344 <dimmer_init>
#endif

   // turn on boost
   brightness_level = eeprom_read_byte((uint8_t *)EE_BRIGHT);
    20ee:	89 e0       	ldi	r24, 0x09	; 9
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    20f6:	80 93 f1 02 	sts	0x02F1, r24
   boost_init(brightness_level);
    20fa:	80 91 f1 02 	lds	r24, 0x02F1
    20fe:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <boost_init>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    2102:	81 e5       	ldi	r24, 0x51	; 81
    2104:	8c bd       	out	0x2c, r24	; 44

   // turn on vfd control
   vfd_init();

   // turn on display
   VFDSWITCH_PORT &= ~_BV(VFDSWITCH); 
    2106:	5b 98       	cbi	0x0b, 3	; 11
   VFDBLANK_PORT &= ~_BV(VFDBLANK);
    2108:	43 98       	cbi	0x08, 3	; 8
   volume = eeprom_read_byte((uint8_t *)EE_VOLUME); // reset
    210a:	8a e0       	ldi	r24, 0x0A	; 10
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    2112:	80 93 e3 02 	sts	0x02E3, r24
   
   speaker_init();
    2116:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <speaker_init>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    211a:	a8 95       	wdr
   
   speaker_init();

   kickthedog();

   setalarmstate();
    211c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <setalarmstate>

   // wake up sound
   beep(880, 1);
    2120:	80 e7       	ldi	r24, 0x70	; 112
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <beep>
   beep(1760, 1);
    212a:	80 ee       	ldi	r24, 0xE0	; 224
    212c:	96 e0       	ldi	r25, 0x06	; 6
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <beep>
   beep(3520, 1);
    2134:	80 ec       	ldi	r24, 0xC0	; 192
    2136:	9d e0       	ldi	r25, 0x0D	; 13
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <beep>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    213e:	a8 95       	wdr
    2140:	08 95       	ret

00002142 <set_timezone>:
    }
  }
}

//Function to set the time zone
void set_timezone(void) {
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <set_timezone+0xe>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
  int8_t hour = intTimeZoneHour;
    2154:	00 91 44 02 	lds	r16, 0x0244
  uint8_t min = intTimeZoneMin;
    2158:	f0 90 4d 02 	lds	r15, 0x024D
  uint8_t mode = SHOW_MENU;
  timeoutcounter = INACTIVITYTIMEOUT;
    215c:	8a e0       	ldi	r24, 0x0A	; 10
    215e:	80 93 5b 02 	sts	0x025B, r24
    2162:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    if (just_pressed & 0x1) { // mode change
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
    2164:	aa e0       	ldi	r26, 0x0A	; 10
    2166:	ea 2e       	mov	r14, r26
  uint8_t min = intTimeZoneMin;
  uint8_t mode = SHOW_MENU;
  timeoutcounter = INACTIVITYTIMEOUT;

  while (1) {
    if (just_pressed & 0x1) { // mode change
    2168:	80 91 58 02 	lds	r24, 0x0258
    216c:	80 fd       	sbrc	r24, 0
    216e:	b3 c0       	rjmp	.+358    	; 0x22d6 <set_timezone+0x194>
      return;
    }
    if (just_pressed || pressed) {
    2170:	80 91 58 02 	lds	r24, 0x0258
    2174:	88 23       	and	r24, r24
    2176:	21 f4       	brne	.+8      	; 0x2180 <set_timezone+0x3e>
    2178:	80 91 59 02 	lds	r24, 0x0259
    217c:	88 23       	and	r24, r24
    217e:	19 f0       	breq	.+6      	; 0x2186 <set_timezone+0x44>
      timeoutcounter = INACTIVITYTIMEOUT;  
    2180:	e0 92 5b 02 	sts	0x025B, r14
    2184:	04 c0       	rjmp	.+8      	; 0x218e <set_timezone+0x4c>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    2186:	80 91 5b 02 	lds	r24, 0x025B
    218a:	88 23       	and	r24, r24
    218c:	91 f1       	breq	.+100    	; 0x21f2 <set_timezone+0xb0>
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x2) {
    218e:	80 91 58 02 	lds	r24, 0x0258
    2192:	81 ff       	sbrs	r24, 1
    2194:	31 c0       	rjmp	.+98     	; 0x21f8 <set_timezone+0xb6>
      just_pressed = 0;
    2196:	10 92 58 02 	sts	0x0258, r1
      if (mode == SHOW_MENU) {
    219a:	11 23       	and	r17, r17
    219c:	a1 f4       	brne	.+40     	; 0x21c6 <set_timezone+0x84>
	// ok now its selected
	mode = SET_HOUR;
	display_timezone(hour, min);
    219e:	80 2f       	mov	r24, r16
    21a0:	99 27       	eor	r25, r25
    21a2:	87 fd       	sbrc	r24, 7
    21a4:	90 95       	com	r25
    21a6:	6f 2d       	mov	r22, r15
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	0e 94 66 03 	call	0x6cc	; 0x6cc <display_timezone>
	display[1] |= 0x1;
    21ae:	80 91 e6 02 	lds	r24, 0x02E6
    21b2:	81 60       	ori	r24, 0x01	; 1
    21b4:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;	
    21b8:	80 91 e7 02 	lds	r24, 0x02E7
    21bc:	81 60       	ori	r24, 0x01	; 1
    21be:	80 93 e7 02 	sts	0x02E7, r24
    21c2:	11 e0       	ldi	r17, 0x01	; 1
    21c4:	19 c0       	rjmp	.+50     	; 0x21f8 <set_timezone+0xb6>
      } else if (mode == SET_HOUR) {
    21c6:	11 30       	cpi	r17, 0x01	; 1
    21c8:	a1 f4       	brne	.+40     	; 0x21f2 <set_timezone+0xb0>
	mode = SET_MIN;
	display_timezone(hour, min);
    21ca:	80 2f       	mov	r24, r16
    21cc:	99 27       	eor	r25, r25
    21ce:	87 fd       	sbrc	r24, 7
    21d0:	90 95       	com	r25
    21d2:	6f 2d       	mov	r22, r15
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	0e 94 66 03 	call	0x6cc	; 0x6cc <display_timezone>
	display[4] |= 0x1;
    21da:	80 91 e9 02 	lds	r24, 0x02E9
    21de:	81 60       	ori	r24, 0x01	; 1
    21e0:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    21e4:	80 91 ea 02 	lds	r24, 0x02EA
    21e8:	81 60       	ori	r24, 0x01	; 1
    21ea:	80 93 ea 02 	sts	0x02EA, r24
    21ee:	12 e0       	ldi	r17, 0x02	; 2
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <set_timezone+0xb6>
      } else {
	// done!
	displaymode = SHOW_TIME;
    21f2:	10 92 f3 02 	sts	0x02F3, r1
    21f6:	6f c0       	rjmp	.+222    	; 0x22d6 <set_timezone+0x194>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    21f8:	80 91 58 02 	lds	r24, 0x0258
    21fc:	82 fd       	sbrc	r24, 2
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <set_timezone+0xc6>
    2200:	80 91 59 02 	lds	r24, 0x0259
    2204:	82 ff       	sbrs	r24, 2
    2206:	b0 cf       	rjmp	.-160    	; 0x2168 <set_timezone+0x26>
      just_pressed = 0;
    2208:	10 92 58 02 	sts	0x0258, r1
      
      if (mode == SET_HOUR) {
    220c:	11 30       	cpi	r17, 0x01	; 1
    220e:	79 f5       	brne	.+94     	; 0x226e <set_timezone+0x12c>
	hour = ( ( hour + 1 + 12 ) % 25 ) - 12;
    2210:	80 2f       	mov	r24, r16
    2212:	99 27       	eor	r25, r25
    2214:	87 fd       	sbrc	r24, 7
    2216:	90 95       	com	r25
    2218:	0d 96       	adiw	r24, 0x0d	; 13
    221a:	69 e1       	ldi	r22, 0x19	; 25
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    2222:	08 2f       	mov	r16, r24
    2224:	0c 50       	subi	r16, 0x0C	; 12
	display_timezone(hour, min);
    2226:	80 2f       	mov	r24, r16
    2228:	99 27       	eor	r25, r25
    222a:	87 fd       	sbrc	r24, 7
    222c:	90 95       	com	r25
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	6f 2d       	mov	r22, r15
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	0e 94 66 03 	call	0x6cc	; 0x6cc <display_timezone>
	display[1] |= 0x1;
    223a:	80 91 e6 02 	lds	r24, 0x02E6
    223e:	81 60       	ori	r24, 0x01	; 1
    2240:	80 93 e6 02 	sts	0x02E6, r24
	display[2] |= 0x1;
    2244:	80 91 e7 02 	lds	r24, 0x02E7
    2248:	81 60       	ori	r24, 0x01	; 1
    224a:	80 93 e7 02 	sts	0x02E7, r24
        intTimeZoneHour = hour;
    224e:	00 93 44 02 	sts	0x0244, r16
	eeprom_write_byte((uint8_t *)EE_ZONE_HOUR, hour);
    2252:	8d e0       	ldi	r24, 0x0D	; 13
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	60 2f       	mov	r22, r16
    2258:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
	//Debugging:
	uart_puts("\n\rTimezone offset hour:\t");
    225c:	87 ec       	ldi	r24, 0xC7	; 199
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>
	uart_putw_dec(hour);
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	0e 94 b5 13 	call	0x276a	; 0x276a <uart_putw_dec>
    226c:	23 c0       	rjmp	.+70     	; 0x22b4 <set_timezone+0x172>
      }
      if (mode == SET_MIN) {
    226e:	12 30       	cpi	r17, 0x02	; 2
    2270:	09 f5       	brne	.+66     	; 0x22b4 <set_timezone+0x172>
	min = ( min + 1 ) % 60;
    2272:	8f 2d       	mov	r24, r15
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	6c e3       	ldi	r22, 0x3C	; 60
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
    2280:	f8 2e       	mov	r15, r24
	display_timezone(hour, min);
    2282:	80 2f       	mov	r24, r16
    2284:	99 27       	eor	r25, r25
    2286:	87 fd       	sbrc	r24, 7
    2288:	90 95       	com	r25
    228a:	6f 2d       	mov	r22, r15
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	0e 94 66 03 	call	0x6cc	; 0x6cc <display_timezone>
	display[4] |= 0x1;
    2292:	80 91 e9 02 	lds	r24, 0x02E9
    2296:	81 60       	ori	r24, 0x01	; 1
    2298:	80 93 e9 02 	sts	0x02E9, r24
	display[5] |= 0x1;
    229c:	80 91 ea 02 	lds	r24, 0x02EA
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	80 93 ea 02 	sts	0x02EA, r24
        intTimeZoneMin = min;
    22a6:	f0 92 4d 02 	sts	0x024D, r15
	eeprom_write_byte((uint8_t *)EE_ZONE_MIN, min);
    22aa:	8e e0       	ldi	r24, 0x0E	; 14
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	6f 2d       	mov	r22, r15
    22b0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__eewr_byte_m168>
      }
      
      if (pressed & 0x4)
    22b4:	80 91 59 02 	lds	r24, 0x0259
    22b8:	82 ff       	sbrs	r24, 2
    22ba:	56 cf       	rjmp	.-340    	; 0x2168 <set_timezone+0x26>

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    22bc:	78 94       	sei

  milliseconds = 0;
    22be:	10 92 56 02 	sts	0x0256, r1
    22c2:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    22c6:	80 91 55 02 	lds	r24, 0x0255
    22ca:	90 91 56 02 	lds	r25, 0x0256
    22ce:	8b 34       	cpi	r24, 0x4B	; 75
    22d0:	91 05       	cpc	r25, r1
    22d2:	c8 f3       	brcs	.-14     	; 0x22c6 <set_timezone+0x184>
    22d4:	49 cf       	rjmp	.-366    	; 0x2168 <set_timezone+0x26>
      
      if (pressed & 0x4)
	delayms(75);
    }
  }
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	08 95       	ret

000022e8 <main>:
    PCMSK2 = _BV(PCINT21) | _BV(PCINT20);    
}



int main(void) {
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
  //  uint8_t i;
  uint8_t mcustate;

  // turn boost off
  TCCR0B = 0;
    22f8:	15 bc       	out	0x25, r1	; 37
  BOOST_DDR |= _BV(BOOST);
    22fa:	56 9a       	sbi	0x0a, 6	; 10
  BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
    22fc:	5e 98       	cbi	0x0b, 6	; 11

  // check if we were reset
  mcustate = MCUSR;
    22fe:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    2300:	14 be       	out	0x34, r1	; 52

  uart_putw_hex(mcustate);
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 98 13 	call	0x2730	; 0x2730 <uart_putw_hex>

  wdt_disable();
    2308:	88 e1       	ldi	r24, 0x18	; 24
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	80 93 60 00 	sts	0x0060, r24
    2312:	10 92 60 00 	sts	0x0060, r1
    2316:	0f be       	out	0x3f, r0	; 63
  // now turn it back on... 2 second time out
  //WDTCSR |= _BV(WDP0) | _BV(WDP1) | _BV(WDP2);
  //WDTCSR = _BV(WDE);
  wdt_enable(WDTO_2S);
    2318:	2f e0       	ldi	r18, 0x0F	; 15
    231a:	88 e1       	ldi	r24, 0x18	; 24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	a8 95       	wdr
    2324:	80 93 60 00 	sts	0x0060, r24
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	20 93 60 00 	sts	0x0060, r18
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    232e:	a8 95       	wdr
  wdt_enable(WDTO_2S);
  kickthedog();

  // we lost power at some point so lets alert the user
  // that the time may be wrong (the clock still works)
  timeunknown = 1;
    2330:	11 e0       	ldi	r17, 0x01	; 1
    2332:	10 93 4a 02 	sts	0x024A, r17

  // have we read the time & date from eeprom?
  restored = 0;
    2336:	10 92 4b 02 	sts	0x024B, r1

  // setup uart
  uart_init(BRRL_4800);
    233a:	87 e6       	ldi	r24, 0x67	; 103
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 1f 13 	call	0x263e	; 0x263e <uart_init>

  //DEBUGP("VFD Clock");
  DEBUGP("!");
    2342:	8e e2       	ldi	r24, 0x2E	; 46
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
  uart_puts("\n\rHello World!\n\r");
    234c:	80 ee       	ldi	r24, 0xE0	; 224
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>
  uart_puts("\n\rBuffer size is:\t");
    2354:	81 ef       	ldi	r24, 0xF1	; 241
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>
  uart_putw_dec(BUFFERSIZE);
    235c:	80 e8       	ldi	r24, 0x80	; 128
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 b5 13 	call	0x276a	; 0x276a <uart_putw_dec>
  uart_puts("\n\r");
    2364:	80 ea       	ldi	r24, 0xA0	; 160
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	0e 94 62 13 	call	0x26c4	; 0x26c4 <uart_puts>

  //DEBUGP("turning on anacomp");
  // set up analog comparator
  ACSR = _BV(ACBG) | _BV(ACIE); // use bandgap, intr. on toggle!
    236c:	88 e4       	ldi	r24, 0x48	; 72
    236e:	80 bf       	out	0x30, r24	; 48
    2370:	80 ed       	ldi	r24, 0xD0	; 208
    2372:	97 e0       	ldi	r25, 0x07	; 7
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <main+0x8c>
  _delay_ms(1);
  // settle!
  if (ACSR & _BV(ACO)) {
    2378:	00 b6       	in	r0, 0x30	; 48
    237a:	05 fe       	sbrs	r0, 5
    237c:	0b c0       	rjmp	.+22     	; 0x2394 <main+0xac>
    // hmm we should not interrupt here
    ACSR |= _BV(ACI);
    237e:	80 b7       	in	r24, 0x30	; 48
    2380:	80 61       	ori	r24, 0x10	; 16
    2382:	80 bf       	out	0x30, r24	; 48

    // even in low power mode, we run the clock 
    DEBUGP("clock init");
    2384:	83 e2       	ldi	r24, 0x23	; 35
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    clock_init();  
    238e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <clock_init>
    2392:	60 c0       	rjmp	.+192    	; 0x2454 <main+0x16c>

  } else {
    // we aren't in low power mode so init stuff

    // init IOs
    initbuttons();
    2394:	0e 94 07 01 	call	0x20e	; 0x20e <initbuttons>
    
    VFDSWITCH_PORT &= ~_BV(VFDSWITCH);
    2398:	5b 98       	cbi	0x0b, 3	; 11
    
    DEBUGP("turning on buttons");
    239a:	80 e1       	ldi	r24, 0x10	; 16
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    // set up button interrupts
    DEBUGP("turning on alarmsw");
    23a4:	8d ef       	ldi	r24, 0xFD	; 253
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    // set off an interrupt if alarm is set or unset
    EICRA = _BV(ISC00);
    23ae:	10 93 69 00 	sts	0x0069, r17
    EIMSK = _BV(INT0);
    23b2:	1d bb       	out	0x1d, r17	; 29
  
    displaymode = SHOW_TIME;
    23b4:	10 92 f3 02 	sts	0x02F3, r1
    DEBUGP("vfd init");
    23b8:	84 ef       	ldi	r24, 0xF4	; 244
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	61 e0       	ldi	r22, 0x01	; 1
    23be:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    23c2:	81 e5       	ldi	r24, 0x51	; 81
    23c4:	8c bd       	out	0x2c, r24	; 44
    displaymode = SHOW_TIME;
    DEBUGP("vfd init");
    vfd_init();
   
#ifdef FEATURE_AUTODIM
    dimmer_init();
    23c6:	0e 94 a2 01 	call	0x344	; 0x344 <dimmer_init>
#endif

    DEBUGP("boost init");
    23ca:	89 ee       	ldi	r24, 0xE9	; 233
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    brightness_level = eeprom_read_byte((uint8_t *)EE_BRIGHT);
    23d4:	89 e0       	ldi	r24, 0x09	; 9
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    23dc:	80 93 f1 02 	sts	0x02F1, r24
    boost_init(brightness_level);
    23e0:	80 91 f1 02 	lds	r24, 0x02F1
    23e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <boost_init>
    sei();
    23e8:	78 94       	sei

    //Load and check the timezone information
    intTimeZoneHour = eeprom_read_byte((uint8_t *)EE_ZONE_HOUR);
    23ea:	8d e0       	ldi	r24, 0x0D	; 13
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    23f2:	80 93 44 02 	sts	0x0244, r24
    if ( ( 12 < intTimeZoneHour ) || ( -12 > intTimeZoneHour ) )
    23f6:	84 5f       	subi	r24, 0xF4	; 244
    23f8:	89 31       	cpi	r24, 0x19	; 25
    23fa:	10 f0       	brcs	.+4      	; 0x2400 <main+0x118>
      intTimeZoneHour = 0;
    23fc:	10 92 44 02 	sts	0x0244, r1

    intTimeZoneMin = eeprom_read_byte((uint8_t *)EE_ZONE_MIN);
    2400:	8e e0       	ldi	r24, 0x0E	; 14
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    2408:	80 93 4d 02 	sts	0x024D, r24
    if ( ( 60 < intTimeZoneMin ) || ( 0 > intTimeZoneMin ) )
    240c:	8d 33       	cpi	r24, 0x3D	; 61
    240e:	10 f0       	brcs	.+4      	; 0x2414 <main+0x12c>
      intTimeZoneMin = 0;
    2410:	10 92 4d 02 	sts	0x024D, r1

    region = eeprom_read_byte((uint8_t *)EE_REGION);
    2414:	8b e0       	ldi	r24, 0x0B	; 11
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__eerd_byte_m168>
    241c:	80 93 48 02 	sts	0x0248, r24
    
    DEBUGP("speaker init");
    2420:	8c ed       	ldi	r24, 0xDC	; 220
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    speaker_init();
    242a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <speaker_init>

    beep(4000, 1);
    242e:	80 ea       	ldi	r24, 0xA0	; 160
    2430:	9f e0       	ldi	r25, 0x0F	; 15
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <beep>

    DEBUGP("clock init");
    2438:	81 ed       	ldi	r24, 0xD1	; 209
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	61 e0       	ldi	r22, 0x01	; 1
    243e:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    clock_init();  
    2442:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <clock_init>

    DEBUGP("alarm init");
    2446:	86 ec       	ldi	r24, 0xC6	; 198
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
    setalarmstate();
    2450:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <setalarmstate>
  }
  DEBUGP("done");
    2454:	81 ec       	ldi	r24, 0xC1	; 193
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	0e 94 41 13 	call	0x2682	; 0x2682 <ROM_putstring>
      default:
	displaymode = SHOW_TIME;
      }
    } else if ((just_pressed & 0x2) || (just_pressed & 0x4)) {
      just_pressed = 0;
      displaymode = NONE;
    245e:	23 e6       	ldi	r18, 0x63	; 99
    2460:	a2 2e       	mov	r10, r18
	break;
      case (SET_DATE):
	//displaymode = SET_BRIGHTNESS;
	//display_str("set brit");
	//set_brightness();
        displaymode = SET_ZONE;
    2462:	9b e0       	ldi	r25, 0x0B	; 11
    2464:	b9 2e       	mov	r11, r25
	displaymode = SET_VOLUME;
	display_str("set vol ");
	set_volume();
	break;
      case (SET_VOLUME):
	displaymode = SET_REGION;
    2466:	88 e0       	ldi	r24, 0x08	; 8
    2468:	c8 2e       	mov	r12, r24
        displaymode = SET_BRIGHTNESS;
        display_str("set brit");
        set_brightness();
        break;
      case (SET_BRIGHTNESS):
	displaymode = SET_VOLUME;
    246a:	07 e0       	ldi	r16, 0x07	; 7
    246c:	d0 2e       	mov	r13, r16
        displaymode = SET_ZONE;
        display_str("set zone");
        set_timezone();
	break;
      case (SET_ZONE):
        displaymode = SET_BRIGHTNESS;
    246e:	16 e0       	ldi	r17, 0x06	; 6
    2470:	e1 2e       	mov	r14, r17
	display_str("set time");
	set_time();
	timeunknown = 0;
	break;
      case (SET_TIME):
	displaymode = SET_DATE;
    2472:	b5 e0       	ldi	r27, 0x05	; 5
    2474:	fb 2e       	mov	r15, r27
	displaymode = SET_ALARM;
	display_str("set alarm");
	set_alarm();
	break;
      case (SET_ALARM):
	displaymode = SET_TIME;
    2476:	03 e0       	ldi	r16, 0x03	; 3
    //DEBUGP(".");
    if (just_pressed & 0x1) {
      just_pressed = 0;
      switch(displaymode) {
      case (SHOW_TIME):
	displaymode = SET_ALARM;
    2478:	14 e0       	ldi	r17, 0x04	; 4
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    247a:	a8 95       	wdr
  DEBUGP("done");
  while (1) {
    //_delay_ms(100);
    kickthedog();
    //uart_putc_hex(ACSR);
    if (ACSR & _BV(ACO)) {
    247c:	00 b6       	in	r0, 0x30	; 48
    247e:	05 fe       	sbrs	r0, 5
    2480:	03 c0       	rjmp	.+6      	; 0x2488 <main+0x1a0>
      // DEBUGP("SLEEPYTIME");
      gotosleep();
    2482:	0e 94 da 00 	call	0x1b4	; 0x1b4 <gotosleep>
    2486:	f9 cf       	rjmp	.-14     	; 0x247a <main+0x192>
      continue;
    }
    //DEBUGP(".");
    if (just_pressed & 0x1) {
    2488:	80 91 58 02 	lds	r24, 0x0258
    248c:	80 ff       	sbrs	r24, 0
    248e:	58 c0       	rjmp	.+176    	; 0x2540 <main+0x258>
      just_pressed = 0;
    2490:	10 92 58 02 	sts	0x0258, r1
      switch(displaymode) {
    2494:	80 91 f3 02 	lds	r24, 0x02F3
    2498:	85 30       	cpi	r24, 0x05	; 5
    249a:	71 f1       	breq	.+92     	; 0x24f8 <main+0x210>
    249c:	86 30       	cpi	r24, 0x06	; 6
    249e:	38 f4       	brcc	.+14     	; 0x24ae <main+0x1c6>
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	09 f1       	breq	.+66     	; 0x24e6 <main+0x1fe>
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	a0 f4       	brcc	.+40     	; 0x24d0 <main+0x1e8>
    24a8:	88 23       	and	r24, r24
    24aa:	49 f0       	breq	.+18     	; 0x24be <main+0x1d6>
    24ac:	66 c0       	rjmp	.+204    	; 0x257a <main+0x292>
    24ae:	87 30       	cpi	r24, 0x07	; 7
    24b0:	f1 f1       	breq	.+124    	; 0x252e <main+0x246>
    24b2:	87 30       	cpi	r24, 0x07	; 7
    24b4:	98 f1       	brcs	.+102    	; 0x251c <main+0x234>
    24b6:	8b 30       	cpi	r24, 0x0B	; 11
    24b8:	09 f0       	breq	.+2      	; 0x24bc <main+0x1d4>
    24ba:	5f c0       	rjmp	.+190    	; 0x257a <main+0x292>
    24bc:	26 c0       	rjmp	.+76     	; 0x250a <main+0x222>
      case (SHOW_TIME):
	displaymode = SET_ALARM;
    24be:	10 93 f3 02 	sts	0x02F3, r17
	display_str("set alarm");
    24c2:	84 e0       	ldi	r24, 0x04	; 4
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	set_alarm();
    24ca:	0e 94 5f 09 	call	0x12be	; 0x12be <set_alarm>
    24ce:	57 c0       	rjmp	.+174    	; 0x257e <main+0x296>
	break;
      case (SET_ALARM):
	displaymode = SET_TIME;
    24d0:	00 93 f3 02 	sts	0x02F3, r16
	display_str("set time");
    24d4:	8e e0       	ldi	r24, 0x0E	; 14
    24d6:	92 e0       	ldi	r25, 0x02	; 2
    24d8:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	set_time();
    24dc:	0e 94 6d 08 	call	0x10da	; 0x10da <set_time>
	timeunknown = 0;
    24e0:	10 92 4a 02 	sts	0x024A, r1
    24e4:	4c c0       	rjmp	.+152    	; 0x257e <main+0x296>
	break;
      case (SET_TIME):
	displaymode = SET_DATE;
    24e6:	f0 92 f3 02 	sts	0x02F3, r15
	display_str("set date");
    24ea:	87 e1       	ldi	r24, 0x17	; 23
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	set_date();
    24f2:	0e 94 27 0b 	call	0x164e	; 0x164e <set_date>
    24f6:	43 c0       	rjmp	.+134    	; 0x257e <main+0x296>
	break;
      case (SET_DATE):
	//displaymode = SET_BRIGHTNESS;
	//display_str("set brit");
	//set_brightness();
        displaymode = SET_ZONE;
    24f8:	b0 92 f3 02 	sts	0x02F3, r11
        display_str("set zone");
    24fc:	80 e2       	ldi	r24, 0x20	; 32
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
        set_timezone();
    2504:	0e 94 a1 10 	call	0x2142	; 0x2142 <set_timezone>
    2508:	3a c0       	rjmp	.+116    	; 0x257e <main+0x296>
	break;
      case (SET_ZONE):
        displaymode = SET_BRIGHTNESS;
    250a:	e0 92 f3 02 	sts	0x02F3, r14
        display_str("set brit");
    250e:	89 e2       	ldi	r24, 0x29	; 41
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
        set_brightness();
    2516:	0e 94 0a 08 	call	0x1014	; 0x1014 <set_brightness>
    251a:	31 c0       	rjmp	.+98     	; 0x257e <main+0x296>
        break;
      case (SET_BRIGHTNESS):
	displaymode = SET_VOLUME;
    251c:	d0 92 f3 02 	sts	0x02F3, r13
	display_str("set vol ");
    2520:	82 e3       	ldi	r24, 0x32	; 50
    2522:	92 e0       	ldi	r25, 0x02	; 2
    2524:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	set_volume();
    2528:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <set_volume>
    252c:	28 c0       	rjmp	.+80     	; 0x257e <main+0x296>
	break;
      case (SET_VOLUME):
	displaymode = SET_REGION;
    252e:	c0 92 f3 02 	sts	0x02F3, r12
	display_str("set regn");
    2532:	8b e3       	ldi	r24, 0x3B	; 59
    2534:	92 e0       	ldi	r25, 0x02	; 2
    2536:	0e 94 b7 03 	call	0x76e	; 0x76e <display_str>
	set_region();
    253a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <set_region>
    253e:	1f c0       	rjmp	.+62     	; 0x257e <main+0x296>
	break;
	*/
      default:
	displaymode = SHOW_TIME;
      }
    } else if ((just_pressed & 0x2) || (just_pressed & 0x4)) {
    2540:	80 91 58 02 	lds	r24, 0x0258
    2544:	81 fd       	sbrc	r24, 1
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <main+0x268>
    2548:	80 91 58 02 	lds	r24, 0x0258
    254c:	82 ff       	sbrs	r24, 2
    254e:	17 c0       	rjmp	.+46     	; 0x257e <main+0x296>
      just_pressed = 0;
    2550:	10 92 58 02 	sts	0x0258, r1
      displaymode = NONE;
    2554:	a0 92 f3 02 	sts	0x02F3, r10
      display_date(DAY);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	0e 94 de 03 	call	0x7bc	; 0x7bc <display_date>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    255e:	a8 95       	wdr

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    2560:	78 94       	sei

  milliseconds = 0;
    2562:	10 92 56 02 	sts	0x0256, r1
    2566:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    256a:	80 91 55 02 	lds	r24, 0x0255
    256e:	90 91 56 02 	lds	r25, 0x0256
    2572:	8c 5d       	subi	r24, 0xDC	; 220
    2574:	95 40       	sbci	r25, 0x05	; 5
    2576:	c8 f3       	brcs	.-14     	; 0x256a <main+0x282>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void kickthedog(void) {
  wdt_reset();
    2578:	a8 95       	wdr

      kickthedog();
      delayms(1500);
      kickthedog();

      displaymode = SHOW_TIME;     
    257a:	10 92 f3 02 	sts	0x02F3, r1
//GPS serial data handling functions:

//Check to see if there is any serial data.
uint8_t gpsdataready(void) {

  return (UCSR0A & _BV(RXC0));
    257e:	80 91 c0 00 	lds	r24, 0x00C0

      displaymode = SHOW_TIME;     
    }

    //Check to see if GPS data is ready:
    if ( gpsdataready() ) {
    2582:	87 ff       	sbrs	r24, 7
    2584:	7a cf       	rjmp	.-268    	; 0x247a <main+0x192>
       getgpstime();
    2586:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <getgpstime>
    258a:	77 cf       	rjmp	.-274    	; 0x247a <main+0x192>

0000258c <__vector_1>:
    else
      display[0] &= ~0x2;
  }
}

SIGNAL(SIG_INTERRUPT0) {
    258c:	1f 92       	push	r1
    258e:	0f 92       	push	r0
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	2f 93       	push	r18
    2598:	3f 93       	push	r19
    259a:	4f 93       	push	r20
    259c:	5f 93       	push	r21
    259e:	6f 93       	push	r22
    25a0:	7f 93       	push	r23
    25a2:	8f 93       	push	r24
    25a4:	9f 93       	push	r25
    25a6:	af 93       	push	r26
    25a8:	bf 93       	push	r27
    25aa:	ef 93       	push	r30
    25ac:	ff 93       	push	r31
  EIMSK = 0;  //Disable this interrupt while we are processing it.
    25ae:	1d ba       	out	0x1d, r1	; 29
  uart_putchar('i');
    25b0:	89 e6       	ldi	r24, 0x69	; 105
    25b2:	0e 94 2c 13 	call	0x2658	; 0x2658 <uart_putchar>
  uint8_t x = ALARM_PIN & _BV(ALARM);
    25b6:	29 b1       	in	r18, 0x09	; 9
  sei();
    25b8:	78 94       	sei

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
    25ba:	78 94       	sei

  milliseconds = 0;
    25bc:	10 92 56 02 	sts	0x0256, r1
    25c0:	10 92 55 02 	sts	0x0255, r1
  while (milliseconds < ms);
    25c4:	80 91 55 02 	lds	r24, 0x0255
    25c8:	90 91 56 02 	lds	r25, 0x0256
    25cc:	0a 97       	sbiw	r24, 0x0a	; 10
    25ce:	d0 f3       	brcs	.-12     	; 0x25c4 <__vector_1+0x38>
  EIMSK = 0;  //Disable this interrupt while we are processing it.
  uart_putchar('i');
  uint8_t x = ALARM_PIN & _BV(ALARM);
  sei();
  delayms(10); // wait for debouncing
  if (x != (ALARM_PIN & _BV(ALARM)))
    25d0:	89 b1       	in	r24, 0x09	; 9
    25d2:	24 70       	andi	r18, 0x04	; 4
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	84 70       	andi	r24, 0x04	; 4
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	11 f4       	brne	.+4      	; 0x25e6 <__vector_1+0x5a>
  {
    EIMSK = _BV(INT0);
    return;
  }
  setalarmstate();
    25e2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <setalarmstate>
  EIMSK = _BV(INT0);  //And reenable it before exiting.
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	8d bb       	out	0x1d, r24	; 29
}
    25ea:	ff 91       	pop	r31
    25ec:	ef 91       	pop	r30
    25ee:	bf 91       	pop	r27
    25f0:	af 91       	pop	r26
    25f2:	9f 91       	pop	r25
    25f4:	8f 91       	pop	r24
    25f6:	7f 91       	pop	r23
    25f8:	6f 91       	pop	r22
    25fa:	5f 91       	pop	r21
    25fc:	4f 91       	pop	r20
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	0f 90       	pop	r0
    2608:	1f 90       	pop	r1
    260a:	18 95       	reti

0000260c <delay_10us>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include "util.h"

void delay_10us(uint8_t ns)
{
    260c:	06 c0       	rjmp	.+12     	; 0x261a <delay_10us+0xe>
  uint8_t i;
  
  while (ns != 0) {
    260e:	90 e0       	ldi	r25, 0x00	; 0
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    2610:	00 00       	nop
{
  uint8_t i;
  
  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    2612:	9f 5f       	subi	r25, 0xFF	; 255
    2614:	9e 31       	cpi	r25, 0x1E	; 30
    2616:	e1 f7       	brne	.-8      	; 0x2610 <delay_10us+0x4>
void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    ns--;
    2618:	81 50       	subi	r24, 0x01	; 1

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    261a:	88 23       	and	r24, r24
    261c:	c1 f7       	brne	.-16     	; 0x260e <delay_10us+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    }
  }
}
    261e:	08 95       	ret

00002620 <delay_s>:
    2620:	48 ec       	ldi	r20, 0xC8	; 200
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	09 c0       	rjmp	.+18     	; 0x2638 <delay_s+0x18>

void delay_s(uint8_t s) {
  while (s--) {
    2626:	20 e1       	ldi	r18, 0x10	; 16
    2628:	37 e2       	ldi	r19, 0x27	; 39
    262a:	fa 01       	movw	r30, r20
    262c:	31 97       	sbiw	r30, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <delay_s+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	21 50       	subi	r18, 0x01	; 1
    2632:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	d1 f7       	brne	.-12     	; 0x262a <delay_s+0xa>
    2636:	81 50       	subi	r24, 0x01	; 1
    2638:	88 23       	and	r24, r24
    263a:	a9 f7       	brne	.-22     	; 0x2626 <delay_s+0x6>
    _delay_ms(1000);
  }
}
    263c:	08 95       	ret

0000263e <uart_init>:

void uart_init(uint16_t BRR) {
  /* setup the main UART */
  UBRR0 = BRR;               // set baudrate counter
    263e:	90 93 c5 00 	sts	0x00C5, r25
    2642:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    2646:	88 e1       	ldi	r24, 0x18	; 24
    2648:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    264c:	8e e0       	ldi	r24, 0x0E	; 14
    264e:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(PD1);
    2652:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(PD0);
    2654:	50 98       	cbi	0x0a, 0	; 10

}
    2656:	08 95       	ret

00002658 <uart_putchar>:

int uart_putchar(char c)
{
    2658:	98 2f       	mov	r25, r24
  loop_until_bit_is_set(UCSR0A, UDRE0);
    265a:	80 91 c0 00 	lds	r24, 0x00C0
    265e:	85 ff       	sbrs	r24, 5
    2660:	fc cf       	rjmp	.-8      	; 0x265a <uart_putchar+0x2>
  UDR0 = c;
    2662:	90 93 c6 00 	sts	0x00C6, r25
  return 0;
}
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	08 95       	ret

0000266c <uart_getchar>:

char uart_getchar(void) {
	while (!(UCSR0A & _BV(RXC0)));
    266c:	80 91 c0 00 	lds	r24, 0x00C0
    2670:	87 ff       	sbrs	r24, 7
    2672:	fc cf       	rjmp	.-8      	; 0x266c <uart_getchar>
	return UDR0;
    2674:	80 91 c6 00 	lds	r24, 0x00C6
}
    2678:	08 95       	ret

0000267a <uart_getch>:

char uart_getch(void) {
	return (UCSR0A & _BV(RXC0));
    267a:	80 91 c0 00 	lds	r24, 0x00C0
}
    267e:	80 78       	andi	r24, 0x80	; 128
    2680:	08 95       	ret

00002682 <ROM_putstring>:

void ROM_putstring(const char *str, uint8_t nl) {
    2682:	ac 01       	movw	r20, r24
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	07 c0       	rjmp	.+14     	; 0x2696 <ROM_putstring+0x14>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2688:	80 91 c0 00 	lds	r24, 0x00C0
    268c:	85 ff       	sbrs	r24, 5
    268e:	fc cf       	rjmp	.-8      	; 0x2688 <ROM_putstring+0x6>
  UDR0 = c;
    2690:	30 93 c6 00 	sts	0x00C6, r19
}

void ROM_putstring(const char *str, uint8_t nl) {
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    2694:	2f 5f       	subi	r18, 0xFF	; 255
    2696:	fa 01       	movw	r30, r20
    2698:	e2 0f       	add	r30, r18
    269a:	f1 1d       	adc	r31, r1
    269c:	34 91       	lpm	r19, Z+
    269e:	33 23       	and	r19, r19
    26a0:	99 f7       	brne	.-26     	; 0x2688 <ROM_putstring+0x6>
        uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    26a2:	66 23       	and	r22, r22
    26a4:	71 f0       	breq	.+28     	; 0x26c2 <ROM_putstring+0x40>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    26a6:	80 91 c0 00 	lds	r24, 0x00C0
    26aa:	85 ff       	sbrs	r24, 5
    26ac:	fc cf       	rjmp	.-8      	; 0x26a6 <ROM_putstring+0x24>
  UDR0 = c;
    26ae:	8a e0       	ldi	r24, 0x0A	; 10
    26b0:	80 93 c6 00 	sts	0x00C6, r24

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    26b4:	80 91 c0 00 	lds	r24, 0x00C0
    26b8:	85 ff       	sbrs	r24, 5
    26ba:	fc cf       	rjmp	.-8      	; 0x26b4 <ROM_putstring+0x32>
  UDR0 = c;
    26bc:	8d e0       	ldi	r24, 0x0D	; 13
    26be:	80 93 c6 00 	sts	0x00C6, r24
    26c2:	08 95       	ret

000026c4 <uart_puts>:
        uart_putchar('\n'); uart_putchar('\r');
  }
}

void uart_puts(const char* str)
{
    26c4:	fc 01       	movw	r30, r24
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <uart_puts+0x12>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    26c8:	80 91 c0 00 	lds	r24, 0x00C0
    26cc:	85 ff       	sbrs	r24, 5
    26ce:	fc cf       	rjmp	.-8      	; 0x26c8 <uart_puts+0x4>
}

void uart_puts(const char* str)
{
    while(*str)
        uart_putc(*str++);
    26d0:	31 96       	adiw	r30, 0x01	; 1
}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    26d2:	90 93 c6 00 	sts	0x00C6, r25
  }
}

void uart_puts(const char* str)
{
    while(*str)
    26d6:	90 81       	ld	r25, Z
    26d8:	99 23       	and	r25, r25
    26da:	b1 f7       	brne	.-20     	; 0x26c8 <uart_puts+0x4>
        uart_putc(*str++);
}
    26dc:	08 95       	ret

000026de <uart_putc_hex>:


void uart_putc_hex(uint8_t b)
{
    26de:	28 2f       	mov	r18, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    26e0:	98 2f       	mov	r25, r24
    26e2:	92 95       	swap	r25
    26e4:	9f 70       	andi	r25, 0x0F	; 15
    26e6:	9a 30       	cpi	r25, 0x0A	; 10
    26e8:	30 f4       	brcc	.+12     	; 0x26f6 <uart_putc_hex+0x18>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    26ea:	80 91 c0 00 	lds	r24, 0x00C0
    26ee:	85 ff       	sbrs	r24, 5
    26f0:	fc cf       	rjmp	.-8      	; 0x26ea <uart_putc_hex+0xc>

void uart_putc_hex(uint8_t b)
{
    /* upper nibble */
    if((b >> 4) < 0x0a)
        uart_putc((b >> 4) + '0');
    26f2:	90 5d       	subi	r25, 0xD0	; 208
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <uart_putc_hex+0x22>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    26f6:	80 91 c0 00 	lds	r24, 0x00C0
    26fa:	85 ff       	sbrs	r24, 5
    26fc:	fc cf       	rjmp	.-8      	; 0x26f6 <uart_putc_hex+0x18>
{
    /* upper nibble */
    if((b >> 4) < 0x0a)
        uart_putc((b >> 4) + '0');
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    26fe:	99 5a       	subi	r25, 0xA9	; 169
}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    2700:	90 93 c6 00 	sts	0x00C6, r25
        uart_putc((b >> 4) + '0');
    else
        uart_putc((b >> 4) - 0x0a + 'a');

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    2704:	82 2f       	mov	r24, r18
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	8f 70       	andi	r24, 0x0F	; 15
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	0a 97       	sbiw	r24, 0x0a	; 10
    270e:	3c f4       	brge	.+14     	; 0x271e <uart_putc_hex+0x40>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2710:	80 91 c0 00 	lds	r24, 0x00C0
    2714:	85 ff       	sbrs	r24, 5
    2716:	fc cf       	rjmp	.-8      	; 0x2710 <uart_putc_hex+0x32>
    else
        uart_putc((b >> 4) - 0x0a + 'a');

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
        uart_putc((b & 0x0f) + '0');
    2718:	2f 70       	andi	r18, 0x0F	; 15
    271a:	20 5d       	subi	r18, 0xD0	; 208
    271c:	06 c0       	rjmp	.+12     	; 0x272a <uart_putc_hex+0x4c>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    271e:	80 91 c0 00 	lds	r24, 0x00C0
    2722:	85 ff       	sbrs	r24, 5
    2724:	fc cf       	rjmp	.-8      	; 0x271e <uart_putc_hex+0x40>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
        uart_putc((b & 0x0f) + '0');
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    2726:	2f 70       	andi	r18, 0x0F	; 15
    2728:	29 5a       	subi	r18, 0xA9	; 169
}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    272a:	20 93 c6 00 	sts	0x00C6, r18
    272e:	08 95       	ret

00002730 <uart_putw_hex>:
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
}

void uart_putw_hex(uint16_t w)
{
    2730:	1f 93       	push	r17
    2732:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    2734:	89 2f       	mov	r24, r25
    2736:	0e 94 6f 13 	call	0x26de	; 0x26de <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    273a:	81 2f       	mov	r24, r17
    273c:	0e 94 6f 13 	call	0x26de	; 0x26de <uart_putc_hex>
}
    2740:	1f 91       	pop	r17
    2742:	08 95       	ret

00002744 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	7b 01       	movw	r14, r22
    274e:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    2750:	c8 01       	movw	r24, r16
    2752:	aa 27       	eor	r26, r26
    2754:	bb 27       	eor	r27, r27
    2756:	0e 94 98 13 	call	0x2730	; 0x2730 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    275a:	c7 01       	movw	r24, r14
    275c:	0e 94 98 13 	call	0x2730	; 0x2730 <uart_putw_hex>
}
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	08 95       	ret

0000276a <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	8c 01       	movw	r16, r24
    2774:	e0 e1       	ldi	r30, 0x10	; 16
    2776:	f7 e2       	ldi	r31, 0x27	; 39
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	c0 e0       	ldi	r28, 0x00	; 0
    277c:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    277e:	c8 01       	movw	r24, r16
    2780:	bf 01       	movw	r22, r30
    2782:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
    2786:	26 2f       	mov	r18, r22
        if(b > 0 || started || num == 1)
    2788:	66 23       	and	r22, r22
    278a:	29 f4       	brne	.+10     	; 0x2796 <uart_putw_dec+0x2c>
    278c:	44 23       	and	r20, r20
    278e:	19 f4       	brne	.+6      	; 0x2796 <uart_putw_dec+0x2c>
    2790:	e1 30       	cpi	r30, 0x01	; 1
    2792:	f1 05       	cpc	r31, r1
    2794:	49 f4       	brne	.+18     	; 0x27a8 <uart_putw_dec+0x3e>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2796:	80 91 c0 00 	lds	r24, 0x00C0
    279a:	85 ff       	sbrs	r24, 5
    279c:	fc cf       	rjmp	.-8      	; 0x2796 <uart_putw_dec+0x2c>
    while(num > 0)
    {
        uint8_t b = w / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
    279e:	20 5d       	subi	r18, 0xD0	; 208
}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    27a0:	20 93 c6 00 	sts	0x00C6, r18
    27a4:	20 53       	subi	r18, 0x30	; 48
    27a6:	41 e0       	ldi	r20, 0x01	; 1
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    27a8:	cf 01       	movw	r24, r30
    27aa:	6a e0       	ldi	r22, 0x0A	; 10
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
    27b2:	21 96       	adiw	r28, 0x01	; 1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    27b4:	c5 30       	cpi	r28, 0x05	; 5
    27b6:	d1 05       	cpc	r29, r1
    27b8:	71 f0       	breq	.+28     	; 0x27d6 <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    27ba:	82 2f       	mov	r24, r18
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 01       	movw	r18, r24
    27c0:	2e 9f       	mul	r18, r30
    27c2:	c0 01       	movw	r24, r0
    27c4:	2f 9f       	mul	r18, r31
    27c6:	90 0d       	add	r25, r0
    27c8:	3e 9f       	mul	r19, r30
    27ca:	90 0d       	add	r25, r0
    27cc:	11 24       	eor	r1, r1
    27ce:	08 1b       	sub	r16, r24
    27d0:	19 0b       	sbc	r17, r25
    27d2:	fb 01       	movw	r30, r22
    27d4:	d4 cf       	rjmp	.-88     	; 0x277e <uart_putw_dec+0x14>

        num /= 10;
    }
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    27e0:	4f 92       	push	r4
    27e2:	5f 92       	push	r5
    27e4:	6f 92       	push	r6
    27e6:	7f 92       	push	r7
    27e8:	8f 92       	push	r8
    27ea:	9f 92       	push	r9
    27ec:	af 92       	push	r10
    27ee:	bf 92       	push	r11
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	4b 01       	movw	r8, r22
    2802:	5c 01       	movw	r10, r24
    2804:	e1 2c       	mov	r14, r1
    2806:	9a ec       	ldi	r25, 0xCA	; 202
    2808:	f9 2e       	mov	r15, r25
    280a:	9a e9       	ldi	r25, 0x9A	; 154
    280c:	09 2f       	mov	r16, r25
    280e:	9b e3       	ldi	r25, 0x3B	; 59
    2810:	19 2f       	mov	r17, r25
    2812:	44 24       	eor	r4, r4
    2814:	c0 e0       	ldi	r28, 0x00	; 0
    2816:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    2818:	c5 01       	movw	r24, r10
    281a:	b4 01       	movw	r22, r8
    281c:	a8 01       	movw	r20, r16
    281e:	97 01       	movw	r18, r14
    2820:	0e 94 be 14 	call	0x297c	; 0x297c <__udivmodsi4>
    2824:	d2 2e       	mov	r13, r18
        if(b > 0 || started || num == 1)
    2826:	22 23       	and	r18, r18
    2828:	41 f4       	brne	.+16     	; 0x283a <uart_putdw_dec+0x5a>
    282a:	44 20       	and	r4, r4
    282c:	31 f4       	brne	.+12     	; 0x283a <uart_putdw_dec+0x5a>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	e8 16       	cp	r14, r24
    2832:	f1 04       	cpc	r15, r1
    2834:	01 05       	cpc	r16, r1
    2836:	11 05       	cpc	r17, r1
    2838:	61 f4       	brne	.+24     	; 0x2852 <uart_putdw_dec+0x72>

}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    283a:	80 91 c0 00 	lds	r24, 0x00C0
    283e:	85 ff       	sbrs	r24, 5
    2840:	fc cf       	rjmp	.-8      	; 0x283a <uart_putdw_dec+0x5a>
    while(num > 0)
    {
        uint8_t b = dw / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
    2842:	80 e3       	ldi	r24, 0x30	; 48
    2844:	d8 0e       	add	r13, r24
}

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    2846:	d0 92 c6 00 	sts	0x00C6, r13
    284a:	80 ed       	ldi	r24, 0xD0	; 208
    284c:	d8 0e       	add	r13, r24
    284e:	44 24       	eor	r4, r4
    2850:	43 94       	inc	r4
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    2852:	c8 01       	movw	r24, r16
    2854:	b7 01       	movw	r22, r14
    2856:	2a e0       	ldi	r18, 0x0A	; 10
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	0e 94 be 14 	call	0x297c	; 0x297c <__udivmodsi4>
    2862:	c2 2e       	mov	r12, r18
    2864:	73 2e       	mov	r7, r19
    2866:	64 2e       	mov	r6, r20
    2868:	55 2e       	mov	r5, r21
    286a:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    286c:	ca 30       	cpi	r28, 0x0A	; 10
    286e:	d1 05       	cpc	r29, r1
    2870:	a9 f0       	breq	.+42     	; 0x289c <uart_putdw_dec+0xbc>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    2872:	6d 2d       	mov	r22, r13
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a8 01       	movw	r20, r16
    287c:	97 01       	movw	r18, r14
    287e:	0e 94 5f 14 	call	0x28be	; 0x28be <__mulsi3>
    2882:	86 1a       	sub	r8, r22
    2884:	97 0a       	sbc	r9, r23
    2886:	a8 0a       	sbc	r10, r24
    2888:	b9 0a       	sbc	r11, r25
    288a:	2c 2d       	mov	r18, r12
    288c:	37 2d       	mov	r19, r7
    288e:	46 2d       	mov	r20, r6
    2890:	55 2d       	mov	r21, r5
    2892:	c9 01       	movw	r24, r18
    2894:	da 01       	movw	r26, r20
    2896:	7c 01       	movw	r14, r24
    2898:	8d 01       	movw	r16, r26
    289a:	be cf       	rjmp	.-132    	; 0x2818 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	9f 90       	pop	r9
    28b2:	8f 90       	pop	r8
    28b4:	7f 90       	pop	r7
    28b6:	6f 90       	pop	r6
    28b8:	5f 90       	pop	r5
    28ba:	4f 90       	pop	r4
    28bc:	08 95       	ret

000028be <__mulsi3>:
    28be:	62 9f       	mul	r22, r18
    28c0:	d0 01       	movw	r26, r0
    28c2:	73 9f       	mul	r23, r19
    28c4:	f0 01       	movw	r30, r0
    28c6:	82 9f       	mul	r24, r18
    28c8:	e0 0d       	add	r30, r0
    28ca:	f1 1d       	adc	r31, r1
    28cc:	64 9f       	mul	r22, r20
    28ce:	e0 0d       	add	r30, r0
    28d0:	f1 1d       	adc	r31, r1
    28d2:	92 9f       	mul	r25, r18
    28d4:	f0 0d       	add	r31, r0
    28d6:	83 9f       	mul	r24, r19
    28d8:	f0 0d       	add	r31, r0
    28da:	74 9f       	mul	r23, r20
    28dc:	f0 0d       	add	r31, r0
    28de:	65 9f       	mul	r22, r21
    28e0:	f0 0d       	add	r31, r0
    28e2:	99 27       	eor	r25, r25
    28e4:	72 9f       	mul	r23, r18
    28e6:	b0 0d       	add	r27, r0
    28e8:	e1 1d       	adc	r30, r1
    28ea:	f9 1f       	adc	r31, r25
    28ec:	63 9f       	mul	r22, r19
    28ee:	b0 0d       	add	r27, r0
    28f0:	e1 1d       	adc	r30, r1
    28f2:	f9 1f       	adc	r31, r25
    28f4:	bd 01       	movw	r22, r26
    28f6:	cf 01       	movw	r24, r30
    28f8:	11 24       	eor	r1, r1
    28fa:	08 95       	ret

000028fc <__udivmodqi4>:
    28fc:	99 1b       	sub	r25, r25
    28fe:	79 e0       	ldi	r23, 0x09	; 9
    2900:	04 c0       	rjmp	.+8      	; 0x290a <__udivmodqi4_ep>

00002902 <__udivmodqi4_loop>:
    2902:	99 1f       	adc	r25, r25
    2904:	96 17       	cp	r25, r22
    2906:	08 f0       	brcs	.+2      	; 0x290a <__udivmodqi4_ep>
    2908:	96 1b       	sub	r25, r22

0000290a <__udivmodqi4_ep>:
    290a:	88 1f       	adc	r24, r24
    290c:	7a 95       	dec	r23
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__udivmodqi4_loop>
    2910:	80 95       	com	r24
    2912:	08 95       	ret

00002914 <__divmodqi4>:
    2914:	87 fb       	bst	r24, 7
    2916:	08 2e       	mov	r0, r24
    2918:	06 26       	eor	r0, r22
    291a:	87 fd       	sbrc	r24, 7
    291c:	81 95       	neg	r24
    291e:	67 fd       	sbrc	r22, 7
    2920:	61 95       	neg	r22
    2922:	ec df       	rcall	.-40     	; 0x28fc <__udivmodqi4>
    2924:	0e f4       	brtc	.+2      	; 0x2928 <__divmodqi4_1>
    2926:	91 95       	neg	r25

00002928 <__divmodqi4_1>:
    2928:	07 fc       	sbrc	r0, 7
    292a:	81 95       	neg	r24

0000292c <__divmodqi4_exit>:
    292c:	08 95       	ret

0000292e <__udivmodhi4>:
    292e:	aa 1b       	sub	r26, r26
    2930:	bb 1b       	sub	r27, r27
    2932:	51 e1       	ldi	r21, 0x11	; 17
    2934:	07 c0       	rjmp	.+14     	; 0x2944 <__udivmodhi4_ep>

00002936 <__udivmodhi4_loop>:
    2936:	aa 1f       	adc	r26, r26
    2938:	bb 1f       	adc	r27, r27
    293a:	a6 17       	cp	r26, r22
    293c:	b7 07       	cpc	r27, r23
    293e:	10 f0       	brcs	.+4      	; 0x2944 <__udivmodhi4_ep>
    2940:	a6 1b       	sub	r26, r22
    2942:	b7 0b       	sbc	r27, r23

00002944 <__udivmodhi4_ep>:
    2944:	88 1f       	adc	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	5a 95       	dec	r21
    294a:	a9 f7       	brne	.-22     	; 0x2936 <__udivmodhi4_loop>
    294c:	80 95       	com	r24
    294e:	90 95       	com	r25
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	08 95       	ret

00002956 <__divmodhi4>:
    2956:	97 fb       	bst	r25, 7
    2958:	09 2e       	mov	r0, r25
    295a:	07 26       	eor	r0, r23
    295c:	0a d0       	rcall	.+20     	; 0x2972 <__divmodhi4_neg1>
    295e:	77 fd       	sbrc	r23, 7
    2960:	04 d0       	rcall	.+8      	; 0x296a <__divmodhi4_neg2>
    2962:	e5 df       	rcall	.-54     	; 0x292e <__udivmodhi4>
    2964:	06 d0       	rcall	.+12     	; 0x2972 <__divmodhi4_neg1>
    2966:	00 20       	and	r0, r0
    2968:	1a f4       	brpl	.+6      	; 0x2970 <__divmodhi4_exit>

0000296a <__divmodhi4_neg2>:
    296a:	70 95       	com	r23
    296c:	61 95       	neg	r22
    296e:	7f 4f       	sbci	r23, 0xFF	; 255

00002970 <__divmodhi4_exit>:
    2970:	08 95       	ret

00002972 <__divmodhi4_neg1>:
    2972:	f6 f7       	brtc	.-4      	; 0x2970 <__divmodhi4_exit>
    2974:	90 95       	com	r25
    2976:	81 95       	neg	r24
    2978:	9f 4f       	sbci	r25, 0xFF	; 255
    297a:	08 95       	ret

0000297c <__udivmodsi4>:
    297c:	a1 e2       	ldi	r26, 0x21	; 33
    297e:	1a 2e       	mov	r1, r26
    2980:	aa 1b       	sub	r26, r26
    2982:	bb 1b       	sub	r27, r27
    2984:	fd 01       	movw	r30, r26
    2986:	0d c0       	rjmp	.+26     	; 0x29a2 <__udivmodsi4_ep>

00002988 <__udivmodsi4_loop>:
    2988:	aa 1f       	adc	r26, r26
    298a:	bb 1f       	adc	r27, r27
    298c:	ee 1f       	adc	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	a2 17       	cp	r26, r18
    2992:	b3 07       	cpc	r27, r19
    2994:	e4 07       	cpc	r30, r20
    2996:	f5 07       	cpc	r31, r21
    2998:	20 f0       	brcs	.+8      	; 0x29a2 <__udivmodsi4_ep>
    299a:	a2 1b       	sub	r26, r18
    299c:	b3 0b       	sbc	r27, r19
    299e:	e4 0b       	sbc	r30, r20
    29a0:	f5 0b       	sbc	r31, r21

000029a2 <__udivmodsi4_ep>:
    29a2:	66 1f       	adc	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	88 1f       	adc	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	1a 94       	dec	r1
    29ac:	69 f7       	brne	.-38     	; 0x2988 <__udivmodsi4_loop>
    29ae:	60 95       	com	r22
    29b0:	70 95       	com	r23
    29b2:	80 95       	com	r24
    29b4:	90 95       	com	r25
    29b6:	9b 01       	movw	r18, r22
    29b8:	ac 01       	movw	r20, r24
    29ba:	bd 01       	movw	r22, r26
    29bc:	cf 01       	movw	r24, r30
    29be:	08 95       	ret

000029c0 <__divmodsi4>:
    29c0:	97 fb       	bst	r25, 7
    29c2:	09 2e       	mov	r0, r25
    29c4:	05 26       	eor	r0, r21
    29c6:	0e d0       	rcall	.+28     	; 0x29e4 <__divmodsi4_neg1>
    29c8:	57 fd       	sbrc	r21, 7
    29ca:	04 d0       	rcall	.+8      	; 0x29d4 <__divmodsi4_neg2>
    29cc:	d7 df       	rcall	.-82     	; 0x297c <__udivmodsi4>
    29ce:	0a d0       	rcall	.+20     	; 0x29e4 <__divmodsi4_neg1>
    29d0:	00 1c       	adc	r0, r0
    29d2:	38 f4       	brcc	.+14     	; 0x29e2 <__divmodsi4_exit>

000029d4 <__divmodsi4_neg2>:
    29d4:	50 95       	com	r21
    29d6:	40 95       	com	r20
    29d8:	30 95       	com	r19
    29da:	21 95       	neg	r18
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	4f 4f       	sbci	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255

000029e2 <__divmodsi4_exit>:
    29e2:	08 95       	ret

000029e4 <__divmodsi4_neg1>:
    29e4:	f6 f7       	brtc	.-4      	; 0x29e2 <__divmodsi4_exit>
    29e6:	90 95       	com	r25
    29e8:	80 95       	com	r24
    29ea:	70 95       	com	r23
    29ec:	61 95       	neg	r22
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	8f 4f       	sbci	r24, 0xFF	; 255
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	08 95       	ret

000029f6 <strchr>:
    29f6:	fc 01       	movw	r30, r24
    29f8:	81 91       	ld	r24, Z+
    29fa:	86 17       	cp	r24, r22
    29fc:	21 f0       	breq	.+8      	; 0x2a06 <strchr+0x10>
    29fe:	88 23       	and	r24, r24
    2a00:	d9 f7       	brne	.-10     	; 0x29f8 <strchr+0x2>
    2a02:	99 27       	eor	r25, r25
    2a04:	08 95       	ret
    2a06:	31 97       	sbiw	r30, 0x01	; 1
    2a08:	cf 01       	movw	r24, r30
    2a0a:	08 95       	ret

00002a0c <strcmp>:
    2a0c:	fb 01       	movw	r30, r22
    2a0e:	dc 01       	movw	r26, r24
    2a10:	8d 91       	ld	r24, X+
    2a12:	01 90       	ld	r0, Z+
    2a14:	80 19       	sub	r24, r0
    2a16:	01 10       	cpse	r0, r1
    2a18:	d9 f3       	breq	.-10     	; 0x2a10 <strcmp+0x4>
    2a1a:	99 0b       	sbc	r25, r25
    2a1c:	08 95       	ret

00002a1e <strncat>:
    2a1e:	fb 01       	movw	r30, r22
    2a20:	dc 01       	movw	r26, r24
    2a22:	0d 90       	ld	r0, X+
    2a24:	00 20       	and	r0, r0
    2a26:	e9 f7       	brne	.-6      	; 0x2a22 <strncat+0x4>
    2a28:	11 97       	sbiw	r26, 0x01	; 1
    2a2a:	41 50       	subi	r20, 0x01	; 1
    2a2c:	50 40       	sbci	r21, 0x00	; 0
    2a2e:	28 f0       	brcs	.+10     	; 0x2a3a <strncat+0x1c>
    2a30:	01 90       	ld	r0, Z+
    2a32:	00 20       	and	r0, r0
    2a34:	0d 92       	st	X+, r0
    2a36:	c9 f7       	brne	.-14     	; 0x2a2a <strncat+0xc>
    2a38:	08 95       	ret
    2a3a:	1c 92       	st	X, r1
    2a3c:	08 95       	ret

00002a3e <__eerd_byte_m168>:
    2a3e:	f9 99       	sbic	0x1f, 1	; 31
    2a40:	fe cf       	rjmp	.-4      	; 0x2a3e <__eerd_byte_m168>
    2a42:	92 bd       	out	0x22, r25	; 34
    2a44:	81 bd       	out	0x21, r24	; 33
    2a46:	f8 9a       	sbi	0x1f, 0	; 31
    2a48:	99 27       	eor	r25, r25
    2a4a:	80 b5       	in	r24, 0x20	; 32
    2a4c:	08 95       	ret

00002a4e <__eewr_byte_m168>:
    2a4e:	26 2f       	mov	r18, r22

00002a50 <__eewr_r18_m168>:
    2a50:	f9 99       	sbic	0x1f, 1	; 31
    2a52:	fe cf       	rjmp	.-4      	; 0x2a50 <__eewr_r18_m168>
    2a54:	1f ba       	out	0x1f, r1	; 31
    2a56:	92 bd       	out	0x22, r25	; 34
    2a58:	81 bd       	out	0x21, r24	; 33
    2a5a:	20 bd       	out	0x20, r18	; 32
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	fa 9a       	sbi	0x1f, 2	; 31
    2a62:	f9 9a       	sbi	0x1f, 1	; 31
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	08 95       	ret

00002a6a <_exit>:
    2a6a:	f8 94       	cli

00002a6c <__stop_program>:
    2a6c:	ff cf       	rjmp	.-2      	; 0x2a6c <__stop_program>
