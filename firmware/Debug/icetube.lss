
icetube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000031ac  00003240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800110  00800110  00003250  2**0
                  ALLOC
  3 .stab         00000ee8  00000000  00000000  00003250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000348  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00004480  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034ed  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00007b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b7  00000000  00000000  00008618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a6c  00000000  00000000  00009bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084e  00000000  00000000  0000a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b88  00000000  00000000  0000ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000da12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 01 	jmp	0x310	; 0x310 <__ctors_end>
       4:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_1>
       8:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
       c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_3>
      10:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      14:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_5>
      18:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      1c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      20:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      24:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__vector_9>
      28:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      2c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      30:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      34:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_13>
      38:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      3c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      40:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_16>
      44:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      48:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      4c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      50:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      54:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_21>
      58:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      5c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      60:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      64:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>

00000068 <temp_fmt>:
      68:	20 25 33 64 2e 25 64 25 63 00                        %3d.%d%c.

00000072 <alarm_fmt2>:
      72:	25 30 32 64 3a 25 30 32 64 00                       %02d:%02d.

0000007c <alarm_fmt1>:
      7c:	25 32 64 3a 25 30 32 64 20 25 63 6d 00              %2d:%02d %cm.

00000089 <date_fmt2>:
      89:	25 53 20 25 2d 64 00                                %S %-d.

00000090 <monname>:
      90:	ea 00 e4 00 de 00 d8 00 d2 00 cc 00 c6 00 c0 00     ................
      a0:	ba 00 b4 00 ae 00 a8 00                             ........

000000a8 <dec>:
      a8:	64 65 63 65 6d 00                                   decem.

000000ae <nov>:
      ae:	6e 6f 76 65 6d 00                                   novem.

000000b4 <oct>:
      b4:	6f 63 74 6f 62 00                                   octob.

000000ba <sep>:
      ba:	20 73 65 70 74 00                                    sept.

000000c0 <aug>:
      c0:	61 75 67 73 74 00                                   augst.

000000c6 <jul>:
      c6:	20 6a 75 6c 79 00                                    july.

000000cc <jun>:
      cc:	20 6a 75 6e 65 00                                    june.

000000d2 <may>:
      d2:	20 20 6d 61 79 00                                     may.

000000d8 <apr>:
      d8:	61 70 72 69 6c 00                                   april.

000000de <mar>:
      de:	6d 61 72 63 68 00                                   march.

000000e4 <feb>:
      e4:	20 20 66 65 62 00                                     feb.

000000ea <jan>:
      ea:	20 20 6a 61 6e 00                                     jan.

000000f0 <date_fmt1>:
      f0:	25 30 32 64 2f 25 30 32 64 2f 25 30 32 64 00        %02d/%02d/%02d.

000000ff <dayname>:
      ff:	40 01 38 01 30 01 27 01 1e 01 16 01 0d 01           @.8.0.'.......

0000010d <sat>:
     10d:	73 61 74 75 72 64 61 79 00                          saturday.

00000116 <fri>:
     116:	20 66 72 69 64 61 79 00                              friday.

0000011e <thu>:
     11e:	74 68 75 72 73 64 61 79 00                          thursday.

00000127 <wed>:
     127:	77 65 64 6e 73 64 61 79 00                          wednsday.

00000130 <tue>:
     130:	74 75 65 73 64 61 79 00                             tuesday.

00000138 <mon>:
     138:	20 6d 6f 6e 64 61 79 00                              monday.

00000140 <sun>:
     140:	20 73 75 6e 64 61 79 00                              sunday.

00000148 <mon_tbl_p>:
     148:	4a 01                                               J.

0000014a <mon_tbl>:
     14a:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000156 <dow_tbl>:
     156:	00 03 02 05 00 03 05 01 04 06 02 04                 ............

00000162 <trim_fmt>:
     162:	74 72 69 6d 20 25 2d 33 64 00                       trim %-3d.

0000016c <dst_off>:
     16c:	20 64 73 74 20 6f 2e 66 2e 66 2e 00                  dst o.f.f..

00000178 <dst_on>:
     178:	20 64 73 74 20 6f 2e 6e 2e 20 00                     dst o.n. .

00000183 <region2>:
     183:	65 75 72 2d 32 34 68 72 00                          eur-24hr.

0000018c <region1>:
     18c:	75 73 61 2d 31 32 68 72 00                          usa-12hr.

00000195 <brit_fmt2>:
     195:	62 72 69 74 20 61 75 74 00                          brit aut.

0000019e <brit_fmt1>:
     19e:	62 72 69 74 20 25 2d 32 64 20 00                    brit %-2d .

000001a9 <mux_divider_p>:
     1a9:	ab 01                                               ..

000001ab <mux_divider>:
     1ab:	5a 1e 1e 28 1e 1e 3c 1e 37                          Z..(..<.7

000001b4 <segmenttable_p>:
     1b4:	b6 01                                               ..

000001b6 <segmenttable>:
     1b6:	0b 10 12 0f 0d 0e 11 13                             ........

000001be <digittable_p>:
     1be:	c0 01                                               ..

000001c0 <digittable>:
     1c0:	03 07 08 09 06 0a 05 0c 04                          .........

000001c9 <verstr>:
     1c9:	76 65 72 20 32 2e 31 34 00                          ver 2.14.

000001d2 <numbertable_p>:
     1d2:	d4 01                                               ..

000001d4 <numbertable>:
     1d4:	fc 60 da f2 66 b6 be e0 fe e6                       .`..f.....

000001de <alphatable_p>:
     1de:	e0 01                                               ..

000001e0 <alphatable>:
     1e0:	fa 3e 1a 7a de 8e f6 2e 60 78 ae 1c aa 2a 3a ce     .>.z....`x...*:.
     1f0:	f3 0a b6 1e 38 38 b8 6e 76 da                       ....88.nv.

000001fa <__c.2078>:
     1fa:	73 6e 6f 6f 7a 65 00                                snooze.

00000201 <__c.2080>:
     201:	73 6e 6f 6f 7a 69 6e 67 00                          snoozing.

0000020a <__c.2140>:
     20a:	74 75 72 6e 69 6e 67 20 6f 6e 20 62 75 74 74 6f     turning on butto
     21a:	6e 73 00                                            ns.

0000021d <__c.2142>:
     21d:	74 75 72 6e 69 6e 67 20 6f 6e 20 61 6c 61 72 6d     turning on alarm
     22d:	73 77 00                                            sw.

00000230 <__c.2144>:
     230:	76 66 64 20 69 6e 69 74 00                          vfd init.

00000239 <__c.2146>:
     239:	62 6f 6f 73 74 20 69 6e 69 74 00                    boost init.

00000244 <__c.2148>:
     244:	73 70 65 61 6b 65 72 20 69 6e 69 74 00              speaker init.

00000251 <__c.2150>:
     251:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

0000025c <__c.2152>:
     25c:	61 6c 61 72 6d 20 69 6e 69 74 00                    alarm init.

00000267 <__c.2154>:
     267:	69 6e 69 74 20 64 6f 6e 65 00                       init done.

00000271 <__c.2156>:
     271:	69 63 65 74 75 62 65 00                             icetube.

00000279 <__c.2178>:
     279:	73 65 74 20 61 6c 61 72 6d 00                       set alarm.

00000283 <__c.2196>:
     283:	73 65 74 20 74 69 6d 65 00                          set time.

0000028c <__c.2204>:
     28c:	43 68 72 6f 6e 6f 44 6f 74 20 73 65 74 21 00        ChronoDot set!.

0000029b <__c.2216>:
     29b:	73 65 74 20 64 61 74 65 00                          set date.

000002a4 <__c.2219>:
     2a4:	53 65 74 20 64 61 79 00                             Set day.

000002ac <__c.2235>:
     2ac:	73 65 74 20 62 72 69 74 00                          set brit.

000002b5 <__c.2246>:
     2b5:	73 65 74 20 72 67 6e 20 00                          set rgn .

000002be <__c.2257>:
     2be:	73 65 74 20 64 73 74 00                             set dst.

000002c6 <__c.2269>:
     2c6:	73 65 74 20 74 72 69 6d 00                          set trim.

000002cf <__c.2281>:
     2cf:	43 68 72 6f 6e 6f 44 6f 74 20 63 68 65 63 6b 20     ChronoDot check 
     2df:	66 61 69 6c 65 64 21 00                             failed!.

000002e7 <__c.2296>:
     2e7:	61 6c 61 72 6d 20 6f 66 66 00                       alarm off.

000002f1 <__c.2294>:
     2f1:	61 6c 61 72 6d 20 6f 6e 00                          alarm on.

000002fa <__c.2351>:
     2fa:	63 00                                               c.

000002fc <__c.2456>:
     2fc:	5d 00                                               ].

000002fe <__c.2467>:
     2fe:	7d 00                                               }.

00000300 <twi_fmt>:
     300:	74 77 69 20 25 30 32 78 3a 25 30 32 78 0d 0a 00     twi %02x:%02x...

00000310 <__ctors_end>:
     310:	11 24       	eor	r1, r1
     312:	1f be       	out	0x3f, r1	; 63
     314:	cf ef       	ldi	r28, 0xFF	; 255
     316:	d8 e0       	ldi	r29, 0x08	; 8
     318:	de bf       	out	0x3e, r29	; 62
     31a:	cd bf       	out	0x3d, r28	; 61

0000031c <__do_copy_data>:
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b1 e0       	ldi	r27, 0x01	; 1
     322:	ec ea       	ldi	r30, 0xAC	; 172
     324:	f1 e3       	ldi	r31, 0x31	; 49
     326:	02 c0       	rjmp	.+4      	; 0x32c <__do_copy_data+0x10>
     328:	05 90       	lpm	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	a0 31       	cpi	r26, 0x10	; 16
     32e:	b1 07       	cpc	r27, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <__do_copy_data+0xc>

00000332 <__do_clear_bss>:
     332:	11 e0       	ldi	r17, 0x01	; 1
     334:	a0 e1       	ldi	r26, 0x10	; 16
     336:	b1 e0       	ldi	r27, 0x01	; 1
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a8 34       	cpi	r26, 0x48	; 72
     33e:	b1 07       	cpc	r27, r17
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <main>
     346:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <_exit>

0000034a <__bad_interrupt>:
     34a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034e <delayms>:
// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms)
{
	while (ms > 1000) {
     34e:	0b c0       	rjmp	.+22     	; 0x366 <delayms+0x18>
		// Much longer than a second would trigger watchdog,
		//  so break it into smaller pieces.
		milliseconds = 0;
		while (milliseconds < 1000)
     350:	20 91 10 01 	lds	r18, 0x0110
     354:	30 91 11 01 	lds	r19, 0x0111
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	28 3e       	cpi	r18, 0xE8	; 232
     35c:	34 07       	cpc	r19, r20
     35e:	c0 f3       	brcs	.-16     	; 0x350 <delayms+0x2>
			;
		ms -= 1000;
     360:	88 5e       	subi	r24, 0xE8	; 232
     362:	93 40       	sbci	r25, 0x03	; 3
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     364:	a8 95       	wdr
void delayms(uint16_t ms)
{
	while (ms > 1000) {
		// Much longer than a second would trigger watchdog,
		//  so break it into smaller pieces.
		milliseconds = 0;
     366:	10 92 11 01 	sts	0x0111, r1
     36a:	10 92 10 01 	sts	0x0110, r1
// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms)
{
	while (ms > 1000) {
     36e:	23 e0       	ldi	r18, 0x03	; 3
     370:	89 3e       	cpi	r24, 0xE9	; 233
     372:	92 07       	cpc	r25, r18
     374:	68 f7       	brcc	.-38     	; 0x350 <delayms+0x2>
			;
		ms -= 1000;
		kickthedog();
	}
	milliseconds = 0;
	while (milliseconds < ms)
     376:	20 91 10 01 	lds	r18, 0x0110
     37a:	30 91 11 01 	lds	r19, 0x0111
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	c8 f3       	brcs	.-14     	; 0x376 <delayms+0x28>
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     384:	a8 95       	wdr
	}
	milliseconds = 0;
	while (milliseconds < ms)
		;
	kickthedog();
}
     386:	08 95       	ret

00000388 <__vector_21>:
// Lower ADC values mean more light, higher ADC values mean less.

volatile long adc_sum;			// Sum of ADC values to produce average
volatile uint16_t adc_count;		// Count of # of ADC readings in adc_sum

ISR(ADC_vect, ISR_NOBLOCK) {
     388:	78 94       	sei
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	2f 93       	push	r18
     396:	3f 93       	push	r19
     398:	4f 93       	push	r20
     39a:	5f 93       	push	r21
     39c:	6f 93       	push	r22
     39e:	7f 93       	push	r23
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	af 93       	push	r26
     3a6:	bf 93       	push	r27
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31

	uint8_t low, high;
	unsigned int val;

	// Read 2-byte value. Must read ADCL first because that locks the value.
	low = ADCL;
     3ac:	60 91 78 00 	lds	r22, 0x0078
	high = ADCH;
     3b0:	20 91 79 00 	lds	r18, 0x0079
	val = (high << 8) | low;
     3b4:	92 2f       	mov	r25, r18
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	68 2b       	or	r22, r24
     3bc:	79 2b       	or	r23, r25
	// Set brightness to a value between min & max based on light reading.
	if (val >= PHOTOCELL_DARK) {
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	6b 33       	cpi	r22, 0x3B	; 59
     3c2:	78 07       	cpc	r23, r24
     3c4:	b0 f4       	brcc	.+44     	; 0x3f2 <__vector_21+0x6a>
		val = PHOTOCELL_MIN;
	} else if (val <= PHOTOCELL_LIGHT) {
     3c6:	61 15       	cp	r22, r1
     3c8:	71 05       	cpc	r23, r1
     3ca:	b1 f0       	breq	.+44     	; 0x3f8 <__vector_21+0x70>
		val = PHOTOCELL_MAX;
	} else {
		val = PHOTOCELL_MAX - (((unsigned long)(PHOTOCELL_MAX - PHOTOCELL_MIN)) *
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2d e2       	ldi	r18, 0x2D	; 45
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__mulsi3>
				(val - PHOTOCELL_LIGHT)) / (PHOTOCELL_DARK - PHOTOCELL_LIGHT);
     3dc:	2b e3       	ldi	r18, 0x3B	; 59
     3de:	31 e0       	ldi	r19, 0x01	; 1
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__udivmodsi4>
	if (val >= PHOTOCELL_DARK) {
		val = PHOTOCELL_MIN;
	} else if (val <= PHOTOCELL_LIGHT) {
		val = PHOTOCELL_MAX;
	} else {
		val = PHOTOCELL_MAX - (((unsigned long)(PHOTOCELL_MAX - PHOTOCELL_MIN)) *
     3e8:	8a e5       	ldi	r24, 0x5A	; 90
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	82 1b       	sub	r24, r18
     3ee:	93 0b       	sbc	r25, r19
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__vector_21+0x74>
	low = ADCL;
	high = ADCH;
	val = (high << 8) | low;
	// Set brightness to a value between min & max based on light reading.
	if (val >= PHOTOCELL_DARK) {
		val = PHOTOCELL_MIN;
     3f2:	8d e2       	ldi	r24, 0x2D	; 45
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__vector_21+0x74>
	} else if (val <= PHOTOCELL_LIGHT) {
		val = PHOTOCELL_MAX;
     3f8:	8a e5       	ldi	r24, 0x5A	; 90
     3fa:	90 e0       	ldi	r25, 0x00	; 0
	} else {
		val = PHOTOCELL_MAX - (((unsigned long)(PHOTOCELL_MAX - PHOTOCELL_MIN)) *
				(val - PHOTOCELL_LIGHT)) / (PHOTOCELL_DARK - PHOTOCELL_LIGHT);
	}

	if (flag(f_autobright)) {
     3fc:	20 91 46 01 	lds	r18, 0x0146
     400:	25 ff       	sbrs	r18, 5
     402:	16 c0       	rjmp	.+44     	; 0x430 <__vector_21+0xa8>
		if (val > ocr0a) ocr0a++;					// Smoothly slew brightness
     404:	20 91 3d 01 	lds	r18, 0x013D
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	28 17       	cp	r18, r24
     40c:	39 07       	cpc	r19, r25
     40e:	28 f4       	brcc	.+10     	; 0x41a <__vector_21+0x92>
     410:	20 91 3d 01 	lds	r18, 0x013D
     414:	2f 5f       	subi	r18, 0xFF	; 255
     416:	20 93 3d 01 	sts	0x013D, r18
		if (val < ocr0a) ocr0a--;
     41a:	20 91 3d 01 	lds	r18, 0x013D
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	28 f4       	brcc	.+10     	; 0x430 <__vector_21+0xa8>
     426:	80 91 3d 01 	lds	r24, 0x013D
     42a:	81 50       	subi	r24, 0x01	; 1
     42c:	80 93 3d 01 	sts	0x013D, r24
	}
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <__vector_5>:
// We use the pin change interrupts to detect when buttons are pressed


// This interrupt detects switches 0 and 2
ISR(PCINT2_vect, ISR_NOBLOCK)
{
     452:	78 94       	sei
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
	if (PIND & _BV(BUTTON1))	// Button 0 is up:
     462:	4d 9b       	sbis	0x09, 5	; 9
     464:	05 c0       	rjmp	.+10     	; 0x470 <__vector_5+0x1e>
		btimer[0] = 0;			//  Stop timer
     466:	10 92 20 01 	sts	0x0120, r1
     46a:	10 92 1f 01 	sts	0x011F, r1
     46e:	0c c0       	rjmp	.+24     	; 0x488 <__vector_5+0x36>
	else if (!btimer[0])		// Button 0 is down and timer isn't already running:
     470:	80 91 1f 01 	lds	r24, 0x011F
     474:	90 91 20 01 	lds	r25, 0x0120
     478:	00 97       	sbiw	r24, 0x00	; 0
     47a:	31 f4       	brne	.+12     	; 0x488 <__vector_5+0x36>
		btimer[0] = 1;			//  Start timer
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	90 93 20 01 	sts	0x0120, r25
     484:	80 93 1f 01 	sts	0x011F, r24
	
	if (PIND & _BV(BUTTON3))	// Same for button 2
     488:	4c 9b       	sbis	0x09, 4	; 9
     48a:	05 c0       	rjmp	.+10     	; 0x496 <__vector_5+0x44>
		btimer[2] = 0;
     48c:	10 92 24 01 	sts	0x0124, r1
     490:	10 92 23 01 	sts	0x0123, r1
     494:	0c c0       	rjmp	.+24     	; 0x4ae <__vector_5+0x5c>
	else if (!btimer[2])
     496:	80 91 23 01 	lds	r24, 0x0123
     49a:	90 91 24 01 	lds	r25, 0x0124
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	31 f4       	brne	.+12     	; 0x4ae <__vector_5+0x5c>
		btimer[2] = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	90 93 24 01 	sts	0x0124, r25
     4aa:	80 93 23 01 	sts	0x0123, r24
}
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_3>:

// Just button #1
ISR(PCINT0_vect, ISR_NOBLOCK) 
{
     4bc:	78 94       	sei
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
	EIFR &= ~_BV(INTF0);
     4cc:	e0 98       	cbi	0x1c, 0	; 28

	if (PINB & _BV(BUTTON2))
     4ce:	18 9b       	sbis	0x03, 0	; 3
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__vector_3+0x20>
		btimer[1] = 0;
     4d2:	10 92 22 01 	sts	0x0122, r1
     4d6:	10 92 21 01 	sts	0x0121, r1
     4da:	0c c0       	rjmp	.+24     	; 0x4f4 <__vector_3+0x38>
	else if (!btimer[2])
     4dc:	80 91 23 01 	lds	r24, 0x0123
     4e0:	90 91 24 01 	lds	r25, 0x0124
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	31 f4       	brne	.+12     	; 0x4f4 <__vector_3+0x38>
		btimer[1] = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	90 93 22 01 	sts	0x0122, r25
     4f0:	80 93 21 01 	sts	0x0121, r24
}
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_1>:

// Button 3 interrupt (alarm switch)
// This is turned into two buttons, 3 & 4: 3 for closed (alarm on)
//  and 4 for open (alarm off)
ISR(INT0_vect, ISR_NOBLOCK) 
{
     502:	78 94       	sei
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
	EIFR &= ~_BV(INTF0);
     512:	e0 98       	cbi	0x1c, 0	; 28

	if (PIND & _BV(ALARM)) {
     514:	4a 9b       	sbis	0x09, 2	; 9
     516:	11 c0       	rjmp	.+34     	; 0x53a <__vector_1+0x38>
		btimer[4] = 0;
     518:	10 92 28 01 	sts	0x0128, r1
     51c:	10 92 27 01 	sts	0x0127, r1
		if (!btimer[3])
     520:	80 91 25 01 	lds	r24, 0x0125
     524:	90 91 26 01 	lds	r25, 0x0126
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	b9 f4       	brne	.+46     	; 0x55a <__vector_1+0x58>
			btimer[3] = 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 26 01 	sts	0x0126, r25
     534:	80 93 25 01 	sts	0x0125, r24
     538:	10 c0       	rjmp	.+32     	; 0x55a <__vector_1+0x58>
	} else {
		btimer[3] = 0;
     53a:	10 92 26 01 	sts	0x0126, r1
     53e:	10 92 25 01 	sts	0x0125, r1
		if (!btimer[4])
     542:	80 91 27 01 	lds	r24, 0x0127
     546:	90 91 28 01 	lds	r25, 0x0128
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	31 f4       	brne	.+12     	; 0x55a <__vector_1+0x58>
			btimer[4] = 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 28 01 	sts	0x0128, r25
     556:	80 93 27 01 	sts	0x0127, r24
	}	
}
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	0f 90       	pop	r0
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <__vector_13>:
	}	
}

// Timer 1 overflow -- speaker driver
ISR (TIMER1_OVF_vect, ISR_NOBLOCK)
{
     568:	78 94       	sei
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
	if (--beepcounter) return;			// Count off the cycles
     578:	80 91 33 01 	lds	r24, 0x0133
     57c:	90 91 34 01 	lds	r25, 0x0134
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	90 93 34 01 	sts	0x0134, r25
     586:	80 93 33 01 	sts	0x0133, r24
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	41 f4       	brne	.+16     	; 0x59e <__vector_13+0x36>
	TCCR1B &= ~_BV(CS11);				// Turn off counter/timer
     58e:	80 91 81 00 	lds	r24, 0x0081
     592:	8d 7f       	andi	r24, 0xFD	; 253
     594:	80 93 81 00 	sts	0x0081, r24
	PORTB &= ~_BV(SPK1) & ~_BV(SPK2);	// turn speaker off
     598:	85 b1       	in	r24, 0x05	; 5
     59a:	89 7f       	andi	r24, 0xF9	; 249
     59c:	85 b9       	out	0x05, r24	; 5
}
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <b2bcd>:
	}
	brepeat &= ~_BV(2);
}

uint8_t b2bcd (uint8_t b) {
	return ((b / 10) << 4) | (b % 10);
     5ac:	6a e0       	ldi	r22, 0x0A	; 10
     5ae:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     5b2:	82 95       	swap	r24
     5b4:	80 7f       	andi	r24, 0xF0	; 240
}
     5b6:	89 2b       	or	r24, r25
     5b8:	08 95       	ret

000005ba <bcd2b>:

uint8_t bcd2b (uint8_t bcd) {
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
     5ba:	98 2f       	mov	r25, r24
     5bc:	92 95       	swap	r25
     5be:	9f 70       	andi	r25, 0x0F	; 15
     5c0:	99 0f       	add	r25, r25
     5c2:	29 2f       	mov	r18, r25
     5c4:	22 0f       	add	r18, r18
     5c6:	22 0f       	add	r18, r18
     5c8:	29 0f       	add	r18, r25
     5ca:	8f 70       	andi	r24, 0x0F	; 15
}
     5cc:	82 0f       	add	r24, r18
     5ce:	08 95       	ret

000005d0 <limit_brightness>:
	}
	brepeat &= ~_BV(2);
}

uint8_t limit_brightness (uint8_t brightness) 
{
     5d0:	28 2f       	mov	r18, r24
	const uint8_t step = 5;
	
	// Set PWM value, don't set it so high that
	// we could damage the MAX chip or display
	// Or so low its not visible
	if (brightness < 30 || 90 < brightness)
     5d2:	8e 51       	subi	r24, 0x1E	; 30
     5d4:	8d 33       	cpi	r24, 0x3D	; 61
     5d6:	08 f0       	brcs	.+2      	; 0x5da <limit_brightness+0xa>
		brightness = 30;
     5d8:	2e e1       	ldi	r18, 0x1E	; 30
	if ((i = brightness % step) != 0)
     5da:	82 2f       	mov	r24, r18
     5dc:	65 e0       	ldi	r22, 0x05	; 5
     5de:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     5e2:	99 23       	and	r25, r25
     5e4:	11 f0       	breq	.+4      	; 0x5ea <limit_brightness+0x1a>
		brightness += step - i;	/* Round up to nearest multiple of 5 */
     5e6:	2b 5f       	subi	r18, 0xFB	; 251
     5e8:	29 1b       	sub	r18, r25
	return brightness;
}
     5ea:	82 2f       	mov	r24, r18
     5ec:	08 95       	ret

000005ee <init_rtc>:
}

// Turn on the RTC by selecting the external 32khz crystal
void init_rtc (void) {
	// 32.768 / 128 = 256 which is exactly an 8-bit timer overflow
	ASSR |= _BV(EXCLK);		// External clock (comment out if using xtal)
     5ee:	e6 eb       	ldi	r30, 0xB6	; 182
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	80 83       	st	Z, r24
	ASSR |= _BV(AS2); // use crystal
     5f8:	80 81       	ld	r24, Z
     5fa:	80 62       	ori	r24, 0x20	; 32
     5fc:	80 83       	st	Z, r24
	TCCR2A = 0;
     5fe:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = _BV(CS22) | _BV(CS20); // div by 128
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	80 93 b1 00 	sts	0x00B1, r24
	// We will overflow once a second, and call an interrupt

	CLKPR = _BV(CLKPCE);	// CPU clock division factor to 1
     608:	e1 e6       	ldi	r30, 0x61	; 97
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	80 83       	st	Z, r24
	CLKPR = 0;
     610:	10 82       	st	Z, r1

	// enable interrupt on overflow
	TIMSK2 = _BV(TOIE2);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 70 00 	sts	0x0070, r24
}
     618:	08 95       	ret

0000061a <init_alarm>:

// Set up the stored alarm time and date
void init_alarm (void) {
	alarm_m = eeprom_read_byte((uint8_t *)EE_ALARM_MIN) % 60;
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
     622:	6c e3       	ldi	r22, 0x3C	; 60
     624:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     628:	90 93 1a 01 	sts	0x011A, r25
	alarm_h = eeprom_read_byte((uint8_t *)EE_ALARM_HOUR) % 24;
     62c:	87 e0       	ldi	r24, 0x07	; 7
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
     634:	68 e1       	ldi	r22, 0x18	; 24
     636:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     63a:	90 93 38 01 	sts	0x0138, r25
}
     63e:	08 95       	ret

00000640 <init_buttons>:
		}
	}
}

void init_buttons(void) {
		DDRB =	_BV(VFDCLK) | _BV(VFDDATA) | _BV(SPK1) | _BV(SPK2);
     640:	8e e2       	ldi	r24, 0x2E	; 46
     642:	84 b9       	out	0x04, r24	; 4
		DDRD = _BV(BOOST) | _BV(VFDSWITCH);
     644:	88 e4       	ldi	r24, 0x48	; 72
     646:	8a b9       	out	0x0a, r24	; 10
		DDRC = _BV(VFDLOAD) | _BV(VFDBLANK) | _BV(4);
     648:	89 e1       	ldi	r24, 0x19	; 25
     64a:	87 b9       	out	0x07, r24	; 7
		PORTD = _BV(BUTTON1) | _BV(BUTTON3) | _BV(ALARM);
     64c:	84 e3       	ldi	r24, 0x34	; 52
     64e:	8b b9       	out	0x0b, r24	; 11
		PORTB = _BV(BUTTON2);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	85 b9       	out	0x05, r24	; 5

		PCICR = _BV(PCIE0) | _BV(PCIE2);
     654:	95 e0       	ldi	r25, 0x05	; 5
     656:	90 93 68 00 	sts	0x0068, r25
		PCMSK0 = _BV(PCINT0);
     65a:	80 93 6b 00 	sts	0x006B, r24
		PCMSK2 = _BV(PCINT21) | _BV(PCINT20);		
     65e:	80 e3       	ldi	r24, 0x30	; 48
     660:	80 93 6d 00 	sts	0x006D, r24
}
     664:	08 95       	ret

00000666 <init_speaker>:

// Set up the speaker to prepare for beeping!
void init_speaker(void) {

	// We use the built-in fast PWM, 8 bit timer
	PORTB |= _BV(SPK1) | _BV(SPK2); 
     666:	85 b1       	in	r24, 0x05	; 5
     668:	86 60       	ori	r24, 0x06	; 6
     66a:	85 b9       	out	0x05, r24	; 5

	// Turn on PWM outputs for both pins
	TCCR1A = _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
     66c:	82 e3       	ldi	r24, 0x32	; 50
     66e:	80 93 80 00 	sts	0x0080, r24

	TCCR1B = _BV(WGM13) | _BV(WGM12);
     672:	88 e1       	ldi	r24, 0x18	; 24
     674:	80 93 81 00 	sts	0x0081, r24

	// start at 4khz:	250 * 8 multiplier * 4000 = 8mhz
	ICR1 = 250;
     678:	e6 e8       	ldi	r30, 0x86	; 134
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	8a ef       	ldi	r24, 0xFA	; 250
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	91 83       	std	Z+1, r25	; 0x01
     682:	80 83       	st	Z, r24
	OCR1B = OCR1A = ICR1 / 2;
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	90 93 89 00 	sts	0x0089, r25
     690:	80 93 88 00 	sts	0x0088, r24
     694:	90 93 8b 00 	sts	0x008B, r25
     698:	80 93 8a 00 	sts	0x008A, r24
}
     69c:	08 95       	ret

0000069e <beep>:
{
	beep (500, 5, 1);
}

// We can play short beeps!
void beep(uint16_t freq, uint16_t cycles, uint8_t loud) {
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	8b 01       	movw	r16, r22
     6a6:	c4 2f       	mov	r28, r20
	// set the PWM output to match the desired frequency
	ICR1 = (F_CPU/8)/freq;
     6a8:	9c 01       	movw	r18, r24
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	60 e4       	ldi	r22, 0x40	; 64
     6b0:	72 e4       	ldi	r23, 0x42	; 66
     6b2:	8f e0       	ldi	r24, 0x0F	; 15
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__divmodsi4>
     6ba:	30 93 87 00 	sts	0x0087, r19
     6be:	20 93 86 00 	sts	0x0086, r18
	// we want 50% duty cycle square wave
	OCR1A = OCR1B = ICR1/2;
     6c2:	80 91 86 00 	lds	r24, 0x0086
     6c6:	90 91 87 00 	lds	r25, 0x0087
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	90 93 8b 00 	sts	0x008B, r25
     6d2:	80 93 8a 00 	sts	0x008A, r24
     6d6:	90 93 89 00 	sts	0x0089, r25
     6da:	80 93 88 00 	sts	0x0088, r24
	beepcounter = cycles;
     6de:	10 93 34 01 	sts	0x0134, r17
     6e2:	00 93 33 01 	sts	0x0133, r16
	TCNT1 = 0;
     6e6:	10 92 85 00 	sts	0x0085, r1
     6ea:	10 92 84 00 	sts	0x0084, r1
	if (loud)
		TCCR1A |= _BV(COM1A1);	// Drives both OCR1x outputs out of phase
     6ee:	80 91 80 00 	lds	r24, 0x0080
	ICR1 = (F_CPU/8)/freq;
	// we want 50% duty cycle square wave
	OCR1A = OCR1B = ICR1/2;
	beepcounter = cycles;
	TCNT1 = 0;
	if (loud)
     6f2:	cc 23       	and	r28, r28
     6f4:	11 f0       	breq	.+4      	; 0x6fa <beep+0x5c>
		TCCR1A |= _BV(COM1A1);	// Drives both OCR1x outputs out of phase
     6f6:	80 68       	ori	r24, 0x80	; 128
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <beep+0x5e>
	else
		TCCR1A &= ~_BV(COM1A1);
     6fa:	8f 77       	andi	r24, 0x7F	; 127
     6fc:	80 93 80 00 	sts	0x0080, r24
	TIMSK1 |= _BV(TOIE1);	// Enable interrupts
     700:	80 91 6f 00 	lds	r24, 0x006F
     704:	81 60       	ori	r24, 0x01	; 1
     706:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B |= _BV(CS11); // turn it on!
     70a:	80 91 81 00 	lds	r24, 0x0081
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 93 81 00 	sts	0x0081, r24
}
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <tick>:
}

// This makes the speaker tick
void tick(void)
{
	beep (500, 5, 1);
     71c:	84 ef       	ldi	r24, 0xF4	; 244
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	65 e0       	ldi	r22, 0x05	; 5
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	0e 94 4f 03 	call	0x69e	; 0x69e <beep>
}
     72a:	08 95       	ret

0000072c <init_boost>:

// We control the boost converter by changing the PWM output
// pins
void init_boost (void) 
{
	brightness = eeprom_read_byte ((uint8_t *) EE_BRIGHT);
     72c:	89 e0       	ldi	r24, 0x09	; 9
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
	brightness = limit_brightness(brightness);
     734:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <limit_brightness>
     738:	80 93 45 01 	sts	0x0145, r24
	if (!flag(f_autobright)) {
     73c:	90 91 46 01 	lds	r25, 0x0146
     740:	95 fd       	sbrc	r25, 5
     742:	05 c0       	rjmp	.+10     	; 0x74e <init_boost+0x22>
		ocr0a = brightness;
     744:	80 93 3d 01 	sts	0x013D, r24
		OCR0A = ocr0a;
     748:	80 91 3d 01 	lds	r24, 0x013D
     74c:	87 bd       	out	0x27, r24	; 39
	}	

	// fast PWM, set OC0A (boost output pin) on match
	TCCR0A = _BV(WGM00) | _BV(WGM01);	
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	84 bd       	out	0x24, r24	; 36

	// Use the fastest clock
	TCCR0B = _BV(CS00);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	85 bd       	out	0x25, r24	; 37
 
	TCCR0A |= _BV(COM0A1);
     756:	84 b5       	in	r24, 0x24	; 36
     758:	80 68       	ori	r24, 0x80	; 128
     75a:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(TOIE0); // turn on the interrupt for muxing
     75c:	80 91 6e 00 	lds	r24, 0x006E
     760:	81 60       	ori	r24, 0x01	; 1
     762:	80 93 6e 00 	sts	0x006E, r24
}
     766:	08 95       	ret

00000768 <init_autobright>:

void init_autobright (void) {
	if (eeprom_read_byte ((uint8_t *)EE_AUTOB))
     768:	8e e0       	ldi	r24, 0x0E	; 14
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
     770:	88 23       	and	r24, r24
     772:	21 f0       	breq	.+8      	; 0x77c <init_autobright+0x14>
		set_flag (f_autobright);
     774:	80 91 46 01 	lds	r24, 0x0146
     778:	80 62       	ori	r24, 0x20	; 32
     77a:	03 c0       	rjmp	.+6      	; 0x782 <init_autobright+0x1a>
	else
		clr_flag (f_autobright);
     77c:	80 91 46 01 	lds	r24, 0x0146
     780:	8f 7d       	andi	r24, 0xDF	; 223
     782:	80 93 46 01 	sts	0x0146, r24
	
	adc_sum = 0;
     786:	10 92 1b 01 	sts	0x011B, r1
     78a:	10 92 1c 01 	sts	0x011C, r1
     78e:	10 92 1d 01 	sts	0x011D, r1
     792:	10 92 1e 01 	sts	0x011E, r1
	adc_count = 0;
     796:	10 92 18 01 	sts	0x0118, r1
     79a:	10 92 17 01 	sts	0x0117, r1
	if (flag(f_autobright)) {
     79e:	80 91 46 01 	lds	r24, 0x0146
     7a2:	85 ff       	sbrs	r24, 5
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <init_autobright+0x4a>
		ocr0a = 90;		// Start at maximum
     7a6:	8a e5       	ldi	r24, 0x5A	; 90
     7a8:	80 93 3d 01 	sts	0x013D, r24
		OCR0A = ocr0a;
     7ac:	80 91 3d 01 	lds	r24, 0x013D
     7b0:	87 bd       	out	0x27, r24	; 39
	}	

	//ADCSRA |= _BV(ADPS2)| _BV(ADPS1); // Set ADC prescalar to 64 - 125KHz sample rate @ 8MHz F_CPU
	ADMUX |= _BV(REFS0);	// Set ADC reference to AVCC
     7b2:	80 91 7c 00 	lds	r24, 0x007C
     7b6:	80 64       	ori	r24, 0x40	; 64
     7b8:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= 0x2;			// Set ADC input as ADC2
     7bc:	80 91 7c 00 	lds	r24, 0x007C
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 93 7c 00 	sts	0x007C, r24
	DIDR0 = _BV(ADC2D);		// Disable ADC2 digital input
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRB = 0;
     7cc:	10 92 7b 00 	sts	0x007B, r1
	// enable ADC and interrupts, divide clock by 128, start conversion
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | 0x7;
     7d0:	80 91 7a 00 	lds	r24, 0x007A
     7d4:	8f 6a       	ori	r24, 0xAF	; 175
     7d6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADSC);
     7da:	80 91 7a 00 	lds	r24, 0x007A
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	80 93 7a 00 	sts	0x007A, r24
}
     7e4:	08 95       	ret

000007e6 <dow>:
/**************************** TIME CALCULATIONS *****************************/

const char dow_tbl[] PROGMEM = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};

// Calculate day of the week by Sakamoto's method, 0=Sunday
uint8_t dow (uint8_t y, uint8_t m, uint8_t d) {
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
	uint16_t yy;		

	yy = y + 2000 - (m < 3);
     7ea:	c8 2f       	mov	r28, r24
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
     7ee:	c0 53       	subi	r28, 0x30	; 48
     7f0:	d8 4f       	sbci	r29, 0xF8	; 248
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	63 30       	cpi	r22, 0x03	; 3
     7f8:	10 f0       	brcs	.+4      	; 0x7fe <dow+0x18>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	c8 1b       	sub	r28, r24
     800:	d9 0b       	sbc	r29, r25
	return (yy + yy/4 - yy/100 + yy/400 + pgm_read_byte(dow_tbl + m-1) + d) % 7;
     802:	e6 2f       	mov	r30, r22
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	eb 5a       	subi	r30, 0xAB	; 171
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	e4 91       	lpm	r30, Z
     80c:	9e 01       	movw	r18, r28
     80e:	24 0f       	add	r18, r20
     810:	31 1d       	adc	r19, r1
     812:	ce 01       	movw	r24, r28
     814:	96 95       	lsr	r25
     816:	87 95       	ror	r24
     818:	96 95       	lsr	r25
     81a:	87 95       	ror	r24
     81c:	28 0f       	add	r18, r24
     81e:	39 1f       	adc	r19, r25
     820:	ce 01       	movw	r24, r28
     822:	60 e9       	ldi	r22, 0x90	; 144
     824:	71 e0       	ldi	r23, 0x01	; 1
     826:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
     82a:	26 0f       	add	r18, r22
     82c:	37 1f       	adc	r19, r23
     82e:	ce 01       	movw	r24, r28
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
     838:	26 1b       	sub	r18, r22
     83a:	37 0b       	sbc	r19, r23
     83c:	2e 0f       	add	r18, r30
     83e:	31 1d       	adc	r19, r1
     840:	c9 01       	movw	r24, r18
     842:	67 e0       	ldi	r22, 0x07	; 7
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <leapyear>:

// This will calculate leap years, give it the year
// and it will return 1 (true) or 0 (false)
uint8_t leapyear(uint16_t y)  {
     850:	9c 01       	movw	r18, r24
	return ( (!(y % 4) && (y % 100)) || !(y % 400));
     852:	83 70       	andi	r24, 0x03	; 3
     854:	90 70       	andi	r25, 0x00	; 0
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	39 f4       	brne	.+14     	; 0x868 <leapyear+0x18>
     85a:	c9 01       	movw	r24, r18
     85c:	64 e6       	ldi	r22, 0x64	; 100
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	61 f4       	brne	.+24     	; 0x880 <leapyear+0x30>
     868:	c9 01       	movw	r24, r18
     86a:	60 e9       	ldi	r22, 0x90	; 144
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	29 f0       	breq	.+10     	; 0x884 <leapyear+0x34>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	02 c0       	rjmp	.+4      	; 0x884 <leapyear+0x34>
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
}
     884:	82 2f       	mov	r24, r18
     886:	08 95       	ret

00000888 <monthlen>:

const char mon_tbl[] PROGMEM = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
PGM_P const mon_tbl_p PROGMEM = mon_tbl;

uint8_t monthlen(uint8_t y, uint8_t m) {
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	0f 92       	push	r0
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	uint8_t ml;
	if (m == 2 && leapyear(y+2000))
     892:	62 30       	cpi	r22, 0x02	; 2
     894:	49 f4       	brne	.+18     	; 0x8a8 <monthlen+0x20>
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	80 53       	subi	r24, 0x30	; 48
     89a:	98 4f       	sbci	r25, 0xF8	; 248
     89c:	69 83       	std	Y+1, r22	; 0x01
     89e:	0e 94 28 04 	call	0x850	; 0x850 <leapyear>
     8a2:	69 81       	ldd	r22, Y+1	; 0x01
     8a4:	88 23       	and	r24, r24
     8a6:	31 f4       	brne	.+12     	; 0x8b4 <monthlen+0x2c>
		ml = 29;
	else
		ml = pgm_read_byte(mon_tbl_p + (m-1));
     8a8:	e6 2f       	mov	r30, r22
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	e7 5b       	subi	r30, 0xB7	; 183
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	84 91       	lpm	r24, Z
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <monthlen+0x2e>
PGM_P const mon_tbl_p PROGMEM = mon_tbl;

uint8_t monthlen(uint8_t y, uint8_t m) {
	uint8_t ml;
	if (m == 2 && leapyear(y+2000))
		ml = 29;
     8b4:	8d e1       	ldi	r24, 0x1D	; 29
	else
		ml = pgm_read_byte(mon_tbl_p + (m-1));
	return ml;
}
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <dst>:
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	d4 2f       	mov	r29, r20
     8c4:	c2 2f       	mov	r28, r18
	uint8_t day;
	
	if (!flag(f_dst_enable)) return 0;
     8c6:	90 91 46 01 	lds	r25, 0x0146
     8ca:	93 ff       	sbrs	r25, 3
     8cc:	40 c0       	rjmp	.+128    	; 0x94e <__stack+0x4f>
	
	if (region == REGION_US) {
     8ce:	20 91 14 01 	lds	r18, 0x0114
     8d2:	96 2f       	mov	r25, r22
     8d4:	94 50       	subi	r25, 0x04	; 4
     8d6:	22 23       	and	r18, r18
     8d8:	81 f4       	brne	.+32     	; 0x8fa <dst+0x3c>
		if (March < m && m < November)
     8da:	97 30       	cpi	r25, 0x07	; 7
     8dc:	b0 f1       	brcs	.+108    	; 0x94a <__stack+0x4b>
			return 1;
		else if (m == March) {
     8de:	63 30       	cpi	r22, 0x03	; 3
     8e0:	29 f4       	brne	.+10     	; 0x8ec <dst+0x2e>
			day = 14 - dow (y, March, 14);	// 2nd Sunday
     8e2:	4e e0       	ldi	r20, 0x0E	; 14
     8e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
     8e8:	9e e0       	ldi	r25, 0x0E	; 14
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xb>
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == November) {
     8ec:	6b 30       	cpi	r22, 0x0B	; 11
     8ee:	79 f5       	brne	.+94     	; 0x94e <__stack+0x4f>
			day = 7 - dow (y, November, 7);	// 1st Sunday
     8f0:	47 e0       	ldi	r20, 0x07	; 7
     8f2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	18 c0       	rjmp	.+48     	; 0x92a <__stack+0x2b>
			return (d < day) || ((d == day) && (h < 1));
		} else
			return 0;
	} else {
		// European transition hour may be off, depending on timezone and country
		if (March < m && m < October)
     8fa:	96 30       	cpi	r25, 0x06	; 6
     8fc:	30 f1       	brcs	.+76     	; 0x94a <__stack+0x4b>
			return 1;
		else if (m == March) {
     8fe:	63 30       	cpi	r22, 0x03	; 3
     900:	71 f4       	brne	.+28     	; 0x91e <__stack+0x1f>
			day = 31 - dow (y, March, 31);	// last Sunday
     902:	4f e1       	ldi	r20, 0x1F	; 31
     904:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
     908:	9f e1       	ldi	r25, 0x1F	; 31
     90a:	98 1b       	sub	r25, r24
			return (d > day) || ((d == day) && (h > 1));
     90c:	9d 17       	cp	r25, r29
     90e:	b8 f0       	brcs	.+46     	; 0x93e <__stack+0x3f>
     910:	d9 17       	cp	r29, r25
     912:	c1 f4       	brne	.+48     	; 0x944 <__stack+0x45>
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	c2 30       	cpi	r28, 0x02	; 2
     91a:	d0 f4       	brcc	.+52     	; 0x950 <__stack+0x51>
     91c:	13 c0       	rjmp	.+38     	; 0x944 <__stack+0x45>
		if (March < m && m < October)
			return 1;
		else if (m == March) {
			day = 31 - dow (y, March, 31);	// last Sunday
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == October) {
     91e:	6a 30       	cpi	r22, 0x0A	; 10
     920:	b1 f4       	brne	.+44     	; 0x94e <__stack+0x4f>
			day = 31 - dow (y, October, 31);	// last Sunday
     922:	4f e1       	ldi	r20, 0x1F	; 31
     924:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
     928:	9f e1       	ldi	r25, 0x1F	; 31
     92a:	98 1b       	sub	r25, r24
			return (d < day) || ((d == day) && (h < 1));
     92c:	d9 17       	cp	r29, r25
     92e:	38 f0       	brcs	.+14     	; 0x93e <__stack+0x3f>
     930:	d9 17       	cp	r29, r25
     932:	41 f4       	brne	.+16     	; 0x944 <__stack+0x45>
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	cc 23       	and	r28, r28
     93a:	51 f0       	breq	.+20     	; 0x950 <__stack+0x51>
     93c:	03 c0       	rjmp	.+6      	; 0x944 <__stack+0x45>
		else if (m == March) {
			day = 31 - dow (y, March, 31);	// last Sunday
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == October) {
			day = 31 - dow (y, October, 31);	// last Sunday
			return (d < day) || ((d == day) && (h < 1));
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	06 c0       	rjmp	.+12     	; 0x950 <__stack+0x51>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
		} else
			return 0;
	} else {
		// European transition hour may be off, depending on timezone and country
		if (March < m && m < October)
			return 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
	uint8_t day;
	
	if (!flag(f_dst_enable)) return 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
			day = 31 - dow (y, October, 31);	// last Sunday
			return (d < day) || ((d == day) && (h < 1));
		} else
			return 0;		
	}
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <init_clock>:


/**************************** INITIALIZATION *****************************/


void init_clock(void) {
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	27 97       	sbiw	r28, 0x07	; 7
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
	uint8_t dt[7];
	uint8_t i;
	
	// Initialize Daylight Saving Time enable
	if (eeprom_read_byte ((uint8_t *)EE_DST))
     96a:	8d e0       	ldi	r24, 0x0D	; 13
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
     972:	88 23       	and	r24, r24
     974:	21 f0       	breq	.+8      	; 0x97e <init_clock+0x28>
		set_flag(f_dst_enable);
     976:	80 91 46 01 	lds	r24, 0x0146
     97a:	88 60       	ori	r24, 0x08	; 8
     97c:	03 c0       	rjmp	.+6      	; 0x984 <init_clock+0x2e>
	else
		clr_flag(f_dst_enable);
     97e:	80 91 46 01 	lds	r24, 0x0146
     982:	87 7f       	andi	r24, 0xF7	; 247
     984:	80 93 46 01 	sts	0x0146, r24
	
	// Read check values from ChronoDot alarm fields
	twiReadRegN(0xd0, 0x07, 7, dt);
     988:	80 ed       	ldi	r24, 0xD0	; 208
     98a:	67 e0       	ldi	r22, 0x07	; 7
     98c:	47 e0       	ldi	r20, 0x07	; 7
     98e:	9e 01       	movw	r18, r28
     990:	2f 5f       	subi	r18, 0xFF	; 255
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	0e 94 2c 12 	call	0x2458	; 0x2458 <twiReadRegN>
     998:	fe 01       	movw	r30, r28
     99a:	31 96       	adiw	r30, 0x01	; 1
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < 7; i++)
		if (dt[i] != i+1) break;
     9a0:	21 91       	ld	r18, Z+
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <init_clock+0x5e>
	else
		clr_flag(f_dst_enable);
	
	// Read check values from ChronoDot alarm fields
	twiReadRegN(0xd0, 0x07, 7, dt);
	for (i = 0; i < 7; i++)
     9ac:	87 30       	cpi	r24, 0x07	; 7
     9ae:	91 05       	cpc	r25, r1
     9b0:	b9 f7       	brne	.-18     	; 0x9a0 <init_clock+0x4a>
     9b2:	63 c0       	rjmp	.+198    	; 0xa7a <init_clock+0x124>
		if (dt[i] != i+1) break;
	if (i != 7) {
		DEBUGP("ChronoDot check failed!");
     9b4:	8f ec       	ldi	r24, 0xCF	; 207
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
		set_flag (f_timeunknown);	// let customer know time needs setting
     9be:	80 91 46 01 	lds	r24, 0x0146
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	4f c0       	rjmp	.+158    	; 0xa64 <init_clock+0x10e>
	} else {
		// Sync to start of ChronoDot second
		cli();
		
		time_s = twiReadReg(0xd0, 0x00);
		do twiReadRegN(0xd0, 0x00, 7, dt); while (dt[0] == time_s);
     9c6:	80 ed       	ldi	r24, 0xD0	; 208
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	47 e0       	ldi	r20, 0x07	; 7
     9cc:	9e 01       	movw	r18, r28
     9ce:	2f 5f       	subi	r18, 0xFF	; 255
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	0e 94 2c 12 	call	0x2458	; 0x2458 <twiReadRegN>
     9d6:	80 91 42 01 	lds	r24, 0x0142
     9da:	99 81       	ldd	r25, Y+1	; 0x01
     9dc:	98 17       	cp	r25, r24
     9de:	99 f3       	breq	.-26     	; 0x9c6 <init_clock+0x70>

		// Zero T/C2 to sync AVR to start of seconds
		GTCCR |= _BV(PSRASY) | _BV(TSM);
     9e0:	83 b5       	in	r24, 0x23	; 35
     9e2:	82 68       	ori	r24, 0x82	; 130
     9e4:	83 bd       	out	0x23, r24	; 35
		TCNT2 = 0;		
     9e6:	10 92 b2 00 	sts	0x00B2, r1
		GTCCR &= ~_BV(TSM);
     9ea:	83 b5       	in	r24, 0x23	; 35
     9ec:	8f 77       	andi	r24, 0x7F	; 127
     9ee:	83 bd       	out	0x23, r24	; 35
		
		time_s = bcd2b (dt[0]);		// BCD to binary decode
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     9f6:	80 93 42 01 	sts	0x0142, r24
		time_m = bcd2b (dt[1]);
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     a00:	80 93 35 01 	sts	0x0135, r24
		time_h = bcd2b (dt[2] & 0x3f);
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	8f 73       	andi	r24, 0x3F	; 63
     a08:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     a0c:	80 93 15 01 	sts	0x0115, r24

		date_d = bcd2b (dt[4]);
     a10:	8d 81       	ldd	r24, Y+5	; 0x05
     a12:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     a16:	80 93 29 01 	sts	0x0129, r24
		date_m = bcd2b (dt[5] & 0x1f);
     a1a:	8e 81       	ldd	r24, Y+6	; 0x06
     a1c:	8f 71       	andi	r24, 0x1F	; 31
     a1e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     a22:	80 93 3e 01 	sts	0x013E, r24
		//date_y = bcd2b (dt[6]);
		date_y = bcd2b (dt[6] + 1970);
     a26:	8f 81       	ldd	r24, Y+7	; 0x07
     a28:	8e 54       	subi	r24, 0x4E	; 78
     a2a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <bcd2b>
     a2e:	80 93 19 01 	sts	0x0119, r24
		
		sei();
     a32:	78 94       	sei

		clr_flag (f_timeunknown);
     a34:	80 91 46 01 	lds	r24, 0x0146
     a38:	8d 7f       	andi	r24, 0xFD	; 253
     a3a:	80 93 46 01 	sts	0x0146, r24
		
		// Initialize DST now since it is only done at top of hour
		set_dst_offset (date_y, date_m, date_d, time_h);
     a3e:	80 91 19 01 	lds	r24, 0x0119
     a42:	60 91 3e 01 	lds	r22, 0x013E
     a46:	40 91 29 01 	lds	r20, 0x0129
     a4a:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     a4e:	0e 94 5f 04 	call	0x8be	; 0x8be <dst>
     a52:	88 23       	and	r24, r24
     a54:	21 f0       	breq	.+8      	; 0xa5e <init_clock+0x108>
		set_flag (f_dst_offset);
     a56:	80 91 46 01 	lds	r24, 0x0146
     a5a:	81 60       	ori	r24, 0x01	; 1
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <init_clock+0x10e>
	else
		clr_flag (f_dst_offset);
     a5e:	80 91 46 01 	lds	r24, 0x0146
     a62:	8e 7f       	andi	r24, 0xFE	; 254
     a64:	80 93 46 01 	sts	0x0146, r24
		
		// Initialize DST now since it is only done at top of hour
		set_dst_offset (date_y, date_m, date_d, time_h);

	}
}
     a68:	27 96       	adiw	r28, 0x07	; 7
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret
	if (i != 7) {
		DEBUGP("ChronoDot check failed!");
		set_flag (f_timeunknown);	// let customer know time needs setting
	} else {
		// Sync to start of ChronoDot second
		cli();
     a7a:	f8 94       	cli
		
		time_s = twiReadReg(0xd0, 0x00);
     a7c:	80 ed       	ldi	r24, 0xD0	; 208
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	0e 94 ed 11 	call	0x23da	; 0x23da <twiReadReg>
     a84:	80 93 42 01 	sts	0x0142, r24
     a88:	9e cf       	rjmp	.-196    	; 0x9c6 <init_clock+0x70>

00000a8a <__vector_9>:
	PORTB &= ~_BV(SPK1) & ~_BV(SPK2);	// turn speaker off
}

// Timer 2 overflow -- master time base -- this goes off once a second
ISR (TIMER2_OVF_vect, ISR_NOBLOCK) 
{
     a8a:	78 94       	sei
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	cf 93       	push	r28
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	set_flag (f_display_update);	// Notify main loop of change in time
     ab0:	80 91 46 01 	lds	r24, 0x0146
     ab4:	80 61       	ori	r24, 0x10	; 16
     ab6:	80 93 46 01 	sts	0x0146, r24
	time_s++;				// One second has gone by
     aba:	80 91 42 01 	lds	r24, 0x0142
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	80 93 42 01 	sts	0x0142, r24

	if (time_s >= 60) {
     ac4:	80 91 42 01 	lds	r24, 0x0142
     ac8:	8c 33       	cpi	r24, 0x3C	; 60
     aca:	70 f1       	brcs	.+92     	; 0xb28 <__vector_9+0x9e>
		// a minute!
		uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
     acc:	30 91 15 01 	lds	r19, 0x0115
     ad0:	80 91 46 01 	lds	r24, 0x0146
		
		time_s = 0;
     ad4:	10 92 42 01 	sts	0x0142, r1
		time_m++;
     ad8:	90 91 35 01 	lds	r25, 0x0135
     adc:	9f 5f       	subi	r25, 0xFF	; 255
     ade:	90 93 35 01 	sts	0x0135, r25

		if (flag(f_alarm_on) && (alarm_h == h) && (alarm_m == time_m)) {
     ae2:	90 91 46 01 	lds	r25, 0x0146
     ae6:	96 ff       	sbrs	r25, 6
     ae8:	1f c0       	rjmp	.+62     	; 0xb28 <__vector_9+0x9e>
     aea:	20 91 38 01 	lds	r18, 0x0138
	set_flag (f_display_update);	// Notify main loop of change in time
	time_s++;				// One second has gone by

	if (time_s >= 60) {
		// a minute!
		uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	81 70       	andi	r24, 0x01	; 1
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	83 0f       	add	r24, r19
     af6:	91 1d       	adc	r25, r1
     af8:	68 e1       	ldi	r22, 0x18	; 24
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
		
		time_s = 0;
		time_m++;

		if (flag(f_alarm_on) && (alarm_h == h) && (alarm_m == time_m)) {
     b00:	28 17       	cp	r18, r24
     b02:	91 f4       	brne	.+36     	; 0xb28 <__vector_9+0x9e>
     b04:	90 91 1a 01 	lds	r25, 0x011A
     b08:	80 91 35 01 	lds	r24, 0x0135
     b0c:	98 17       	cp	r25, r24
     b0e:	61 f4       	brne	.+24     	; 0xb28 <__vector_9+0x9e>
			alarming = 1;	// Sound the alarm
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 3a 01 	sts	0x013A, r24
			snoozetimer = 0;
     b16:	10 92 44 01 	sts	0x0144, r1
     b1a:	10 92 43 01 	sts	0x0143, r1
			TCCR1A &= ~_BV(COM1A1);		// start at low volume
     b1e:	80 91 80 00 	lds	r24, 0x0080
     b22:	8f 77       	andi	r24, 0x7F	; 127
     b24:	80 93 80 00 	sts	0x0080, r24
		}
	}

	if (time_m >= 60) {
     b28:	80 91 35 01 	lds	r24, 0x0135
     b2c:	8c 33       	cpi	r24, 0x3C	; 60
     b2e:	e0 f0       	brcs	.+56     	; 0xb68 <__vector_9+0xde>
		// an hour...
		time_m = 0;
     b30:	10 92 35 01 	sts	0x0135, r1
		time_h++;
     b34:	80 91 15 01 	lds	r24, 0x0115
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 15 01 	sts	0x0115, r24
		
		set_dst_offset (date_y, date_m, date_d, time_h);	// re-calculate DST each hour
     b3e:	80 91 19 01 	lds	r24, 0x0119
     b42:	60 91 3e 01 	lds	r22, 0x013E
     b46:	40 91 29 01 	lds	r20, 0x0129
     b4a:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     b4e:	0e 94 5f 04 	call	0x8be	; 0x8be <dst>
     b52:	88 23       	and	r24, r24
     b54:	21 f0       	breq	.+8      	; 0xb5e <__vector_9+0xd4>
		set_flag (f_dst_offset);
     b56:	80 91 46 01 	lds	r24, 0x0146
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <__vector_9+0xda>
	else
		clr_flag (f_dst_offset);
     b5e:	80 91 46 01 	lds	r24, 0x0146
     b62:	8e 7f       	andi	r24, 0xFE	; 254
     b64:	80 93 46 01 	sts	0x0146, r24
		time_h++;
		
		set_dst_offset (date_y, date_m, date_d, time_h);	// re-calculate DST each hour
	}

	if (time_h >= 24) {
     b68:	80 91 15 01 	lds	r24, 0x0115
     b6c:	88 31       	cpi	r24, 0x18	; 24
     b6e:	38 f0       	brcs	.+14     	; 0xb7e <__vector_9+0xf4>
		// a day....
		time_h = 0;
     b70:	10 92 15 01 	sts	0x0115, r1
		date_d++;
     b74:	80 91 29 01 	lds	r24, 0x0129
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	80 93 29 01 	sts	0x0129, r24
	}

	if (date_d > monthlen(date_y, date_m)) {
     b7e:	c0 91 29 01 	lds	r28, 0x0129
     b82:	80 91 19 01 	lds	r24, 0x0119
     b86:	60 91 3e 01 	lds	r22, 0x013E
     b8a:	0e 94 44 04 	call	0x888	; 0x888 <monthlen>
     b8e:	8c 17       	cp	r24, r28
     b90:	40 f4       	brcc	.+16     	; 0xba2 <__vector_9+0x118>
		// a full month!
		date_d = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 29 01 	sts	0x0129, r24
		date_m++;
     b98:	80 91 3e 01 	lds	r24, 0x013E
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 3e 01 	sts	0x013E, r24
	}
	
	if (date_m > 12) {
     ba2:	80 91 3e 01 	lds	r24, 0x013E
     ba6:	8d 30       	cpi	r24, 0x0D	; 13
     ba8:	40 f0       	brcs	.+16     	; 0xbba <__vector_9+0x130>
		// HAPPY NEW YEAR!
		date_y++;
     baa:	80 91 19 01 	lds	r24, 0x0119
     bae:	8f 5f       	subi	r24, 0xFF	; 255
     bb0:	80 93 19 01 	sts	0x0119, r24
		date_m = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 3e 01 	sts	0x013E, r24
	}
	
	// Various countdown timers with 1-second clock rate
	if (snoozetimer)		snoozetimer--;
     bba:	80 91 43 01 	lds	r24, 0x0143
     bbe:	90 91 44 01 	lds	r25, 0x0144
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	29 f0       	breq	.+10     	; 0xbd0 <__vector_9+0x146>
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	90 93 44 01 	sts	0x0144, r25
     bcc:	80 93 43 01 	sts	0x0143, r24
	if (timeoutcounter)		timeoutcounter--;
     bd0:	80 91 40 01 	lds	r24, 0x0140
     bd4:	90 91 41 01 	lds	r25, 0x0141
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	29 f0       	breq	.+10     	; 0xbe6 <__vector_9+0x15c>
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	90 93 41 01 	sts	0x0141, r25
     be2:	80 93 40 01 	sts	0x0140, r24
}
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	cf 91       	pop	r28
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <display_clear>:

/**************************** DISPLAY *****************************/

void display_clear(void)
{
	memset (display, 0, DISPLAYSIZE);
     c0a:	89 e0       	ldi	r24, 0x09	; 9
     c0c:	ea e2       	ldi	r30, 0x2A	; 42
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <display_clear+0x8>
	DEBUGP("c")
     c18:	8a ef       	ldi	r24, 0xFA	; 250
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
}
     c22:	08 95       	ret

00000c24 <display_time>:
	display_str (d);
}
*/

// This displays a time on the clock
void display_time(uint8_t h, uint8_t m, uint8_t s) {
     c24:	28 2f       	mov	r18, r24
     c26:	36 2f       	mov	r19, r22
     c28:	84 2f       	mov	r24, r20
	 * 	8		32
	 * 		16			1
	 */

	// seconds and minutes are at the end
	display[8] =  pgm_read_byte(numbertable_p + (s % 10));
     c2a:	6a e0       	ldi	r22, 0x0A	; 10
     c2c:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     c30:	e9 2f       	mov	r30, r25
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ec 52       	subi	r30, 0x2C	; 44
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	e4 91       	lpm	r30, Z
     c3a:	e0 93 32 01 	sts	0x0132, r30
	display[7] =  pgm_read_byte(numbertable_p + (s / 10));
     c3e:	e8 2f       	mov	r30, r24
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ec 52       	subi	r30, 0x2C	; 44
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	e4 91       	lpm	r30, Z
     c48:	e0 93 31 01 	sts	0x0131, r30

	switch(s % 10) {
     c4c:	93 30       	cpi	r25, 0x03	; 3
     c4e:	c1 f0       	breq	.+48     	; 0xc80 <display_time+0x5c>
     c50:	94 30       	cpi	r25, 0x04	; 4
     c52:	28 f4       	brcc	.+10     	; 0xc5e <display_time+0x3a>
     c54:	91 30       	cpi	r25, 0x01	; 1
     c56:	81 f0       	breq	.+32     	; 0xc78 <display_time+0x54>
     c58:	92 30       	cpi	r25, 0x02	; 2
     c5a:	50 f4       	brcc	.+20     	; 0xc70 <display_time+0x4c>
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <display_time+0x48>
     c5e:	95 30       	cpi	r25, 0x05	; 5
     c60:	59 f0       	breq	.+22     	; 0xc78 <display_time+0x54>
     c62:	95 30       	cpi	r25, 0x05	; 5
     c64:	38 f0       	brcs	.+14     	; 0xc74 <display_time+0x50>
     c66:	96 30       	cpi	r25, 0x06	; 6
     c68:	59 f4       	brne	.+22     	; 0xc80 <display_time+0x5c>
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <display_time+0x58>
		case 0:
			display[3] = 0x08;
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <display_time+0x5e>
		case 1:
			display[3] = 0x02;
			display[6] = 0x02;
			break;
		case 2:
			display[3] = 0x40;
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <display_time+0x5e>
		case 3:
			display[3] = 0x80;
			display[6] = 0x80;
			break;
		case 4:
			display[3] = 0x04;
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <display_time+0x5e>
			display[6] = 0x04;
			break;
		case 5:
			display[3] = 0x02;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <display_time+0x5e>
			display[6] = 0x02;
			break;
		case 6:
			display[3] = 0x20;
     c7c:	80 e2       	ldi	r24, 0x20	; 32
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <display_time+0x5e>
			display[6] = 0x10;
		case 8:
			display[3] = 0x02;
			display[6] = 0x02;
		default:
			display[3] = 0x80;
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	80 93 2d 01 	sts	0x012D, r24
			display[6] = 0x80;
     c86:	80 93 30 01 	sts	0x0130, r24
		secondDisp+=1;
	}
	*/


	display[5] =  pgm_read_byte(numbertable_p + (m % 10));
     c8a:	4a e0       	ldi	r20, 0x0A	; 10
     c8c:	83 2f       	mov	r24, r19
     c8e:	64 2f       	mov	r22, r20
     c90:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     c94:	e9 2f       	mov	r30, r25
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ec 52       	subi	r30, 0x2C	; 44
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	e4 91       	lpm	r30, Z
     c9e:	e0 93 2f 01 	sts	0x012F, r30
	display[4] =  pgm_read_byte(numbertable_p + (m / 10)); 
     ca2:	e8 2f       	mov	r30, r24
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	ec 52       	subi	r30, 0x2C	; 44
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	e4 91       	lpm	r30, Z
     cac:	e0 93 2e 01 	sts	0x012E, r30


	// check euro (24h) or US (12h) style time
	if (region == REGION_US) {
     cb0:	80 91 14 01 	lds	r24, 0x0114
     cb4:	88 23       	and	r24, r24
     cb6:	11 f5       	brne	.+68     	; 0xcfc <display_time+0xd8>
		display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
     cb8:	82 2f       	mov	r24, r18
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0b 96       	adiw	r24, 0x0b	; 11
     cbe:	6c e0       	ldi	r22, 0x0C	; 12
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	6a e0       	ldi	r22, 0x0A	; 10
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
     cd0:	fc 01       	movw	r30, r24
     cd2:	ec 52       	subi	r30, 0x2C	; 44
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	e4 91       	lpm	r30, Z
     cd8:	e0 93 2c 01 	sts	0x012C, r30
		display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));
     cdc:	6c 52       	subi	r22, 0x2C	; 44
     cde:	7e 4f       	sbci	r23, 0xFE	; 254
     ce0:	fb 01       	movw	r30, r22
     ce2:	64 91       	lpm	r22, Z
     ce4:	60 93 2b 01 	sts	0x012B, r22

		// We use the '*' as an am/pm notice
		if (h >= 12)
			display[0] |= 0x1;  // 'pm' notice
     ce8:	80 91 2a 01 	lds	r24, 0x012A
	if (region == REGION_US) {
		display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
		display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));

		// We use the '*' as an am/pm notice
		if (h >= 12)
     cec:	2c 30       	cpi	r18, 0x0C	; 12
     cee:	10 f0       	brcs	.+4      	; 0xcf4 <display_time+0xd0>
			display[0] |= 0x1;  // 'pm' notice
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <display_time+0xd2>
		else 
			display[0] &= ~0x1;  // 'pm' notice
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 93 2a 01 	sts	0x012A, r24
     cfa:	08 95       	ret
	} else {
		display[2] =  pgm_read_byte(numbertable_p + ( (h%24) % 10));
     cfc:	82 2f       	mov	r24, r18
     cfe:	68 e1       	ldi	r22, 0x18	; 24
     d00:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     d04:	89 2f       	mov	r24, r25
     d06:	64 2f       	mov	r22, r20
     d08:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
     d0c:	e9 2f       	mov	r30, r25
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	ec 52       	subi	r30, 0x2C	; 44
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	e4 91       	lpm	r30, Z
     d16:	e0 93 2c 01 	sts	0x012C, r30
		display[1] =  pgm_read_byte(numbertable_p + ( (h%24) / 10));
     d1a:	e8 2f       	mov	r30, r24
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ec 52       	subi	r30, 0x2C	; 44
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	e4 91       	lpm	r30, Z
     d24:	e0 93 2b 01 	sts	0x012B, r30
     d28:	08 95       	ret

00000d2a <display_char>:
// Set bit 7 to turn on decimal point
void display_char (char c, uint8_t pos)
{
	uint8_t dp = 0;
	
	if (c & _BV(7)) {
     d2a:	87 ff       	sbrs	r24, 7
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <display_char+0xa>
		// if top bit set, turn on decimal point
		c &= 0x7f;
     d2e:	8f 77       	andi	r24, 0x7F	; 127
		dp = 0x01;
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <display_char+0xc>

// Numbers and letters are looked up in the font table!
// Set bit 7 to turn on decimal point
void display_char (char c, uint8_t pos)
{
	uint8_t dp = 0;
     d34:	90 e0       	ldi	r25, 0x00	; 0
	if (c & _BV(7)) {
		// if top bit set, turn on decimal point
		c &= 0x7f;
		dp = 0x01;
	}
	if (('a' <= c) && (c <= 'z')) {
     d36:	28 2f       	mov	r18, r24
     d38:	21 56       	subi	r18, 0x61	; 97
     d3a:	2a 31       	cpi	r18, 0x1A	; 26
     d3c:	28 f4       	brcc	.+10     	; 0xd48 <display_char+0x1e>
		display[pos] =	pgm_read_byte(alphatable_p + c - 'a') | dp;
     d3e:	e8 2f       	mov	r30, r24
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	e1 58       	subi	r30, 0x81	; 129
     d44:	fe 4f       	sbci	r31, 0xFE	; 254
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <display_char+0x2e>
	} else if (('0' <= c) && (c <= '9')) {
     d48:	28 2f       	mov	r18, r24
     d4a:	20 53       	subi	r18, 0x30	; 48
     d4c:	2a 30       	cpi	r18, 0x0A	; 10
     d4e:	60 f4       	brcc	.+24     	; 0xd68 <display_char+0x3e>
		display[pos] =	pgm_read_byte(numbertable_p + c - '0') | dp;
     d50:	e8 2f       	mov	r30, r24
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 55       	subi	r30, 0x5C	; 92
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	e4 91       	lpm	r30, Z
     d5a:	a6 2f       	mov	r26, r22
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	a6 5d       	subi	r26, 0xD6	; 214
     d60:	be 4f       	sbci	r27, 0xFE	; 254
     d62:	e9 2b       	or	r30, r25
     d64:	ec 93       	st	X, r30
     d66:	08 95       	ret
     d68:	a6 2f       	mov	r26, r22
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
	} else if (c == '-') {	
		display[pos] =	0x02 | dp;
     d6c:	a6 5d       	subi	r26, 0xD6	; 214
     d6e:	be 4f       	sbci	r27, 0xFE	; 254
	}
	if (('a' <= c) && (c <= 'z')) {
		display[pos] =	pgm_read_byte(alphatable_p + c - 'a') | dp;
	} else if (('0' <= c) && (c <= '9')) {
		display[pos] =	pgm_read_byte(numbertable_p + c - '0') | dp;
	} else if (c == '-') {	
     d70:	8d 32       	cpi	r24, 0x2D	; 45
     d72:	19 f4       	brne	.+6      	; 0xd7a <display_char+0x50>
		display[pos] =	0x02 | dp;
     d74:	92 60       	ori	r25, 0x02	; 2
     d76:	9c 93       	st	X, r25
     d78:	08 95       	ret
	} else {
		display[pos] = 0;			// spaces and other stuff are blanked :(
     d7a:	1c 92       	st	X, r1
     d7c:	08 95       	ret

00000d7e <display_Pstr>:
	}	
}

// Like display_str only argument is pointer to program memory
void display_Pstr(PGM_P s) 
{
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
	char c;
	uint8_t i, limit = DISPLAYSIZE;
	
#if DEBUG
	uart_putchar ('{');
     d88:	8b e7       	ldi	r24, 0x7B	; 123
     d8a:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
	uart_puts_P (s);
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <uart_puts_P>
	DEBUGP("}");
     d94:	8e ef       	ldi	r24, 0xFE	; 254
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
#endif
	display_clear();
     d9e:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>

// Like display_str only argument is pointer to program memory
void display_Pstr(PGM_P s) 
{
	char c;
	uint8_t i, limit = DISPLAYSIZE;
     da2:	09 e0       	ldi	r16, 0x09	; 9
	uart_putchar ('{');
	uart_puts_P (s);
	DEBUGP("}");
#endif
	display_clear();
	for (i=1; i < limit; s++, i++) {
     da4:	11 e0       	ldi	r17, 0x01	; 1
		c = pgm_read_byte (s);
     da6:	fe 01       	movw	r30, r28
     da8:	84 91       	lpm	r24, Z
		if (c == 0) break;
     daa:	88 23       	and	r24, r24
     dac:	99 f0       	breq	.+38     	; 0xdd4 <display_Pstr+0x56>
		if (c == '.') {
     dae:	8e 32       	cpi	r24, 0x2E	; 46
     db0:	51 f4       	brne	.+20     	; 0xdc6 <display_Pstr+0x48>
			i--;				// Can't do easy look-ahead in pgmspace,
     db2:	11 50       	subi	r17, 0x01	; 1
			display[i] |= 0x1;	//  so back up and add DP to display of previous char
     db4:	e1 2f       	mov	r30, r17
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	e6 5d       	subi	r30, 0xD6	; 214
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	80 81       	ld	r24, Z
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	80 83       	st	Z, r24
			limit++;
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <display_Pstr+0x4e>
		} else
			display_char (c, i);
     dc6:	61 2f       	mov	r22, r17
     dc8:	0e 94 95 06 	call	0xd2a	; 0xd2a <display_char>
	uart_putchar ('{');
	uart_puts_P (s);
	DEBUGP("}");
#endif
	display_clear();
	for (i=1; i < limit; s++, i++) {
     dcc:	21 96       	adiw	r28, 0x01	; 1
     dce:	1f 5f       	subi	r17, 0xFF	; 255
     dd0:	10 17       	cp	r17, r16
     dd2:	48 f3       	brcs	.-46     	; 0xda6 <display_Pstr+0x28>
			display[i] |= 0x1;	//  so back up and add DP to display of previous char
			limit++;
		} else
			display_char (c, i);
	}
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <set_dst>:

const char dst_on[] PROGMEM = " dst o.n. ";
const char dst_off[] PROGMEM = " dst o.f.f.";


void set_dst(void) {
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
	uint8_t mode = SHOW_MENU;
	uint8_t b;

	display_Pstr(PSTR("set dst"));
     dea:	8e eb       	ldi	r24, 0xBE	; 190
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	
	timeoutcounter = 5;
     df2:	85 e0       	ldi	r24, 0x05	; 5
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 41 01 	sts	0x0141, r25
     dfa:	80 93 40 01 	sts	0x0140, r24
const char dst_on[] PROGMEM = " dst o.n. ";
const char dst_off[] PROGMEM = " dst o.f.f.";


void set_dst(void) {
	uint8_t mode = SHOW_MENU;
     dfe:	c0 e0       	ldi	r28, 0x00	; 0
	timeoutcounter = 5;
	while (1) {
		kickthedog();
		b = buttons;
		if (b & 0x7) {
			timeoutcounter = 5;	
     e00:	65 e0       	ldi	r22, 0x05	; 5
     e02:	e6 2e       	mov	r14, r22
     e04:	f1 2c       	mov	r15, r1
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_DST) {
				flags ^= _BV(f_dst_enable);
     e06:	d8 e0       	ldi	r29, 0x08	; 8
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     e08:	a8 95       	wdr
	display_Pstr(PSTR("set dst"));
	
	timeoutcounter = 5;
	while (1) {
		kickthedog();
		b = buttons;
     e0a:	00 91 3b 01 	lds	r16, 0x013B
		if (b & 0x7) {
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	c8 01       	movw	r24, r16
     e12:	87 70       	andi	r24, 0x07	; 7
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	29 f0       	breq	.+10     	; 0xe24 <set_dst+0x46>
			timeoutcounter = 5;	
     e1a:	f0 92 41 01 	sts	0x0141, r15
     e1e:	e0 92 40 01 	sts	0x0140, r14
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <set_dst+0x58>
		} else if (!timeoutcounter) {	// timeout w/no buttons pressed after 3 seconds?
     e24:	80 91 40 01 	lds	r24, 0x0140
     e28:	90 91 41 01 	lds	r25, 0x0141
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	19 f4       	brne	.+6      	; 0xe36 <set_dst+0x58>
			set_flag(f_show_time);		 
     e30:	80 91 46 01 	lds	r24, 0x0146
     e34:	18 c0       	rjmp	.+48     	; 0xe66 <set_dst+0x88>
			break;
		}
		if (b & _BV(0)) { // mode change
     e36:	00 fd       	sbrc	r16, 0
     e38:	50 c0       	rjmp	.+160    	; 0xeda <set_dst+0xfc>
			break;
		}
		if (b & _BV(1)) {
     e3a:	01 ff       	sbrs	r16, 1
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <set_dst+0x90>
			button_clear(1);
     e3e:	80 91 3b 01 	lds	r24, 0x013B
     e42:	8d 7f       	andi	r24, 0xFD	; 253
     e44:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {	// first time through loop
				mode = SET_DST;
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e48:	80 91 46 01 	lds	r24, 0x0146
		if (b & _BV(0)) { // mode change
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {	// first time through loop
     e4c:	cc 23       	and	r28, r28
     e4e:	59 f4       	brne	.+22     	; 0xe66 <set_dst+0x88>
				mode = SET_DST;
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e50:	83 ff       	sbrs	r24, 3
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <set_dst+0x7c>
     e54:	88 e7       	ldi	r24, 0x78	; 120
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <set_dst+0x80>
     e5a:	8c e6       	ldi	r24, 0x6C	; 108
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {	// first time through loop
				mode = SET_DST;
     e62:	cc e0       	ldi	r28, 0x0C	; 12
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <set_dst+0x90>
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
			} else {	
				set_flag(f_show_time);
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	80 93 46 01 	sts	0x0146, r24
				break;
     e6c:	36 c0       	rjmp	.+108    	; 0xeda <set_dst+0xfc>
			}
		}
		if (b & _BV(2)) {
     e6e:	02 ff       	sbrs	r16, 2
     e70:	cb cf       	rjmp	.-106    	; 0xe08 <set_dst+0x2a>
			button_clear(2);
     e72:	80 91 3b 01 	lds	r24, 0x013B
     e76:	8b 7f       	andi	r24, 0xFB	; 251
     e78:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_DST) {
     e7c:	cc 30       	cpi	r28, 0x0C	; 12
     e7e:	21 f6       	brne	.-120    	; 0xe08 <set_dst+0x2a>
				flags ^= _BV(f_dst_enable);
     e80:	80 91 46 01 	lds	r24, 0x0146
     e84:	8d 27       	eor	r24, r29
     e86:	80 93 46 01 	sts	0x0146, r24
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e8a:	80 91 46 01 	lds	r24, 0x0146
     e8e:	83 ff       	sbrs	r24, 3
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <set_dst+0xba>
     e92:	88 e7       	ldi	r24, 0x78	; 120
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <set_dst+0xbe>
     e98:	8c e6       	ldi	r24, 0x6C	; 108
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
				eeprom_write_byte((uint8_t *)EE_DST, flag(f_dst_enable));
     ea0:	60 91 46 01 	lds	r22, 0x0146
     ea4:	68 70       	andi	r22, 0x08	; 8
     ea6:	8d e0       	ldi	r24, 0x0D	; 13
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
				set_dst_offset (date_y, date_m, date_d, time_h);
     eae:	80 91 19 01 	lds	r24, 0x0119
     eb2:	60 91 3e 01 	lds	r22, 0x013E
     eb6:	40 91 29 01 	lds	r20, 0x0129
     eba:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     ebe:	0e 94 5f 04 	call	0x8be	; 0x8be <dst>
     ec2:	88 23       	and	r24, r24
     ec4:	21 f0       	breq	.+8      	; 0xece <set_dst+0xf0>
		set_flag (f_dst_offset);
     ec6:	80 91 46 01 	lds	r24, 0x0146
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <set_dst+0xf6>
	else
		clr_flag (f_dst_offset);
     ece:	80 91 46 01 	lds	r24, 0x0146
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	80 93 46 01 	sts	0x0146, r24
     ed8:	97 cf       	rjmp	.-210    	; 0xe08 <set_dst+0x2a>
				eeprom_write_byte((uint8_t *)EE_DST, flag(f_dst_enable));
				set_dst_offset (date_y, date_m, date_d, time_h);
			}
		}
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	08 95       	ret

00000ee8 <set_region>:


const char region1[] PROGMEM = "usa-12hr";
const char region2[] PROGMEM = "eur-24hr";

void set_region(void) {
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
	uint8_t mode = SHOW_MENU;
	uint8_t b;

	display_Pstr(PSTR("set rgn "));
     ef0:	85 eb       	ldi	r24, 0xB5	; 181
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	
	timeoutcounter = 5;	
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 41 01 	sts	0x0141, r25
     f00:	80 93 40 01 	sts	0x0140, r24
	region = eeprom_read_byte((uint8_t *)EE_REGION);
     f04:	8b e0       	ldi	r24, 0x0B	; 11
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
     f0c:	80 93 14 01 	sts	0x0114, r24

const char region1[] PROGMEM = "usa-12hr";
const char region2[] PROGMEM = "eur-24hr";

void set_region(void) {
	uint8_t mode = SHOW_MENU;
     f10:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;	
     f12:	c5 e0       	ldi	r28, 0x05	; 5
     f14:	d0 e0       	ldi	r29, 0x00	; 0
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <set_region+0x32>
				break;
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_REG) {
     f18:	10 e0       	ldi	r17, 0x00	; 0
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     f1a:	a8 95       	wdr
	timeoutcounter = 5;	
	region = eeprom_read_byte((uint8_t *)EE_REGION);

	while (1) {
		kickthedog();
		b = buttons;
     f1c:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
     f20:	80 91 3b 01 	lds	r24, 0x013B
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	87 70       	andi	r24, 0x07	; 7
     f28:	90 70       	andi	r25, 0x00	; 0
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	29 f0       	breq	.+10     	; 0xf38 <set_region+0x50>
			timeoutcounter = 5;	
     f2e:	d0 93 41 01 	sts	0x0141, r29
     f32:	c0 93 40 01 	sts	0x0140, r28
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <set_region+0x5c>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
     f38:	80 91 40 01 	lds	r24, 0x0140
     f3c:	90 91 41 01 	lds	r25, 0x0141
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c1 f0       	breq	.+48     	; 0xf74 <set_region+0x8c>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // mode change
     f44:	00 fd       	sbrc	r16, 0
     f46:	3c c0       	rjmp	.+120    	; 0xfc0 <set_region+0xd8>
			// button_clear(0); leave it to trigger main loop
			break;
		}
		if (b & _BV(1)) {
     f48:	01 ff       	sbrs	r16, 1
     f4a:	1a c0       	rjmp	.+52     	; 0xf80 <set_region+0x98>
			button_clear(1);
     f4c:	80 91 3b 01 	lds	r24, 0x013B
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
     f56:	11 23       	and	r17, r17
     f58:	69 f4       	brne	.+26     	; 0xf74 <set_region+0x8c>
				// start!
				mode = SET_REG;
				// display region
				if (region == REGION_US) {
     f5a:	80 91 14 01 	lds	r24, 0x0114
     f5e:	88 23       	and	r24, r24
     f60:	19 f4       	brne	.+6      	; 0xf68 <set_region+0x80>
					display_Pstr(region1);
     f62:	8c e8       	ldi	r24, 0x8C	; 140
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <set_region+0x84>
				} else {
					display_Pstr(region2);
     f68:	83 e8       	ldi	r24, 0x83	; 131
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_REG;
     f70:	11 e0       	ldi	r17, 0x01	; 1
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <set_region+0x98>
					display_Pstr(region1);
				} else {
					display_Pstr(region2);
				}
			} else {	
				set_flag(f_show_time);
     f74:	80 91 46 01 	lds	r24, 0x0146
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	80 93 46 01 	sts	0x0146, r24
				break;
     f7e:	20 c0       	rjmp	.+64     	; 0xfc0 <set_region+0xd8>
			}
		}
		if (b & _BV(2)) {
     f80:	02 ff       	sbrs	r16, 2
     f82:	cb cf       	rjmp	.-106    	; 0xf1a <set_region+0x32>
			button_clear(2);
     f84:	80 91 3b 01 	lds	r24, 0x013B
     f88:	8b 7f       	andi	r24, 0xFB	; 251
     f8a:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_REG) {
     f8e:	11 30       	cpi	r17, 0x01	; 1
     f90:	19 f6       	brne	.-122    	; 0xf18 <set_region+0x30>
				region = !region;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 91 14 01 	lds	r25, 0x0114
     f98:	91 11       	cpse	r25, r1
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	80 93 14 01 	sts	0x0114, r24
				if (region == REGION_US) {
     fa0:	88 23       	and	r24, r24
     fa2:	19 f4       	brne	.+6      	; 0xfaa <set_region+0xc2>
					display_Pstr(region1);
     fa4:	8c e8       	ldi	r24, 0x8C	; 140
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <set_region+0xc6>
				} else {
					display_Pstr(region2);
     faa:	83 e8       	ldi	r24, 0x83	; 131
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
				}
				eeprom_write_byte((uint8_t *)EE_REGION, region);
     fb2:	8b e0       	ldi	r24, 0x0B	; 11
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	60 91 14 01 	lds	r22, 0x0114
     fba:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
     fbe:	ad cf       	rjmp	.-166    	; 0xf1a <set_region+0x32>
			}
		}
	}
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	08 95       	ret

00000fca <set_time>:
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
}

void set_time(void) 
{
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <set_time+0x1a>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <set_time+0x1c>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode;
	uint8_t hour, min, sec;
	uint8_t b;
		
	display_Pstr(PSTR("set time"));
     fea:	83 e8       	ldi	r24, 0x83	; 131
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>

	hour = time_h;
     ff2:	f0 90 15 01 	lds	r15, 0x0115
	min = time_m;
     ff6:	00 91 35 01 	lds	r16, 0x0135
	sec = time_s;
     ffa:	10 91 42 01 	lds	r17, 0x0142
	mode = SHOW_MENU;

	timeoutcounter = 5;
     ffe:	85 e0       	ldi	r24, 0x05	; 5
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	90 93 41 01 	sts	0x0141, r25
    1006:	80 93 40 01 	sts	0x0140, r24
	brepeat |= _BV(2);
    100a:	80 91 3f 01 	lds	r24, 0x013F
    100e:	84 60       	ori	r24, 0x04	; 4
    1010:	80 93 3f 01 	sts	0x013F, r24
	display_Pstr(PSTR("set time"));

	hour = time_h;
	min = time_m;
	sec = time_s;
	mode = SHOW_MENU;
    1014:	20 e0       	ldi	r18, 0x00	; 0
		b = buttons;
		if (b & _BV(0)) { // mode change
			break;
		}
		if (buttons & 0x7) {
			timeoutcounter = 45;	
    1016:	7d e2       	ldi	r23, 0x2D	; 45
    1018:	a7 2e       	mov	r10, r23
    101a:	b1 2c       	mov	r11, r1
				display[4] |= 0x1;
				display[5] |= 0x1;
				time_m = min;
			}
			if ((mode == SET_SEC) ) {
				sec = (sec+1) % 60;
    101c:	ec e3       	ldi	r30, 0x3C	; 60
    101e:	ce 2e       	mov	r12, r30
    1020:	d1 2c       	mov	r13, r1
		}
		if (b & _BV(2)) {
			button_clear(2);
			
			if (mode == SET_HOUR) {
				hour = (hour+1) % 24;
    1022:	f8 e1       	ldi	r31, 0x18	; 24
    1024:	8f 2e       	mov	r8, r31
    1026:	91 2c       	mov	r9, r1
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    1028:	a8 95       	wdr
	timeoutcounter = 5;
	brepeat |= _BV(2);
	
	while (1) {
		kickthedog();
		b = buttons;
    102a:	e0 90 3b 01 	lds	r14, 0x013B
		if (b & _BV(0)) { // mode change
    102e:	e0 fc       	sbrc	r14, 0
    1030:	06 c1       	rjmp	.+524    	; 0x123e <set_time+0x274>
			break;
		}
		if (buttons & 0x7) {
    1032:	80 91 3b 01 	lds	r24, 0x013B
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	87 70       	andi	r24, 0x07	; 7
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	29 f0       	breq	.+10     	; 0x104a <set_time+0x80>
			timeoutcounter = 45;	
    1040:	b0 92 41 01 	sts	0x0141, r11
    1044:	a0 92 40 01 	sts	0x0140, r10
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <set_time+0x8e>
			// longer timeout since user may be weaiting for clock sync
		} else if (!timeoutcounter) {
    104a:	80 91 40 01 	lds	r24, 0x0140
    104e:	90 91 41 01 	lds	r25, 0x0141
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <set_time+0x8e>
    1056:	8e c0       	rjmp	.+284    	; 0x1174 <set_time+0x1aa>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(1)) {
    1058:	e1 fe       	sbrs	r14, 1
    105a:	92 c0       	rjmp	.+292    	; 0x1180 <set_time+0x1b6>
			button_clear(1);
    105c:	80 91 3b 01 	lds	r24, 0x013B
    1060:	8d 7f       	andi	r24, 0xFD	; 253
    1062:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    1066:	22 23       	and	r18, r18
    1068:	b9 f4       	brne	.+46     	; 0x1098 <set_time+0xce>
				hour = time_h;
    106a:	f0 90 15 01 	lds	r15, 0x0115
				min = time_m;
    106e:	00 91 35 01 	lds	r16, 0x0135
				sec = time_s;
    1072:	10 91 42 01 	lds	r17, 0x0142

				// ok now its selected
				mode = SET_HOUR;
				display_time(hour, min, sec);
    1076:	8f 2d       	mov	r24, r15
    1078:	60 2f       	mov	r22, r16
    107a:	41 2f       	mov	r20, r17
    107c:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[1] |= 0x1;
    1080:	80 91 2b 01 	lds	r24, 0x012B
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;	
    108a:	80 91 2c 01 	lds	r24, 0x012C
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	80 93 2c 01 	sts	0x012C, r24
				hour = time_h;
				min = time_m;
				sec = time_s;

				// ok now its selected
				mode = SET_HOUR;
    1094:	21 e0       	ldi	r18, 0x01	; 1
    1096:	74 c0       	rjmp	.+232    	; 0x1180 <set_time+0x1b6>
				display_time(hour, min, sec);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
    1098:	21 30       	cpi	r18, 0x01	; 1
    109a:	89 f4       	brne	.+34     	; 0x10be <set_time+0xf4>
				mode = SET_MIN;
				display_time(hour, min, sec);
    109c:	8f 2d       	mov	r24, r15
    109e:	60 2f       	mov	r22, r16
    10a0:	41 2f       	mov	r20, r17
    10a2:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[4] |= 0x1;
    10a6:	80 91 2e 01 	lds	r24, 0x012E
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    10b0:	80 91 2f 01 	lds	r24, 0x012F
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	80 93 2f 01 	sts	0x012F, r24
				mode = SET_HOUR;
				display_time(hour, min, sec);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
				mode = SET_MIN;
    10ba:	22 e0       	ldi	r18, 0x02	; 2
    10bc:	61 c0       	rjmp	.+194    	; 0x1180 <set_time+0x1b6>
				display_time(hour, min, sec);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (mode == SET_MIN) {
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	11 f0       	breq	.+4      	; 0x10c6 <set_time+0xfc>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	11 c0       	rjmp	.+34     	; 0x10e8 <set_time+0x11e>
				mode = SET_SEC;
				display_time(hour, min, sec);
    10c6:	8f 2d       	mov	r24, r15
    10c8:	60 2f       	mov	r22, r16
    10ca:	41 2f       	mov	r20, r17
    10cc:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[7] |= 0x1;
    10d0:	80 91 31 01 	lds	r24, 0x0131
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    10da:	80 91 32 01 	lds	r24, 0x0132
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 93 32 01 	sts	0x0132, r24
				mode = SET_MIN;
				display_time(hour, min, sec);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (mode == SET_MIN) {
				mode = SET_SEC;
    10e4:	23 e0       	ldi	r18, 0x03	; 3
    10e6:	4c c0       	rjmp	.+152    	; 0x1180 <set_time+0x1b6>
uint8_t bcd2b (uint8_t bcd) {
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
}

void set_time(void) 
    10e8:	62 2f       	mov	r22, r18
    10ea:	69 5f       	subi	r22, 0xF9	; 249
				// done!
				uint8_t dt[3];
				uint8_t i;
				
				for (i = 0; i < 7; i++)
					twiWriteReg(0xd0, 0x07+i, i+1);		// Write check values into alarm fields
    10ec:	2f 5f       	subi	r18, 0xFF	; 255
    10ee:	80 ed       	ldi	r24, 0xD0	; 208
    10f0:	42 2f       	mov	r20, r18
    10f2:	2c 83       	std	Y+4, r18	; 0x04
    10f4:	0e 94 81 11 	call	0x2302	; 0x2302 <twiWriteReg>
			} else {
				// done!
				uint8_t dt[3];
				uint8_t i;
				
				for (i = 0; i < 7; i++)
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	27 30       	cpi	r18, 0x07	; 7
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <set_time+0x11e>
					twiWriteReg(0xd0, 0x07+i, i+1);		// Write check values into alarm fields
				
				time_h = hour;
    10fe:	f0 92 15 01 	sts	0x0115, r15
				time_m = min;
    1102:	00 93 35 01 	sts	0x0135, r16
				time_s = sec;
    1106:	10 93 42 01 	sts	0x0142, r17
				
				TCNT2 = 0;		// Sync AVR to start of seconds
    110a:	10 92 b2 00 	sts	0x00B2, r1
				
				// Update ChronoDot
				dt[0] = b2bcd(sec);
    110e:	81 2f       	mov	r24, r17
    1110:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    1114:	89 83       	std	Y+1, r24	; 0x01
				dt[1] = b2bcd(min);
    1116:	80 2f       	mov	r24, r16
    1118:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    111c:	8a 83       	std	Y+2, r24	; 0x02
				dt[2] = b2bcd(hour);
    111e:	8f 2d       	mov	r24, r15
    1120:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    1124:	8b 83       	std	Y+3, r24	; 0x03
				twiWriteRegN(0xd0, 0x00, 3, dt);
    1126:	80 ed       	ldi	r24, 0xD0	; 208
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	43 e0       	ldi	r20, 0x03	; 3
    112c:	9e 01       	movw	r18, r28
    112e:	2f 5f       	subi	r18, 0xFF	; 255
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	0e 94 b2 11 	call	0x2364	; 0x2364 <twiWriteRegN>
				
				set_dst_offset (date_y, date_m, date_d, time_h);
    1136:	80 91 19 01 	lds	r24, 0x0119
    113a:	60 91 3e 01 	lds	r22, 0x013E
    113e:	40 91 29 01 	lds	r20, 0x0129
    1142:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
    1146:	0e 94 5f 04 	call	0x8be	; 0x8be <dst>
    114a:	88 23       	and	r24, r24
    114c:	21 f0       	breq	.+8      	; 0x1156 <set_time+0x18c>
		set_flag (f_dst_offset);
    114e:	80 91 46 01 	lds	r24, 0x0146
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	03 c0       	rjmp	.+6      	; 0x115c <set_time+0x192>
	else
		clr_flag (f_dst_offset);
    1156:	80 91 46 01 	lds	r24, 0x0146
    115a:	8e 7f       	andi	r24, 0xFE	; 254
    115c:	80 93 46 01 	sts	0x0146, r24
				dt[1] = b2bcd(min);
				dt[2] = b2bcd(hour);
				twiWriteRegN(0xd0, 0x00, 3, dt);
				
				set_dst_offset (date_y, date_m, date_d, time_h);
				clr_flag(f_timeunknown);
    1160:	80 91 46 01 	lds	r24, 0x0146
    1164:	8d 7f       	andi	r24, 0xFD	; 253
    1166:	80 93 46 01 	sts	0x0146, r24
				DEBUGP ("ChronoDot set!");
    116a:	8c e8       	ldi	r24, 0x8C	; 140
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
				
				set_flag(f_show_time);
    1174:	80 91 46 01 	lds	r24, 0x0146
    1178:	80 68       	ori	r24, 0x80	; 128
    117a:	80 93 46 01 	sts	0x0146, r24
				break;
    117e:	5f c0       	rjmp	.+190    	; 0x123e <set_time+0x274>
			}
		}
		if (b & _BV(2)) {
    1180:	e2 fe       	sbrs	r14, 2
    1182:	52 cf       	rjmp	.-348    	; 0x1028 <set_time+0x5e>
			button_clear(2);
    1184:	80 91 3b 01 	lds	r24, 0x013B
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	80 93 3b 01 	sts	0x013B, r24
			
			if (mode == SET_HOUR) {
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	d1 f4       	brne	.+52     	; 0x11c6 <set_time+0x1fc>
				hour = (hour+1) % 24;
    1192:	8f 2d       	mov	r24, r15
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	b4 01       	movw	r22, r8
    119a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    119e:	e8 2e       	mov	r14, r24
    11a0:	f8 2e       	mov	r15, r24
				display_time(hour, min, sec);
    11a2:	60 2f       	mov	r22, r16
    11a4:	41 2f       	mov	r20, r17
    11a6:	2c 83       	std	Y+4, r18	; 0x04
    11a8:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[1] |= 0x1;
    11ac:	80 91 2b 01 	lds	r24, 0x012B
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    11b6:	80 91 2c 01 	lds	r24, 0x012C
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	80 93 2c 01 	sts	0x012C, r24
				time_h = hour;
    11c0:	e0 92 15 01 	sts	0x0115, r14
    11c4:	3a c0       	rjmp	.+116    	; 0x123a <set_time+0x270>
			}
			if (mode == SET_MIN) {
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	d9 f4       	brne	.+54     	; 0x1200 <set_time+0x236>
				min = (min+1) % 60;
    11ca:	80 2f       	mov	r24, r16
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    11d6:	e8 2e       	mov	r14, r24
    11d8:	08 2f       	mov	r16, r24
				display_time(hour, min, sec);
    11da:	8f 2d       	mov	r24, r15
    11dc:	6e 2d       	mov	r22, r14
    11de:	41 2f       	mov	r20, r17
    11e0:	2c 83       	std	Y+4, r18	; 0x04
    11e2:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[4] |= 0x1;
    11e6:	80 91 2e 01 	lds	r24, 0x012E
    11ea:	81 60       	ori	r24, 0x01	; 1
    11ec:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    11f0:	80 91 2f 01 	lds	r24, 0x012F
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 93 2f 01 	sts	0x012F, r24
				time_m = min;
    11fa:	e0 92 35 01 	sts	0x0135, r14
    11fe:	1d c0       	rjmp	.+58     	; 0x123a <set_time+0x270>
			}
			if ((mode == SET_SEC) ) {
    1200:	23 30       	cpi	r18, 0x03	; 3
    1202:	09 f0       	breq	.+2      	; 0x1206 <set_time+0x23c>
    1204:	11 cf       	rjmp	.-478    	; 0x1028 <set_time+0x5e>
				sec = (sec+1) % 60;
    1206:	81 2f       	mov	r24, r17
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	b6 01       	movw	r22, r12
    120e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    1212:	e8 2e       	mov	r14, r24
    1214:	18 2f       	mov	r17, r24
				display_time(hour, min, sec);
    1216:	8f 2d       	mov	r24, r15
    1218:	60 2f       	mov	r22, r16
    121a:	4e 2d       	mov	r20, r14
    121c:	2c 83       	std	Y+4, r18	; 0x04
    121e:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>
				display[7] |= 0x1;
    1222:	80 91 31 01 	lds	r24, 0x0131
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    122c:	80 91 32 01 	lds	r24, 0x0132
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 93 32 01 	sts	0x0132, r24
				time_s = sec;
    1236:	e0 92 42 01 	sts	0x0142, r14
    123a:	2c 81       	ldd	r18, Y+4	; 0x04
    123c:	f5 ce       	rjmp	.-534    	; 0x1028 <set_time+0x5e>
			}
		}
	}
	brepeat &= ~_BV(2);
    123e:	80 91 3f 01 	lds	r24, 0x013F
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	80 93 3f 01 	sts	0x013F, r24
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <setsnooze>:
// When the alarm is going off, pressing a button turns on snooze mode
// this sets the snoozetimer off in MAXSNOOZE seconds - which turns on
// the alarm again
void setsnooze(void)
{
	snoozetimer = MAXSNOOZE;
    126a:	88 e5       	ldi	r24, 0x58	; 88
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	90 93 44 01 	sts	0x0144, r25
    1272:	80 93 43 01 	sts	0x0143, r24
	DEBUGP("snooze");
    1276:	8a ef       	ldi	r24, 0xFA	; 250
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	display_Pstr(PSTR("snoozing"));
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	clr_flag (f_show_time);
    1288:	80 91 46 01 	lds	r24, 0x0146
    128c:	8f 77       	andi	r24, 0x7F	; 127
    128e:	80 93 46 01 	sts	0x0146, r24
	delayms(1000);
    1292:	88 ee       	ldi	r24, 0xE8	; 232
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
	set_flag (f_show_time);
    129a:	80 91 46 01 	lds	r24, 0x0146
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	80 93 46 01 	sts	0x0146, r24
}
    12a4:	08 95       	ret

000012a6 <display_str>:
	display_str (d);
}

// display words (menus, prompts, etc)
void display_str(char *s) 
{
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
	uint8_t i, limit = DISPLAYSIZE;
	
#if DEBUG
	uart_putchar('[');
    12b0:	8b e5       	ldi	r24, 0x5B	; 91
    12b2:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
	uart_puts(s);
    12b6:	ce 01       	movw	r24, r28
    12b8:	0e 94 ed 12 	call	0x25da	; 0x25da <uart_puts>
	DEBUGP("]");
    12bc:	8c ef       	ldi	r24, 0xFC	; 252
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
}

// display words (menus, prompts, etc)
void display_str(char *s) 
{
	uint8_t i, limit = DISPLAYSIZE;
    12c6:	09 e0       	ldi	r16, 0x09	; 9
	uart_puts(s);
	DEBUGP("]");
#endif

	// up to 8 characters
	for (i = 1; *s && i < limit; s++, i++) {
    12c8:	11 e0       	ldi	r17, 0x01	; 1
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <display_str+0x44>
		if (*(s+1) == '.') {
    12cc:	99 81       	ldd	r25, Y+1	; 0x01
    12ce:	9e 32       	cpi	r25, 0x2E	; 46
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <display_str+0x3a>
			// Period follows: add decimal point to this character
			display_char (*s++ | 0x80, i);
    12d2:	21 96       	adiw	r28, 0x01	; 1
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	61 2f       	mov	r22, r17
    12d8:	0e 94 95 06 	call	0xd2a	; 0xd2a <display_char>
			limit++;
    12dc:	0f 5f       	subi	r16, 0xFF	; 255
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <display_str+0x40>
		} else
			display_char (*s, i);
    12e0:	61 2f       	mov	r22, r17
    12e2:	0e 94 95 06 	call	0xd2a	; 0xd2a <display_char>
	uart_puts(s);
	DEBUGP("]");
#endif

	// up to 8 characters
	for (i = 1; *s && i < limit; s++, i++) {
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	1f 5f       	subi	r17, 0xFF	; 255
    12ea:	88 81       	ld	r24, Y
    12ec:	88 23       	and	r24, r24
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <display_str+0x4e>
    12f0:	10 17       	cp	r17, r16
    12f2:	60 f3       	brcs	.-40     	; 0x12cc <display_str+0x26>
			display_char (*s++ | 0x80, i);
			limit++;
		} else
			display_char (*s, i);
	}	
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <display_temp>:
}

const char temp_fmt[] PROGMEM = " %3d.%d%c";

void display_temp(void) 
{
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2b 97       	sbiw	r28, 0x0b	; 11
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
	char c, d[DISPLAYSIZE];
	uint8_t dt[2];
	uint16_t t;
	
	twiReadRegN (0xd0, 0x11, 2, dt);	// Read temperature from ChronoDot
    1316:	80 ed       	ldi	r24, 0xD0	; 208
    1318:	61 e1       	ldi	r22, 0x11	; 17
    131a:	42 e0       	ldi	r20, 0x02	; 2
    131c:	9e 01       	movw	r18, r28
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	0e 94 2c 12 	call	0x2458	; 0x2458 <twiReadRegN>
	t = ((dt[0] << 8) | dt[1]) >> 6;	// in degrees C/4
    1326:	99 81       	ldd	r25, Y+1	; 0x01
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	0a 81       	ldd	r16, Y+2	; 0x02
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	08 2b       	or	r16, r24
    1330:	19 2b       	or	r17, r25
    1332:	a6 e0       	ldi	r26, 0x06	; 6
    1334:	15 95       	asr	r17
    1336:	07 95       	ror	r16
    1338:	aa 95       	dec	r26
    133a:	e1 f7       	brne	.-8      	; 0x1334 <display_temp+0x36>

	display_clear ();
    133c:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>
	//if (region == REGION_US) {
		t = t * 9/5 + (32 << 2);		// convert to degrees F/4
    1340:	c8 01       	movw	r24, r16
    1342:	b3 e0       	ldi	r27, 0x03	; 3
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	ba 95       	dec	r27
    134a:	e1 f7       	brne	.-8      	; 0x1344 <display_temp+0x46>
    134c:	80 0f       	add	r24, r16
    134e:	91 1f       	adc	r25, r17
    1350:	65 e0       	ldi	r22, 0x05	; 5
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
    1358:	60 58       	subi	r22, 0x80	; 128
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
	/*
	} else {
		c = 'c';
	}
	*/
	sprintf_P (d, temp_fmt, t/4, (t % 4)*10/4, c);
    135c:	8d b7       	in	r24, 0x3d	; 61
    135e:	9e b7       	in	r25, 0x3e	; 62
    1360:	0a 97       	sbiw	r24, 0x0a	; 10
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	9e bf       	out	0x3e, r25	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	8d bf       	out	0x3d, r24	; 61
    136c:	ed b7       	in	r30, 0x3d	; 61
    136e:	fe b7       	in	r31, 0x3e	; 62
    1370:	31 96       	adiw	r30, 0x01	; 1
    1372:	8e 01       	movw	r16, r28
    1374:	0d 5f       	subi	r16, 0xFD	; 253
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	ad b7       	in	r26, 0x3d	; 61
    137a:	be b7       	in	r27, 0x3e	; 62
    137c:	12 96       	adiw	r26, 0x02	; 2
    137e:	1c 93       	st	X, r17
    1380:	0e 93       	st	-X, r16
    1382:	11 97       	sbiw	r26, 0x01	; 1
    1384:	88 e6       	ldi	r24, 0x68	; 104
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	cb 01       	movw	r24, r22
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	95 83       	std	Z+5, r25	; 0x05
    1398:	84 83       	std	Z+4, r24	; 0x04
    139a:	63 70       	andi	r22, 0x03	; 3
    139c:	70 70       	andi	r23, 0x00	; 0
    139e:	cb 01       	movw	r24, r22
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	43 e0       	ldi	r20, 0x03	; 3
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	4a 95       	dec	r20
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <display_temp+0xa8>
    13ae:	86 0f       	add	r24, r22
    13b0:	97 1f       	adc	r25, r23
    13b2:	96 95       	lsr	r25
    13b4:	87 95       	ror	r24
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 83       	std	Z+7, r25	; 0x07
    13bc:	86 83       	std	Z+6, r24	; 0x06
    13be:	86 e6       	ldi	r24, 0x66	; 102
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	91 87       	std	Z+9, r25	; 0x09
    13c4:	80 87       	std	Z+8, r24	; 0x08
    13c6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
	display_str (d);
    13ca:	8d b7       	in	r24, 0x3d	; 61
    13cc:	9e b7       	in	r25, 0x3e	; 62
    13ce:	0a 96       	adiw	r24, 0x0a	; 10
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	9e bf       	out	0x3e, r25	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	8d bf       	out	0x3d, r24	; 61
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
}
    13e0:	2b 96       	adiw	r28, 0x0b	; 11
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <display_alarm>:
const char alarm_fmt1[] PROGMEM = "%2d:%02d %cm";
const char alarm_fmt2[] PROGMEM = "%02d:%02d";

// Kinda like display_time but just hours and minutes
void display_alarm(uint8_t h, uint8_t m)
{ 
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	2a 97       	sbiw	r28, 0x0a	; 10
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	16 2f       	mov	r17, r22
	char c, d[DISPLAYSIZE];

	display_clear();
    140e:	8a 87       	std	Y+10, r24	; 0x0a
    1410:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>

	// check euro or US style time
	if (region == REGION_US) {
    1414:	90 91 14 01 	lds	r25, 0x0114
    1418:	8a 85       	ldd	r24, Y+10	; 0x0a
    141a:	99 23       	and	r25, r25
    141c:	91 f5       	brne	.+100    	; 0x1482 <display_alarm+0x8c>
		c = (h >= 12) ? 'p' : 'a';
    141e:	8c 30       	cpi	r24, 0x0C	; 12
    1420:	10 f0       	brcs	.+4      	; 0x1426 <display_alarm+0x30>
    1422:	20 e7       	ldi	r18, 0x70	; 112
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <display_alarm+0x32>
    1426:	21 e6       	ldi	r18, 0x61	; 97
		h = (h+11)%12+1;
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0b 96       	adiw	r24, 0x0b	; 11
    142c:	6c e0       	ldi	r22, 0x0C	; 12
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
		sprintf_P (d, alarm_fmt1, h, m, c);
    1434:	4d b7       	in	r20, 0x3d	; 61
    1436:	5e b7       	in	r21, 0x3e	; 62
    1438:	4a 50       	subi	r20, 0x0A	; 10
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	5e bf       	out	0x3e, r21	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	4d bf       	out	0x3d, r20	; 61
    1446:	ed b7       	in	r30, 0x3d	; 61
    1448:	fe b7       	in	r31, 0x3e	; 62
    144a:	31 96       	adiw	r30, 0x01	; 1
    144c:	ae 01       	movw	r20, r28
    144e:	4f 5f       	subi	r20, 0xFF	; 255
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	ad b7       	in	r26, 0x3d	; 61
    1454:	be b7       	in	r27, 0x3e	; 62
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	5c 93       	st	X, r21
    145a:	4e 93       	st	-X, r20
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	4c e7       	ldi	r20, 0x7C	; 124
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	53 83       	std	Z+3, r21	; 0x03
    1464:	42 83       	std	Z+2, r20	; 0x02
	display_clear();

	// check euro or US style time
	if (region == REGION_US) {
		c = (h >= 12) ? 'p' : 'a';
		h = (h+11)%12+1;
    1466:	8f 5f       	subi	r24, 0xFF	; 255
		sprintf_P (d, alarm_fmt1, h, m, c);
    1468:	84 83       	std	Z+4, r24	; 0x04
    146a:	15 82       	std	Z+5, r1	; 0x05
    146c:	16 83       	std	Z+6, r17	; 0x06
    146e:	17 82       	std	Z+7, r1	; 0x07
    1470:	20 87       	std	Z+8, r18	; 0x08
    1472:	11 86       	std	Z+9, r1	; 0x09
    1474:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
    1478:	2d b7       	in	r18, 0x3d	; 61
    147a:	3e b7       	in	r19, 0x3e	; 62
    147c:	26 5f       	subi	r18, 0xF6	; 246
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	23 c0       	rjmp	.+70     	; 0x14c8 <display_alarm+0xd2>
	} else
		sprintf_P (d, alarm_fmt2, h, m);
    1482:	4d b7       	in	r20, 0x3d	; 61
    1484:	5e b7       	in	r21, 0x3e	; 62
    1486:	48 50       	subi	r20, 0x08	; 8
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	5e bf       	out	0x3e, r21	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	4d bf       	out	0x3d, r20	; 61
    1494:	ed b7       	in	r30, 0x3d	; 61
    1496:	fe b7       	in	r31, 0x3e	; 62
    1498:	31 96       	adiw	r30, 0x01	; 1
    149a:	9e 01       	movw	r18, r28
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	ad b7       	in	r26, 0x3d	; 61
    14a2:	be b7       	in	r27, 0x3e	; 62
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	3c 93       	st	X, r19
    14a8:	2e 93       	st	-X, r18
    14aa:	11 97       	sbiw	r26, 0x01	; 1
    14ac:	22 e7       	ldi	r18, 0x72	; 114
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	33 83       	std	Z+3, r19	; 0x03
    14b2:	22 83       	std	Z+2, r18	; 0x02
    14b4:	84 83       	std	Z+4, r24	; 0x04
    14b6:	15 82       	std	Z+5, r1	; 0x05
    14b8:	16 83       	std	Z+6, r17	; 0x06
    14ba:	17 82       	std	Z+7, r1	; 0x07
    14bc:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
    14c0:	2d b7       	in	r18, 0x3d	; 61
    14c2:	3e b7       	in	r19, 0x3e	; 62
    14c4:	28 5f       	subi	r18, 0xF8	; 248
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	3e bf       	out	0x3e, r19	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	2d bf       	out	0x3d, r18	; 61
	display_str (d);
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
}
    14da:	2a 96       	adiw	r28, 0x0a	; 10
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	08 95       	ret

000014ee <setalarmstate>:
}

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(uint8_t on) {
	if (on) { 
    14ee:	88 23       	and	r24, r24
    14f0:	51 f1       	breq	.+84     	; 0x1546 <setalarmstate+0x58>
		// Don't display the alarm/beep if we already have
		if	(!flag(f_alarm_on)) {
    14f2:	80 91 46 01 	lds	r24, 0x0146
    14f6:	86 fd       	sbrc	r24, 6
    14f8:	46 c0       	rjmp	.+140    	; 0x1586 <setalarmstate+0x98>
			set_flag (f_alarm_on);						// alarm on!
    14fa:	80 91 46 01 	lds	r24, 0x0146
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	80 93 46 01 	sts	0x0146, r24
			snoozetimer = 0;					// reset snoozing
    1504:	10 92 44 01 	sts	0x0144, r1
    1508:	10 92 43 01 	sts	0x0143, r1
			display_Pstr(PSTR("alarm on"));			// show the status on the VFD tube
    150c:	81 ef       	ldi	r24, 0xF1	; 241
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
			clr_flag(f_show_time);			// its not actually SHOW_SNOOZE but just anything but SHOW_TIME
    1514:	80 91 46 01 	lds	r24, 0x0146
    1518:	8f 77       	andi	r24, 0x7F	; 127
    151a:	80 93 46 01 	sts	0x0146, r24
			delayms(1000);
    151e:	88 ee       	ldi	r24, 0xE8	; 232
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			display_alarm(alarm_h, alarm_m);	// show the current alarm time set
    1526:	80 91 38 01 	lds	r24, 0x0138
    152a:	60 91 1a 01 	lds	r22, 0x011A
    152e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <display_alarm>
			delayms(1000);
    1532:	88 ee       	ldi	r24, 0xE8	; 232
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			set_flag(f_show_time);
    153a:	80 91 46 01 	lds	r24, 0x0146
    153e:	80 68       	ori	r24, 0x80	; 128
    1540:	80 93 46 01 	sts	0x0146, r24
    1544:	08 95       	ret
		}
	} else {
		if (flag(f_alarm_on)) {
    1546:	80 91 46 01 	lds	r24, 0x0146
    154a:	86 ff       	sbrs	r24, 6
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <setalarmstate+0x98>
			clr_flag (f_alarm_on);	// turn off the alarm
    154e:	80 91 46 01 	lds	r24, 0x0146
    1552:	8f 7b       	andi	r24, 0xBF	; 191
    1554:	80 93 46 01 	sts	0x0146, r24
			snoozetimer = 0;
    1558:	10 92 44 01 	sts	0x0144, r1
    155c:	10 92 43 01 	sts	0x0143, r1
			if (alarming) {
    1560:	80 91 3a 01 	lds	r24, 0x013A
    1564:	88 23       	and	r24, r24
    1566:	79 f0       	breq	.+30     	; 0x1586 <setalarmstate+0x98>
				// if the alarm is going off, we should turn it off and quiet the speaker
				DEBUGP("alarm off");
    1568:	87 ee       	ldi	r24, 0xE7	; 231
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
				alarming = 0;
    1572:	10 92 3a 01 	sts	0x013A, r1
				TCCR1B &= ~_BV(CS11); // turn it off!
    1576:	80 91 81 00 	lds	r24, 0x0081
    157a:	8d 7f       	andi	r24, 0xFD	; 253
    157c:	80 93 81 00 	sts	0x0081, r24
				PORTB |= _BV(SPK1) | _BV(SPK2);
    1580:	85 b1       	in	r24, 0x05	; 5
    1582:	86 60       	ori	r24, 0x06	; 6
    1584:	85 b9       	out	0x05, r24	; 5
    1586:	08 95       	ret

00001588 <set_alarm>:
}

/**************************** SUB-MENUS *****************************/

void set_alarm(void) 
{
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
	uint8_t mode;
	uint8_t hour, min, sec;
	uint8_t b;
		
	display_Pstr(PSTR("set alarm"));
    159c:	89 e7       	ldi	r24, 0x79	; 121
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>

	hour = min = sec = 0;
	mode = SHOW_MENU;

	hour = alarm_h;
    15a4:	c0 91 38 01 	lds	r28, 0x0138
	min = alarm_m;
    15a8:	d0 91 1a 01 	lds	r29, 0x011A
	sec = 0;
	
	timeoutcounter = 10;
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	90 93 41 01 	sts	0x0141, r25
    15b4:	80 93 40 01 	sts	0x0140, r24
	brepeat |= _BV(2);		// Repeat button 2 if held down
    15b8:	80 91 3f 01 	lds	r24, 0x013F
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	80 93 3f 01 	sts	0x013F, r24
	uint8_t b;
		
	display_Pstr(PSTR("set alarm"));

	hour = min = sec = 0;
	mode = SHOW_MENU;
    15c2:	10 e0       	ldi	r17, 0x00	; 0
		b = buttons;	// Do this so ISR can't slip in a button in the middle of the loop
		if (b & _BV(0)) { // mode change
			break;
		}
		if (buttons & 0x7) {
			timeoutcounter = 10;	
    15c4:	6a e0       	ldi	r22, 0x0A	; 10
    15c6:	e6 2e       	mov	r14, r22
    15c8:	f1 2c       	mov	r15, r1
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;
			}
			if (mode == SET_MIN) {
				min = (min+1) % 60;
    15ca:	7c e3       	ldi	r23, 0x3C	; 60
    15cc:	c7 2e       	mov	r12, r23
    15ce:	d1 2c       	mov	r13, r1
		}
		if (b & _BV(2)) {
			button_clear(2);

			if (mode == SET_HOUR) {
				hour = (hour+1) % 24;
    15d0:	e8 e1       	ldi	r30, 0x18	; 24
    15d2:	ae 2e       	mov	r10, r30
    15d4:	b1 2c       	mov	r11, r1
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    15d6:	a8 95       	wdr
	timeoutcounter = 10;
	brepeat |= _BV(2);		// Repeat button 2 if held down
	
	while (1) {
		kickthedog();
		b = buttons;	// Do this so ISR can't slip in a button in the middle of the loop
    15d8:	00 91 3b 01 	lds	r16, 0x013B
		if (b & _BV(0)) { // mode change
    15dc:	00 fd       	sbrc	r16, 0
    15de:	a0 c0       	rjmp	.+320    	; 0x1720 <set_alarm+0x198>
			break;
		}
		if (buttons & 0x7) {
    15e0:	80 91 3b 01 	lds	r24, 0x013B
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	87 70       	andi	r24, 0x07	; 7
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <set_alarm+0x70>
			timeoutcounter = 10;	
    15ee:	f0 92 41 01 	sts	0x0141, r15
    15f2:	e0 92 40 01 	sts	0x0140, r14
    15f6:	1c c0       	rjmp	.+56     	; 0x1630 <set_alarm+0xa8>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    15f8:	80 91 40 01 	lds	r24, 0x0140
    15fc:	90 91 41 01 	lds	r25, 0x0141
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	b1 f4       	brne	.+44     	; 0x1630 <set_alarm+0xa8>
			//timed out!
			set_flag(f_show_time);		 
    1604:	80 91 46 01 	lds	r24, 0x0146
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	80 93 46 01 	sts	0x0146, r24
			alarm_h = hour;
    160e:	c0 93 38 01 	sts	0x0138, r28
			alarm_m = min;
    1612:	d0 93 1a 01 	sts	0x011A, r29
			eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);		
    1616:	60 91 38 01 	lds	r22, 0x0138
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
			eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);		
    1622:	60 91 1a 01 	lds	r22, 0x011A
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
			break;
    162e:	78 c0       	rjmp	.+240    	; 0x1720 <set_alarm+0x198>
		}
		if (b & _BV(1)) {
    1630:	01 ff       	sbrs	r16, 1
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <set_alarm+0x12a>
			button_clear(1);
    1634:	80 91 3b 01 	lds	r24, 0x013B
    1638:	8d 7f       	andi	r24, 0xFD	; 253
    163a:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    163e:	11 23       	and	r17, r17
    1640:	81 f4       	brne	.+32     	; 0x1662 <set_alarm+0xda>
				// ok now it's selected
				mode = SET_HOUR;
				display_alarm(hour, min);
    1642:	8c 2f       	mov	r24, r28
    1644:	6d 2f       	mov	r22, r29
    1646:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <display_alarm>
				display[1] |= 0x1;
    164a:	80 91 2b 01 	lds	r24, 0x012B
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;	
    1654:	80 91 2c 01 	lds	r24, 0x012C
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	80 93 2c 01 	sts	0x012C, r24
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// ok now it's selected
				mode = SET_HOUR;
    165e:	11 e0       	ldi	r17, 0x01	; 1
    1660:	28 c0       	rjmp	.+80     	; 0x16b2 <set_alarm+0x12a>
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
    1662:	11 30       	cpi	r17, 0x01	; 1
    1664:	81 f4       	brne	.+32     	; 0x1686 <set_alarm+0xfe>
				mode = SET_MIN;
				display_alarm(hour, min);
    1666:	8c 2f       	mov	r24, r28
    1668:	6d 2f       	mov	r22, r29
    166a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <display_alarm>
				display[4] |= 0x1;
    166e:	80 91 2e 01 	lds	r24, 0x012E
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    1678:	80 91 2f 01 	lds	r24, 0x012F
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	80 93 2f 01 	sts	0x012F, r24
				mode = SET_HOUR;
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
				mode = SET_MIN;
    1682:	12 e0       	ldi	r17, 0x02	; 2
    1684:	16 c0       	rjmp	.+44     	; 0x16b2 <set_alarm+0x12a>
				display_alarm(hour, min);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else {
				// done!
				alarm_h = hour;
    1686:	c0 93 38 01 	sts	0x0138, r28
				alarm_m = min;
    168a:	d0 93 1a 01 	sts	0x011A, r29
				eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);		
    168e:	60 91 38 01 	lds	r22, 0x0138
    1692:	87 e0       	ldi	r24, 0x07	; 7
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
				eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);		
    169a:	60 91 1a 01 	lds	r22, 0x011A
    169e:	88 e0       	ldi	r24, 0x08	; 8
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
				set_flag(f_show_time);
    16a6:	80 91 46 01 	lds	r24, 0x0146
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	80 93 46 01 	sts	0x0146, r24
				break;
    16b0:	37 c0       	rjmp	.+110    	; 0x1720 <set_alarm+0x198>
			}
		}
		if (b & _BV(2)) {
    16b2:	02 ff       	sbrs	r16, 2
    16b4:	90 cf       	rjmp	.-224    	; 0x15d6 <set_alarm+0x4e>
			button_clear(2);
    16b6:	80 91 3b 01 	lds	r24, 0x013B
    16ba:	8b 7f       	andi	r24, 0xFB	; 251
    16bc:	80 93 3b 01 	sts	0x013B, r24

			if (mode == SET_HOUR) {
    16c0:	11 30       	cpi	r17, 0x01	; 1
    16c2:	a9 f4       	brne	.+42     	; 0x16ee <set_alarm+0x166>
				hour = (hour+1) % 24;
    16c4:	8c 2f       	mov	r24, r28
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	b5 01       	movw	r22, r10
    16cc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    16d0:	c8 2f       	mov	r28, r24
				display_alarm(hour, min);
    16d2:	6d 2f       	mov	r22, r29
    16d4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <display_alarm>
				display[1] |= 0x1;
    16d8:	80 91 2b 01 	lds	r24, 0x012B
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    16e2:	80 91 2c 01 	lds	r24, 0x012C
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	80 93 2c 01 	sts	0x012C, r24
    16ec:	74 cf       	rjmp	.-280    	; 0x15d6 <set_alarm+0x4e>
			}
			if (mode == SET_MIN) {
    16ee:	12 30       	cpi	r17, 0x02	; 2
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <set_alarm+0x16c>
    16f2:	71 cf       	rjmp	.-286    	; 0x15d6 <set_alarm+0x4e>
				min = (min+1) % 60;
    16f4:	8d 2f       	mov	r24, r29
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	b6 01       	movw	r22, r12
    16fc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    1700:	68 2f       	mov	r22, r24
    1702:	d8 2f       	mov	r29, r24
				display_alarm(hour, min);
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <display_alarm>
				display[4] |= 0x1;
    170a:	80 91 2e 01 	lds	r24, 0x012E
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    1714:	80 91 2f 01 	lds	r24, 0x012F
    1718:	81 60       	ori	r24, 0x01	; 1
    171a:	80 93 2f 01 	sts	0x012F, r24
    171e:	5b cf       	rjmp	.-330    	; 0x15d6 <set_alarm+0x4e>
			}
		}
	}
	brepeat &= ~_BV(2);
    1720:	80 91 3f 01 	lds	r24, 0x013F
    1724:	8b 7f       	andi	r24, 0xFB	; 251
    1726:	80 93 3f 01 	sts	0x013F, r24
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	08 95       	ret

00001740 <display_sdate>:

const char date_fmt2[] PROGMEM = "%S %-d";

// This is more "Sunday June 21" style
void display_sdate(void)
{
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2b 97       	sbiw	r28, 0x0b	; 11
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];
	uint8_t mm, dd;
	PGM_P p;

	mm = date_m;
    175a:	e0 90 3e 01 	lds	r14, 0x013E
	dd = date_d;
    175e:	10 91 29 01 	lds	r17, 0x0129
	if (flag(f_dst_offset) && time_h == 23) {
    1762:	80 91 46 01 	lds	r24, 0x0146
    1766:	80 ff       	sbrs	r24, 0
    1768:	0e c0       	rjmp	.+28     	; 0x1786 <display_sdate+0x46>
    176a:	80 91 15 01 	lds	r24, 0x0115
    176e:	87 31       	cpi	r24, 0x17	; 23
    1770:	51 f4       	brne	.+20     	; 0x1786 <display_sdate+0x46>
		if (++dd > monthlen (date_y, mm)) {
    1772:	1f 5f       	subi	r17, 0xFF	; 255
    1774:	80 91 19 01 	lds	r24, 0x0119
    1778:	6e 2d       	mov	r22, r14
    177a:	0e 94 44 04 	call	0x888	; 0x888 <monthlen>
    177e:	81 17       	cp	r24, r17
    1780:	10 f4       	brcc	.+4      	; 0x1786 <display_sdate+0x46>
			dd = 1;
			++mm;
    1782:	e3 94       	inc	r14

	mm = date_m;
	dd = date_d;
	if (flag(f_dst_offset) && time_h == 23) {
		if (++dd > monthlen (date_y, mm)) {
			dd = 1;
    1784:	11 e0       	ldi	r17, 0x01	; 1
			++mm;
		}
	}
	display_clear ();
    1786:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>
	memcpy_P (&p, &monname[mm-1], sizeof(PGM_P));
    178a:	6e 2d       	mov	r22, r14
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	62 57       	subi	r22, 0x72	; 114
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	42 e0       	ldi	r20, 0x02	; 2
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <memcpy_P>
	sprintf_P (d, date_fmt2, p, dd);
    17a2:	8d b7       	in	r24, 0x3d	; 61
    17a4:	9e b7       	in	r25, 0x3e	; 62
    17a6:	08 97       	sbiw	r24, 0x08	; 8
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	9e bf       	out	0x3e, r25	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	8d bf       	out	0x3d, r24	; 61
    17b2:	ed b7       	in	r30, 0x3d	; 61
    17b4:	fe b7       	in	r31, 0x3e	; 62
    17b6:	31 96       	adiw	r30, 0x01	; 1
    17b8:	a3 e0       	ldi	r26, 0x03	; 3
    17ba:	ea 2e       	mov	r14, r26
    17bc:	f1 2c       	mov	r15, r1
    17be:	ec 0e       	add	r14, r28
    17c0:	fd 1e       	adc	r15, r29
    17c2:	ad b7       	in	r26, 0x3d	; 61
    17c4:	be b7       	in	r27, 0x3e	; 62
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	fc 92       	st	X, r15
    17ca:	ee 92       	st	-X, r14
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	89 e8       	ldi	r24, 0x89	; 137
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	93 83       	std	Z+3, r25	; 0x03
    17d4:	82 83       	std	Z+2, r24	; 0x02
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	95 83       	std	Z+5, r25	; 0x05
    17dc:	84 83       	std	Z+4, r24	; 0x04
    17de:	16 83       	std	Z+6, r17	; 0x06
    17e0:	17 82       	std	Z+7, r1	; 0x07
    17e2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
	display_str (d);
    17e6:	8d b7       	in	r24, 0x3d	; 61
    17e8:	9e b7       	in	r25, 0x3e	; 62
    17ea:	08 96       	adiw	r24, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	9e bf       	out	0x3e, r25	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	8d bf       	out	0x3d, r24	; 61
    17f6:	c7 01       	movw	r24, r14
    17f8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
}
    17fc:	2b 96       	adiw	r28, 0x0b	; 11
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	08 95       	ret

00001814 <display_date>:

const char date_fmt1[] PROGMEM = "%02d/%02d/%02d";

// This type is mm-dd-yy OR dd-mm-yy depending on our region
void display_date(uint8_t yy, uint8_t mm, uint8_t dd) 
{
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	2c 97       	sbiw	r28, 0x0c	; 12
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];

	display_clear();
    182c:	4c 87       	std	Y+12, r20	; 0x0c
    182e:	6b 87       	std	Y+11, r22	; 0x0b
    1830:	8a 87       	std	Y+10, r24	; 0x0a
    1832:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>

	//if (region == REGION_US)
		sprintf_P (d, date_fmt1, mm, dd, yy);	// mm-dd-yy
    1836:	2d b7       	in	r18, 0x3d	; 61
    1838:	3e b7       	in	r19, 0x3e	; 62
    183a:	2a 50       	subi	r18, 0x0A	; 10
    183c:	30 40       	sbci	r19, 0x00	; 0
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	3e bf       	out	0x3e, r19	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	2d bf       	out	0x3d, r18	; 61
    1848:	ed b7       	in	r30, 0x3d	; 61
    184a:	fe b7       	in	r31, 0x3e	; 62
    184c:	31 96       	adiw	r30, 0x01	; 1
    184e:	8e 01       	movw	r16, r28
    1850:	0f 5f       	subi	r16, 0xFF	; 255
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	ad b7       	in	r26, 0x3d	; 61
    1856:	be b7       	in	r27, 0x3e	; 62
    1858:	12 96       	adiw	r26, 0x02	; 2
    185a:	1c 93       	st	X, r17
    185c:	0e 93       	st	-X, r16
    185e:	11 97       	sbiw	r26, 0x01	; 1
    1860:	20 ef       	ldi	r18, 0xF0	; 240
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	33 83       	std	Z+3, r19	; 0x03
    1866:	22 83       	std	Z+2, r18	; 0x02
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	64 83       	std	Z+4, r22	; 0x04
    186c:	15 82       	std	Z+5, r1	; 0x05
    186e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1870:	46 83       	std	Z+6, r20	; 0x06
    1872:	17 82       	std	Z+7, r1	; 0x07
    1874:	8a 85       	ldd	r24, Y+10	; 0x0a
    1876:	80 87       	std	Z+8, r24	; 0x08
    1878:	11 86       	std	Z+9, r1	; 0x09
    187a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
	//else
		//sprintf_P (d, date_fmt1, dd, mm, yy);	// dd-mm-yy
	display_str (d);
    187e:	2d b7       	in	r18, 0x3d	; 61
    1880:	3e b7       	in	r19, 0x3e	; 62
    1882:	26 5f       	subi	r18, 0xF6	; 246
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	3e bf       	out	0x3e, r19	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	2d bf       	out	0x3d, r18	; 61
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
}
    1896:	2c 96       	adiw	r28, 0x0c	; 12
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <set_date>:
}



void set_date(void) 
{
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <set_date+0x16>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <set_date+0x18>
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = SHOW_MENU;
	uint8_t m, d, y;
	uint8_t dt[4];
	uint8_t b;

	display_Pstr(PSTR("set date"));
    18c8:	8b e9       	ldi	r24, 0x9B	; 155
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	
	timeoutcounter = 5;	
    18d0:	85 e0       	ldi	r24, 0x05	; 5
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	90 93 41 01 	sts	0x0141, r25
    18d8:	80 93 40 01 	sts	0x0140, r24
	m = date_m;
    18dc:	10 91 3e 01 	lds	r17, 0x013E
	d = date_d;
    18e0:	f0 90 29 01 	lds	r15, 0x0129
	y = date_y;
    18e4:	00 91 19 01 	lds	r16, 0x0119
	
	brepeat |= _BV(2);
    18e8:	80 91 3f 01 	lds	r24, 0x013F
    18ec:	84 60       	ori	r24, 0x04	; 4
    18ee:	80 93 3f 01 	sts	0x013F, r24



void set_date(void) 
{
	uint8_t mode = SHOW_MENU;
    18f2:	ee 24       	eor	r14, r14

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;	
    18f4:	35 e0       	ldi	r19, 0x05	; 5
    18f6:	a3 2e       	mov	r10, r19
    18f8:	b1 2c       	mov	r11, r1
				}
				//twiWriteReg (0xd0, 0x04, b2bcd(d));
			}
			if (mode == SET_YEAR) {
				y++;
				y %= 100;
    18fa:	44 e6       	ldi	r20, 0x64	; 100
    18fc:	d4 2e       	mov	r13, r20
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    18fe:	a8 95       	wdr
	
	brepeat |= _BV(2);

	while (1) {
		kickthedog();
		b = buttons;
    1900:	c0 90 3b 01 	lds	r12, 0x013B
		if (buttons & 0x7) {
    1904:	80 91 3b 01 	lds	r24, 0x013B
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	87 70       	andi	r24, 0x07	; 7
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <set_date+0x70>
			timeoutcounter = 5;	
    1912:	b0 92 41 01 	sts	0x0141, r11
    1916:	a0 92 40 01 	sts	0x0140, r10
    191a:	07 c0       	rjmp	.+14     	; 0x192a <set_date+0x7e>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    191c:	80 91 40 01 	lds	r24, 0x0140
    1920:	90 91 41 01 	lds	r25, 0x0141
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	09 f4       	brne	.+2      	; 0x192a <set_date+0x7e>
    1928:	b4 c0       	rjmp	.+360    	; 0x1a92 <set_date+0x1e6>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // mode change
    192a:	c0 fc       	sbrc	r12, 0
    192c:	15 c1       	rjmp	.+554    	; 0x1b58 <set_date+0x2ac>
			break;
		}
		if (b & _BV(1)) {
    192e:	c1 fe       	sbrs	r12, 1
    1930:	b6 c0       	rjmp	.+364    	; 0x1a9e <set_date+0x1f2>
			button_clear(1);
    1932:	80 91 3b 01 	lds	r24, 0x013B
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    193c:	ee 20       	and	r14, r14
    193e:	f1 f4       	brne	.+60     	; 0x197c <set_date+0xd0>
				// start!
				if (region == REGION_US) {
    1940:	80 91 14 01 	lds	r24, 0x0114
    1944:	88 23       	and	r24, r24
    1946:	41 f0       	breq	.+16     	; 0x1958 <set_date+0xac>
					mode = SET_MONTH;
				} else {
					DEBUGP("Set day");
    1948:	84 ea       	ldi	r24, 0xA4	; 164
    194a:	92 e0       	ldi	r25, 0x02	; 2
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
					mode = SET_DAY;
    1952:	22 e0       	ldi	r18, 0x02	; 2
    1954:	e2 2e       	mov	r14, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <set_date+0xb0>
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				if (region == REGION_US) {
					mode = SET_MONTH;
    1958:	ee 24       	eor	r14, r14
    195a:	e3 94       	inc	r14
				} else {
					DEBUGP("Set day");
					mode = SET_DAY;
				}
				display_date (y, m, d);
    195c:	80 2f       	mov	r24, r16
    195e:	61 2f       	mov	r22, r17
    1960:	4f 2d       	mov	r20, r15
    1962:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				display[1] |= 0x1;
    1966:	80 91 2b 01 	lds	r24, 0x012B
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    1970:	80 91 2c 01 	lds	r24, 0x012C
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	80 93 2c 01 	sts	0x012C, r24
    197a:	91 c0       	rjmp	.+290    	; 0x1a9e <set_date+0x1f2>
			} else if (((mode == SET_MONTH) && (region == REGION_US)) ||
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	e8 16       	cp	r14, r24
    1980:	29 f4       	brne	.+10     	; 0x198c <set_date+0xe0>
    1982:	80 91 14 01 	lds	r24, 0x0114
    1986:	88 23       	and	r24, r24
    1988:	41 f0       	breq	.+16     	; 0x199a <set_date+0xee>
    198a:	23 c0       	rjmp	.+70     	; 0x19d2 <set_date+0x126>
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	e8 16       	cp	r14, r24
    1990:	a1 f5       	brne	.+104    	; 0x19fa <set_date+0x14e>
					 ((mode == SET_DAY) && (region == REGION_EU))) {
    1992:	80 91 14 01 	lds	r24, 0x0114
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	c9 f4       	brne	.+50     	; 0x19cc <set_date+0x120>
				if (region == REGION_US)
    199a:	80 91 14 01 	lds	r24, 0x0114
    199e:	88 23       	and	r24, r24
    19a0:	19 f4       	brne	.+6      	; 0x19a8 <set_date+0xfc>
					mode = SET_DAY;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	e8 2e       	mov	r14, r24
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <set_date+0x100>
				else
					mode = SET_MONTH;
    19a8:	ee 24       	eor	r14, r14
    19aa:	e3 94       	inc	r14
				display_date (y, m, d);
    19ac:	80 2f       	mov	r24, r16
    19ae:	61 2f       	mov	r22, r17
    19b0:	4f 2d       	mov	r20, r15
    19b2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				display[4] |= 0x1;
    19b6:	80 91 2e 01 	lds	r24, 0x012E
    19ba:	81 60       	ori	r24, 0x01	; 1
    19bc:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    19c0:	80 91 2f 01 	lds	r24, 0x012F
    19c4:	81 60       	ori	r24, 0x01	; 1
    19c6:	80 93 2f 01 	sts	0x012F, r24
    19ca:	69 c0       	rjmp	.+210    	; 0x1a9e <set_date+0x1f2>
			} else if (((mode == SET_DAY) && (region == REGION_US)) ||
    19cc:	88 23       	and	r24, r24
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <set_date+0x12a>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <set_date+0x14e>
				((mode == SET_MONTH) && (region == REGION_EU))) {
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	91 f4       	brne	.+36     	; 0x19fa <set_date+0x14e>
				mode = SET_YEAR;
				display_date (y, m, d);
    19d6:	80 2f       	mov	r24, r16
    19d8:	61 2f       	mov	r22, r17
    19da:	4f 2d       	mov	r20, r15
    19dc:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				display[7] |= 0x1;
    19e0:	80 91 31 01 	lds	r24, 0x0131
    19e4:	81 60       	ori	r24, 0x01	; 1
    19e6:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    19ea:	80 91 32 01 	lds	r24, 0x0132
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	80 93 32 01 	sts	0x0132, r24
				display_date (y, m, d);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (((mode == SET_DAY) && (region == REGION_US)) ||
				((mode == SET_MONTH) && (region == REGION_EU))) {
				mode = SET_YEAR;
    19f4:	b3 e0       	ldi	r27, 0x03	; 3
    19f6:	eb 2e       	mov	r14, r27
				display_date (y, m, d);
				display[7] |= 0x1;
				display[8] |= 0x1;
    19f8:	52 c0       	rjmp	.+164    	; 0x1a9e <set_date+0x1f2>
			} else {
				clr_flag(f_show_time);
    19fa:	80 91 46 01 	lds	r24, 0x0146
    19fe:	8f 77       	andi	r24, 0x7F	; 127
    1a00:	80 93 46 01 	sts	0x0146, r24
				if (d > monthlen(y, m))
    1a04:	80 2f       	mov	r24, r16
    1a06:	61 2f       	mov	r22, r17
    1a08:	0e 94 44 04 	call	0x888	; 0x888 <monthlen>
    1a0c:	8f 15       	cp	r24, r15
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <set_date+0x166>
    1a10:	f8 2e       	mov	r15, r24
					d = monthlen(y, m);	// just to be sure
					
				cli();		// Make change to clock date in atomic manner
    1a12:	f8 94       	cli
				date_d = d;
    1a14:	f0 92 29 01 	sts	0x0129, r15
				date_m = m;
    1a18:	10 93 3e 01 	sts	0x013E, r17
				date_y = y;
    1a1c:	00 93 19 01 	sts	0x0119, r16
				sei();
    1a20:	78 94       	sei
				
				dt[0] = dow (y, m, d);
    1a22:	80 2f       	mov	r24, r16
    1a24:	61 2f       	mov	r22, r17
    1a26:	4f 2d       	mov	r20, r15
    1a28:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
    1a2c:	89 83       	std	Y+1, r24	; 0x01
				dt[1] = b2bcd(d);
    1a2e:	8f 2d       	mov	r24, r15
    1a30:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    1a34:	8a 83       	std	Y+2, r24	; 0x02
				dt[2] = b2bcd(m);
    1a36:	81 2f       	mov	r24, r17
    1a38:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
				dt[3] = b2bcd(y);
    1a3e:	80 2f       	mov	r24, r16
    1a40:	0e 94 d6 02 	call	0x5ac	; 0x5ac <b2bcd>
    1a44:	8c 83       	std	Y+4, r24	; 0x04
				twiWriteRegN(0xd0, 0x3, 4, dt);		// Update ChronoDot
    1a46:	80 ed       	ldi	r24, 0xD0	; 208
    1a48:	63 e0       	ldi	r22, 0x03	; 3
    1a4a:	44 e0       	ldi	r20, 0x04	; 4
    1a4c:	9e 01       	movw	r18, r28
    1a4e:	2f 5f       	subi	r18, 0xFF	; 255
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	0e 94 b2 11 	call	0x2364	; 0x2364 <twiWriteRegN>
				
				set_dst_offset (date_y, date_m, date_d, time_h);
    1a56:	80 91 19 01 	lds	r24, 0x0119
    1a5a:	60 91 3e 01 	lds	r22, 0x013E
    1a5e:	40 91 29 01 	lds	r20, 0x0129
    1a62:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
    1a66:	0e 94 5f 04 	call	0x8be	; 0x8be <dst>
    1a6a:	88 23       	and	r24, r24
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <set_date+0x1ca>
		set_flag (f_dst_offset);
    1a6e:	80 91 46 01 	lds	r24, 0x0146
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <set_date+0x1d0>
	else
		clr_flag (f_dst_offset);
    1a76:	80 91 46 01 	lds	r24, 0x0146
    1a7a:	8e 7f       	andi	r24, 0xFE	; 254
    1a7c:	80 93 46 01 	sts	0x0146, r24
				dt[2] = b2bcd(m);
				dt[3] = b2bcd(y);
				twiWriteRegN(0xd0, 0x3, 4, dt);		// Update ChronoDot
				
				set_dst_offset (date_y, date_m, date_d, time_h);
				display_date (y, m, d);
    1a80:	80 2f       	mov	r24, r16
    1a82:	61 2f       	mov	r22, r17
    1a84:	4f 2d       	mov	r20, r15
    1a86:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				delayms(1500);
    1a8a:	8c ed       	ldi	r24, 0xDC	; 220
    1a8c:	95 e0       	ldi	r25, 0x05	; 5
    1a8e:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
				set_flag(f_show_time);
    1a92:	80 91 46 01 	lds	r24, 0x0146
    1a96:	80 68       	ori	r24, 0x80	; 128
    1a98:	80 93 46 01 	sts	0x0146, r24
				break;
    1a9c:	5d c0       	rjmp	.+186    	; 0x1b58 <set_date+0x2ac>
			}
		}
		if (b & _BV(2)) {
    1a9e:	c2 fe       	sbrs	r12, 2
    1aa0:	2e cf       	rjmp	.-420    	; 0x18fe <set_date+0x52>
			button_clear(2);
    1aa2:	80 91 3b 01 	lds	r24, 0x013B
    1aa6:	8b 7f       	andi	r24, 0xFB	; 251
    1aa8:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_MONTH) {
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	e8 16       	cp	r14, r24
    1ab0:	71 f4       	brne	.+28     	; 0x1ace <set_date+0x222>
				m++;
    1ab2:	1f 5f       	subi	r17, 0xFF	; 255
				if (m >= 13)
    1ab4:	1d 30       	cpi	r17, 0x0D	; 13
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <set_date+0x20e>
					m = 1;
    1ab8:	11 e0       	ldi	r17, 0x01	; 1
				display_date (y, m, d);
    1aba:	80 2f       	mov	r24, r16
    1abc:	61 2f       	mov	r22, r17
    1abe:	4f 2d       	mov	r20, r15
    1ac0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				if (region == REGION_US) {
    1ac4:	80 91 14 01 	lds	r24, 0x0114
    1ac8:	88 23       	and	r24, r24
    1aca:	09 f5       	brne	.+66     	; 0x1b0e <set_date+0x262>
    1acc:	15 c0       	rjmp	.+42     	; 0x1af8 <set_date+0x24c>
					display[4] |= 0x1;
					display[5] |= 0x1;
				}
				//twiWriteReg (0xd0, 0x05, b2bcd(date_m));
			}
			if (mode == SET_DAY) {
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	e8 16       	cp	r14, r24
    1ad2:	41 f5       	brne	.+80     	; 0x1b24 <set_date+0x278>
				d++;
    1ad4:	f3 94       	inc	r15
				if (d > monthlen(y, m))
    1ad6:	80 2f       	mov	r24, r16
    1ad8:	61 2f       	mov	r22, r17
    1ada:	0e 94 44 04 	call	0x888	; 0x888 <monthlen>
    1ade:	8f 15       	cp	r24, r15
    1ae0:	10 f4       	brcc	.+4      	; 0x1ae6 <set_date+0x23a>
					d = 1;
    1ae2:	ff 24       	eor	r15, r15
    1ae4:	f3 94       	inc	r15
				display_date (y, m, d);
    1ae6:	80 2f       	mov	r24, r16
    1ae8:	61 2f       	mov	r22, r17
    1aea:	4f 2d       	mov	r20, r15
    1aec:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>

				if (region == REGION_EU) {
    1af0:	80 91 14 01 	lds	r24, 0x0114
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	59 f4       	brne	.+22     	; 0x1b0e <set_date+0x262>
					display[1] |= 0x1;
    1af8:	80 91 2b 01 	lds	r24, 0x012B
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	80 93 2b 01 	sts	0x012B, r24
					display[2] |= 0x1;
    1b02:	80 91 2c 01 	lds	r24, 0x012C
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	80 93 2c 01 	sts	0x012C, r24
    1b0c:	f8 ce       	rjmp	.-528    	; 0x18fe <set_date+0x52>
				} else {
					display[4] |= 0x1;
    1b0e:	80 91 2e 01 	lds	r24, 0x012E
    1b12:	81 60       	ori	r24, 0x01	; 1
    1b14:	80 93 2e 01 	sts	0x012E, r24
					display[5] |= 0x1;
    1b18:	80 91 2f 01 	lds	r24, 0x012F
    1b1c:	81 60       	ori	r24, 0x01	; 1
    1b1e:	80 93 2f 01 	sts	0x012F, r24
    1b22:	ed ce       	rjmp	.-550    	; 0x18fe <set_date+0x52>
				}
				//twiWriteReg (0xd0, 0x04, b2bcd(d));
			}
			if (mode == SET_YEAR) {
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	e8 16       	cp	r14, r24
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <set_date+0x280>
    1b2a:	e9 ce       	rjmp	.-558    	; 0x18fe <set_date+0x52>
				y++;
    1b2c:	80 2f       	mov	r24, r16
    1b2e:	8f 5f       	subi	r24, 0xFF	; 255
				y %= 100;
    1b30:	6d 2d       	mov	r22, r13
    1b32:	0e 94 67 15 	call	0x2ace	; 0x2ace <__udivmodqi4>
    1b36:	09 2f       	mov	r16, r25
				display_date (y, m, d);
    1b38:	89 2f       	mov	r24, r25
    1b3a:	61 2f       	mov	r22, r17
    1b3c:	4f 2d       	mov	r20, r15
    1b3e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <display_date>
				display[7] |= 0x1;
    1b42:	80 91 31 01 	lds	r24, 0x0131
    1b46:	81 60       	ori	r24, 0x01	; 1
    1b48:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    1b4c:	80 91 32 01 	lds	r24, 0x0132
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	80 93 32 01 	sts	0x0132, r24
    1b56:	d3 ce       	rjmp	.-602    	; 0x18fe <set_date+0x52>
				//twiWriteReg (0xd0, 0x06, b2bcd(y));
			}
		}
	}
	brepeat &= ~_BV(2);
    1b58:	80 91 3f 01 	lds	r24, 0x013F
    1b5c:	8b 7f       	andi	r24, 0xFB	; 251
    1b5e:	80 93 3f 01 	sts	0x013F, r24
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	08 95       	ret

00001b80 <display_day>:
const char fri[] PROGMEM = " friday";
const char sat[] PROGMEM = "saturday";
PGM_P const dayname[7] PROGMEM = {sun, mon, tue, wed, thu, fri, sat};
	
void display_day(void)
{
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	2b 97       	sbiw	r28, 0x0b	; 11
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];
	uint8_t dotw;
	PGM_P p;

	display_clear();
    1b94:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>
	dotw = dow(date_y, date_m, date_d);
    1b98:	80 91 19 01 	lds	r24, 0x0119
    1b9c:	60 91 3e 01 	lds	r22, 0x013E
    1ba0:	40 91 29 01 	lds	r20, 0x0129
    1ba4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <dow>
	memcpy_P(&p, &dayname[dotw], sizeof(PGM_P));
    1ba8:	68 2f       	mov	r22, r24
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	66 0f       	add	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	61 50       	subi	r22, 0x01	; 1
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	42 e0       	ldi	r20, 0x02	; 2
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <memcpy_P>
	strcpy_P (d, p);
    1bc0:	69 81       	ldd	r22, Y+1	; 0x01
    1bc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	03 96       	adiw	r24, 0x03	; 3
    1bc8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <strcpy_P>
	display_str(d);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	03 96       	adiw	r24, 0x03	; 3
    1bd0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
}
    1bd4:	2b 96       	adiw	r28, 0x0b	; 11
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <set_trim>:
}


const char trim_fmt[] PROGMEM = "trim %-3d";

void set_trim(void) {
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	2a 97       	sbiw	r28, 0x0a	; 10
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
	uint8_t mode = SHOW_MENU;
	int8_t trim;
	char d[DISPLAYSIZE];
	uint8_t b;

	display_Pstr(PSTR("set trim"));
    1c0a:	86 ec       	ldi	r24, 0xC6	; 198
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	
	timeoutcounter = 5;	
    1c12:	85 e0       	ldi	r24, 0x05	; 5
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	90 93 41 01 	sts	0x0141, r25
    1c1a:	80 93 40 01 	sts	0x0140, r24
	trim = twiReadReg(0xd0, 0x10);
    1c1e:	80 ed       	ldi	r24, 0xD0	; 208
    1c20:	60 e1       	ldi	r22, 0x10	; 16
    1c22:	0e 94 ed 11 	call	0x23da	; 0x23da <twiReadReg>
    1c26:	18 2f       	mov	r17, r24
	brepeat |= _BV(0) | _BV(2);
    1c28:	80 91 3f 01 	lds	r24, 0x013F
    1c2c:	85 60       	ori	r24, 0x05	; 5
    1c2e:	80 93 3f 01 	sts	0x013F, r24


const char trim_fmt[] PROGMEM = "trim %-3d";

void set_trim(void) {
	uint8_t mode = SHOW_MENU;
    1c32:	20 e0       	ldi	r18, 0x00	; 0
	
	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;
    1c34:	e5 e0       	ldi	r30, 0x05	; 5
    1c36:	ae 2e       	mov	r10, r30
    1c38:	b1 2c       	mov	r11, r1
		}
		if (b & _BV(0)) { // decrement
			if (mode == SET_TRIM) {
				button_clear(0);
				if (--trim < -99) trim = 99;
				sprintf_P (d, trim_fmt, trim);
    1c3a:	7e 01       	movw	r14, r28
    1c3c:	08 94       	sec
    1c3e:	e1 1c       	adc	r14, r1
    1c40:	f1 1c       	adc	r15, r1
    1c42:	f2 e6       	ldi	r31, 0x62	; 98
    1c44:	cf 2e       	mov	r12, r31
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	df 2e       	mov	r13, r31
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    1c4a:	a8 95       	wdr
	trim = twiReadReg(0xd0, 0x10);
	brepeat |= _BV(0) | _BV(2);
	
	while (1) {
		kickthedog();
		b = buttons;
    1c4c:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
    1c50:	80 91 3b 01 	lds	r24, 0x013B
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	87 70       	andi	r24, 0x07	; 7
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <set_trim+0x82>
			timeoutcounter = 5;
    1c5e:	b0 92 41 01 	sts	0x0141, r11
    1c62:	a0 92 40 01 	sts	0x0140, r10
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <set_trim+0x8e>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    1c68:	80 91 40 01 	lds	r24, 0x0140
    1c6c:	90 91 41 01 	lds	r25, 0x0141
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	89 f1       	breq	.+98     	; 0x1cd6 <set_trim+0xf0>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // decrement
    1c74:	00 ff       	sbrs	r16, 0
    1c76:	35 c0       	rjmp	.+106    	; 0x1ce2 <set_trim+0xfc>
			if (mode == SET_TRIM) {
    1c78:	2b 30       	cpi	r18, 0x0B	; 11
    1c7a:	69 f5       	brne	.+90     	; 0x1cd6 <set_trim+0xf0>
				button_clear(0);
    1c7c:	80 91 3b 01 	lds	r24, 0x013B
    1c80:	8e 7f       	andi	r24, 0xFE	; 254
    1c82:	80 93 3b 01 	sts	0x013B, r24
				if (--trim < -99) trim = 99;
    1c86:	11 50       	subi	r17, 0x01	; 1
    1c88:	1d 39       	cpi	r17, 0x9D	; 157
    1c8a:	0c f4       	brge	.+2      	; 0x1c8e <set_trim+0xa8>
    1c8c:	13 e6       	ldi	r17, 0x63	; 99
				sprintf_P (d, trim_fmt, trim);
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <set_trim+0xaa>
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <set_trim+0xac>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <set_trim+0xae>
    1c94:	ed b7       	in	r30, 0x3d	; 61
    1c96:	fe b7       	in	r31, 0x3e	; 62
    1c98:	31 96       	adiw	r30, 0x01	; 1
    1c9a:	ad b7       	in	r26, 0x3d	; 61
    1c9c:	be b7       	in	r27, 0x3e	; 62
    1c9e:	12 96       	adiw	r26, 0x02	; 2
    1ca0:	fc 92       	st	X, r15
    1ca2:	ee 92       	st	-X, r14
    1ca4:	11 97       	sbiw	r26, 0x01	; 1
    1ca6:	d3 82       	std	Z+3, r13	; 0x03
    1ca8:	c2 82       	std	Z+2, r12	; 0x02
    1caa:	81 2f       	mov	r24, r17
    1cac:	99 27       	eor	r25, r25
    1cae:	87 fd       	sbrc	r24, 7
    1cb0:	90 95       	com	r25
    1cb2:	95 83       	std	Z+5, r25	; 0x05
    1cb4:	84 83       	std	Z+4, r24	; 0x04
    1cb6:	2a 87       	std	Y+10, r18	; 0x0a
    1cb8:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
				display_str (d);
    1cbc:	8d b7       	in	r24, 0x3d	; 61
    1cbe:	9e b7       	in	r25, 0x3e	; 62
    1cc0:	06 96       	adiw	r24, 0x06	; 6
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	9e bf       	out	0x3e, r25	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	8d bf       	out	0x3d, r24	; 61
    1ccc:	c7 01       	movw	r24, r14
    1cce:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
    1cd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cd4:	06 c0       	rjmp	.+12     	; 0x1ce2 <set_trim+0xfc>
			} else {
				set_flag(f_show_time);
    1cd6:	80 91 46 01 	lds	r24, 0x0146
    1cda:	80 68       	ori	r24, 0x80	; 128
    1cdc:	80 93 46 01 	sts	0x0146, r24
				break;
    1ce0:	69 c0       	rjmp	.+210    	; 0x1db4 <set_trim+0x1ce>
			}	
		}
		if (b & _BV(1)) {
    1ce2:	01 ff       	sbrs	r16, 1
    1ce4:	35 c0       	rjmp	.+106    	; 0x1d50 <set_trim+0x16a>
			button_clear(1);
    1ce6:	80 91 3b 01 	lds	r24, 0x013B
    1cea:	8d 7f       	andi	r24, 0xFD	; 253
    1cec:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    1cf0:	22 23       	and	r18, r18
    1cf2:	19 f5       	brne	.+70     	; 0x1d3a <set_trim+0x154>
				// first time through loop
				mode = SET_TRIM;
				sprintf_P (d, trim_fmt, trim);
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <set_trim+0x110>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <set_trim+0x112>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <set_trim+0x114>
    1cfa:	ed b7       	in	r30, 0x3d	; 61
    1cfc:	fe b7       	in	r31, 0x3e	; 62
    1cfe:	31 96       	adiw	r30, 0x01	; 1
    1d00:	ad b7       	in	r26, 0x3d	; 61
    1d02:	be b7       	in	r27, 0x3e	; 62
    1d04:	12 96       	adiw	r26, 0x02	; 2
    1d06:	fc 92       	st	X, r15
    1d08:	ee 92       	st	-X, r14
    1d0a:	11 97       	sbiw	r26, 0x01	; 1
    1d0c:	d3 82       	std	Z+3, r13	; 0x03
    1d0e:	c2 82       	std	Z+2, r12	; 0x02
    1d10:	81 2f       	mov	r24, r17
    1d12:	99 27       	eor	r25, r25
    1d14:	87 fd       	sbrc	r24, 7
    1d16:	90 95       	com	r25
    1d18:	95 83       	std	Z+5, r25	; 0x05
    1d1a:	84 83       	std	Z+4, r24	; 0x04
    1d1c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
				display_str (d);
    1d20:	8d b7       	in	r24, 0x3d	; 61
    1d22:	9e b7       	in	r25, 0x3e	; 62
    1d24:	06 96       	adiw	r24, 0x06	; 6
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	9e bf       	out	0x3e, r25	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	8d bf       	out	0x3d, r24	; 61
    1d30:	c7 01       	movw	r24, r14
    1d32:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// first time through loop
				mode = SET_TRIM;
    1d36:	2b e0       	ldi	r18, 0x0B	; 11
    1d38:	0b c0       	rjmp	.+22     	; 0x1d50 <set_trim+0x16a>
				sprintf_P (d, trim_fmt, trim);
				display_str (d);
			} else {
				set_flag(f_show_time);
    1d3a:	80 91 46 01 	lds	r24, 0x0146
    1d3e:	80 68       	ori	r24, 0x80	; 128
    1d40:	80 93 46 01 	sts	0x0146, r24
				twiWriteReg (0xd0, 0x10, trim);
    1d44:	80 ed       	ldi	r24, 0xD0	; 208
    1d46:	60 e1       	ldi	r22, 0x10	; 16
    1d48:	41 2f       	mov	r20, r17
    1d4a:	0e 94 81 11 	call	0x2302	; 0x2302 <twiWriteReg>
				break;
    1d4e:	32 c0       	rjmp	.+100    	; 0x1db4 <set_trim+0x1ce>
			}
		}
		if (b & _BV(2)) {
    1d50:	02 ff       	sbrs	r16, 2
    1d52:	7b cf       	rjmp	.-266    	; 0x1c4a <set_trim+0x64>
			button_clear(2);
    1d54:	80 91 3b 01 	lds	r24, 0x013B
    1d58:	8b 7f       	andi	r24, 0xFB	; 251
    1d5a:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_TRIM) {
    1d5e:	2b 30       	cpi	r18, 0x0B	; 11
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <set_trim+0x17e>
    1d62:	73 cf       	rjmp	.-282    	; 0x1c4a <set_trim+0x64>
				if (++trim > 99) trim = -99;
    1d64:	1f 5f       	subi	r17, 0xFF	; 255
    1d66:	14 36       	cpi	r17, 0x64	; 100
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <set_trim+0x186>
    1d6a:	1d e9       	ldi	r17, 0x9D	; 157
				sprintf_P (d, trim_fmt, trim);
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <set_trim+0x188>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <set_trim+0x18a>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <set_trim+0x18c>
    1d72:	ed b7       	in	r30, 0x3d	; 61
    1d74:	fe b7       	in	r31, 0x3e	; 62
    1d76:	31 96       	adiw	r30, 0x01	; 1
    1d78:	ad b7       	in	r26, 0x3d	; 61
    1d7a:	be b7       	in	r27, 0x3e	; 62
    1d7c:	12 96       	adiw	r26, 0x02	; 2
    1d7e:	fc 92       	st	X, r15
    1d80:	ee 92       	st	-X, r14
    1d82:	11 97       	sbiw	r26, 0x01	; 1
    1d84:	d3 82       	std	Z+3, r13	; 0x03
    1d86:	c2 82       	std	Z+2, r12	; 0x02
    1d88:	81 2f       	mov	r24, r17
    1d8a:	99 27       	eor	r25, r25
    1d8c:	87 fd       	sbrc	r24, 7
    1d8e:	90 95       	com	r25
    1d90:	95 83       	std	Z+5, r25	; 0x05
    1d92:	84 83       	std	Z+4, r24	; 0x04
    1d94:	2a 87       	std	Y+10, r18	; 0x0a
    1d96:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
				display_str (d);
    1d9a:	8d b7       	in	r24, 0x3d	; 61
    1d9c:	9e b7       	in	r25, 0x3e	; 62
    1d9e:	06 96       	adiw	r24, 0x06	; 6
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	9e bf       	out	0x3e, r25	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	8d bf       	out	0x3d, r24	; 61
    1daa:	c7 01       	movw	r24, r14
    1dac:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
    1db0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1db2:	4b cf       	rjmp	.-362    	; 0x1c4a <set_trim+0x64>
			}
		}
	}
	brepeat &= ~(_BV(0) | _BV(2));
    1db4:	80 91 3f 01 	lds	r24, 0x013F
    1db8:	8a 7f       	andi	r24, 0xFA	; 250
    1dba:	80 93 3f 01 	sts	0x013F, r24
}
    1dbe:	2a 96       	adiw	r28, 0x0a	; 10
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	08 95       	ret

00001de0 <set_brightness>:

const char brit_fmt1[] PROGMEM = "brit %-2d ";
const char brit_fmt2[] PROGMEM = "brit aut";

void set_brightness(void) 
{
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	29 97       	sbiw	r28, 0x09	; 9
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
	uint8_t mode = SHOW_MENU;
	uint8_t b;
	char d[DISPLAYSIZE];

	display_Pstr(PSTR("set brit"));
    1e04:	8c ea       	ldi	r24, 0xAC	; 172
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>

	timeoutcounter = 5;	
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	90 93 41 01 	sts	0x0141, r25
    1e14:	80 93 40 01 	sts	0x0140, r24
	brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);
    1e18:	89 e0       	ldi	r24, 0x09	; 9
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
    1e20:	80 93 45 01 	sts	0x0145, r24
const char brit_fmt1[] PROGMEM = "brit %-2d ";
const char brit_fmt2[] PROGMEM = "brit aut";

void set_brightness(void) 
{
	uint8_t mode = SHOW_MENU;
    1e24:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;
    1e26:	a5 e0       	ldi	r26, 0x05	; 5
    1e28:	aa 2e       	mov	r10, r26
    1e2a:	b1 2c       	mov	r11, r1
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
					sprintf_P (d, brit_fmt1, brightness);
    1e2c:	7e 01       	movw	r14, r28
    1e2e:	08 94       	sec
    1e30:	e1 1c       	adc	r14, r1
    1e32:	f1 1c       	adc	r15, r1
    1e34:	be e9       	ldi	r27, 0x9E	; 158
    1e36:	cb 2e       	mov	r12, r27
    1e38:	b1 e0       	ldi	r27, 0x01	; 1
    1e3a:	db 2e       	mov	r13, r27
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <set_brightness+0x60>
				break;
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_BRITE) {
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    1e40:	a8 95       	wdr
	timeoutcounter = 5;	
	brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);

	while (1) {
		kickthedog();
		b = buttons;
    1e42:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
    1e46:	80 91 3b 01 	lds	r24, 0x013B
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	87 70       	andi	r24, 0x07	; 7
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <set_brightness+0x7e>
			timeoutcounter = 5;
    1e54:	b0 92 41 01 	sts	0x0141, r11
    1e58:	a0 92 40 01 	sts	0x0140, r10
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <set_brightness+0x90>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    1e5e:	80 91 40 01 	lds	r24, 0x0140
    1e62:	90 91 41 01 	lds	r25, 0x0141
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <set_brightness+0x90>
			//timed out!
			set_flag(f_show_time);		 
    1e6a:	80 91 46 01 	lds	r24, 0x0146
    1e6e:	35 c0       	rjmp	.+106    	; 0x1eda <set_brightness+0xfa>
				init_autobright();
			else
				ADCSRA &= ~(_BV(ADEN) | _BV(ADIE));
			break;
		}
		if (b & _BV(0)) { // mode change
    1e70:	00 fd       	sbrc	r16, 0
    1e72:	98 c0       	rjmp	.+304    	; 0x1fa4 <set_brightness+0x1c4>
			break;
		}
		if (b & _BV(1)) {
    1e74:	01 ff       	sbrs	r16, 1
    1e76:	4e c0       	rjmp	.+156    	; 0x1f14 <set_brightness+0x134>
			button_clear(1);
    1e78:	80 91 3b 01 	lds	r24, 0x013B
    1e7c:	8d 7f       	andi	r24, 0xFD	; 253
    1e7e:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
    1e82:	80 91 46 01 	lds	r24, 0x0146
		if (b & _BV(0)) { // mode change
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
    1e86:	11 23       	and	r17, r17
    1e88:	41 f5       	brne	.+80     	; 0x1eda <set_brightness+0xfa>
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
    1e8a:	85 fd       	sbrc	r24, 5
    1e8c:	20 c0       	rjmp	.+64     	; 0x1ece <set_brightness+0xee>
					sprintf_P (d, brit_fmt1, brightness);
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <set_brightness+0xb0>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <set_brightness+0xb2>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <set_brightness+0xb4>
    1e94:	ed b7       	in	r30, 0x3d	; 61
    1e96:	fe b7       	in	r31, 0x3e	; 62
    1e98:	31 96       	adiw	r30, 0x01	; 1
    1e9a:	ad b7       	in	r26, 0x3d	; 61
    1e9c:	be b7       	in	r27, 0x3e	; 62
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	fc 92       	st	X, r15
    1ea2:	ee 92       	st	-X, r14
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	d3 82       	std	Z+3, r13	; 0x03
    1ea8:	c2 82       	std	Z+2, r12	; 0x02
    1eaa:	80 91 45 01 	lds	r24, 0x0145
    1eae:	84 83       	std	Z+4, r24	; 0x04
    1eb0:	15 82       	std	Z+5, r1	; 0x05
    1eb2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
					display_str (d);
    1eb6:	8d b7       	in	r24, 0x3d	; 61
    1eb8:	9e b7       	in	r25, 0x3e	; 62
    1eba:	06 96       	adiw	r24, 0x06	; 6
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	9e bf       	out	0x3e, r25	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	8d bf       	out	0x3d, r24	; 61
    1ec6:	c7 01       	movw	r24, r14
    1ec8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <set_brightness+0xf6>
				} else {
					display_Pstr (brit_fmt2);
    1ece:	85 e9       	ldi	r24, 0x95	; 149
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
    1ed6:	11 e0       	ldi	r17, 0x01	; 1
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <set_brightness+0x134>
					display_str (d);
				} else {
					display_Pstr (brit_fmt2);
				}				
			} else {
				set_flag(f_show_time);
    1eda:	80 68       	ori	r24, 0x80	; 128
    1edc:	80 93 46 01 	sts	0x0146, r24
				eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness);
    1ee0:	89 e0       	ldi	r24, 0x09	; 9
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	60 91 45 01 	lds	r22, 0x0145
    1ee8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
				eeprom_write_byte((uint8_t *)EE_AUTOB, flag (f_autobright));
    1eec:	60 91 46 01 	lds	r22, 0x0146
    1ef0:	60 72       	andi	r22, 0x20	; 32
    1ef2:	8e e0       	ldi	r24, 0x0E	; 14
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__eewr_byte_m328p>
				if (flag(f_autobright))
    1efa:	80 91 46 01 	lds	r24, 0x0146
    1efe:	85 ff       	sbrs	r24, 5
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <set_brightness+0x128>
					init_autobright();
    1f02:	0e 94 b4 03 	call	0x768	; 0x768 <init_autobright>
    1f06:	4e c0       	rjmp	.+156    	; 0x1fa4 <set_brightness+0x1c4>
				else
					ADCSRA &= ~(_BV(ADEN) | _BV(ADIE));
    1f08:	80 91 7a 00 	lds	r24, 0x007A
    1f0c:	87 77       	andi	r24, 0x77	; 119
    1f0e:	80 93 7a 00 	sts	0x007A, r24
    1f12:	48 c0       	rjmp	.+144    	; 0x1fa4 <set_brightness+0x1c4>
				break;
			}
		}
		if (b & _BV(2)) {
    1f14:	02 ff       	sbrs	r16, 2
    1f16:	94 cf       	rjmp	.-216    	; 0x1e40 <set_brightness+0x60>
			button_clear(2);
    1f18:	80 91 3b 01 	lds	r24, 0x013B
    1f1c:	8b 7f       	andi	r24, 0xFB	; 251
    1f1e:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_BRITE) {
    1f22:	11 30       	cpi	r17, 0x01	; 1
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <set_brightness+0x148>
    1f26:	8b cf       	rjmp	.-234    	; 0x1e3e <set_brightness+0x5e>
				if (flag(f_autobright) || brightness < 90) {
    1f28:	80 91 46 01 	lds	r24, 0x0146
    1f2c:	85 fd       	sbrc	r24, 5
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <set_brightness+0x158>
    1f30:	80 91 45 01 	lds	r24, 0x0145
    1f34:	8a 35       	cpi	r24, 0x5A	; 90
    1f36:	60 f5       	brcc	.+88     	; 0x1f90 <set_brightness+0x1b0>
					clr_flag (f_autobright);
    1f38:	80 91 46 01 	lds	r24, 0x0146
    1f3c:	8f 7d       	andi	r24, 0xDF	; 223
    1f3e:	80 93 46 01 	sts	0x0146, r24
					brightness = limit_brightness (brightness+5);
    1f42:	80 91 45 01 	lds	r24, 0x0145
    1f46:	8b 5f       	subi	r24, 0xFB	; 251
    1f48:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <limit_brightness>
    1f4c:	80 93 45 01 	sts	0x0145, r24
					ocr0a = brightness;
    1f50:	80 93 3d 01 	sts	0x013D, r24
					sprintf_P (d, brit_fmt1, brightness);
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <set_brightness+0x176>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <set_brightness+0x178>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <set_brightness+0x17a>
    1f5a:	ed b7       	in	r30, 0x3d	; 61
    1f5c:	fe b7       	in	r31, 0x3e	; 62
    1f5e:	31 96       	adiw	r30, 0x01	; 1
    1f60:	ad b7       	in	r26, 0x3d	; 61
    1f62:	be b7       	in	r27, 0x3e	; 62
    1f64:	12 96       	adiw	r26, 0x02	; 2
    1f66:	fc 92       	st	X, r15
    1f68:	ee 92       	st	-X, r14
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	d3 82       	std	Z+3, r13	; 0x03
    1f6e:	c2 82       	std	Z+2, r12	; 0x02
    1f70:	84 83       	std	Z+4, r24	; 0x04
    1f72:	15 82       	std	Z+5, r1	; 0x05
    1f74:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sprintf_P>
					display_str (d);
    1f78:	8d b7       	in	r24, 0x3d	; 61
    1f7a:	9e b7       	in	r25, 0x3e	; 62
    1f7c:	06 96       	adiw	r24, 0x06	; 6
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	9e bf       	out	0x3e, r25	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	8d bf       	out	0x3d, r24	; 61
    1f88:	c7 01       	movw	r24, r14
    1f8a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_str>
    1f8e:	58 cf       	rjmp	.-336    	; 0x1e40 <set_brightness+0x60>
				} else {
					set_flag (f_autobright);
    1f90:	80 91 46 01 	lds	r24, 0x0146
    1f94:	80 62       	ori	r24, 0x20	; 32
    1f96:	80 93 46 01 	sts	0x0146, r24
					display_Pstr (brit_fmt2);
    1f9a:	85 e9       	ldi	r24, 0x95	; 149
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
    1fa2:	4e cf       	rjmp	.-356    	; 0x1e40 <set_brightness+0x60>
				}				
			}
		}
	}
}
    1fa4:	29 96       	adiw	r28, 0x09	; 9
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	08 95       	ret

00001fc6 <init_vfd>:

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void init_vfd(void) {
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    1fc6:	81 e5       	ldi	r24, 0x51	; 81
    1fc8:	8c bd       	out	0x2c, r24	; 44
}
    1fca:	08 95       	ret

00001fcc <spi_xfer>:
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) 
{
	SPDR = c;
    1fcc:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & _BV(SPIF)))
    1fce:	0d b4       	in	r0, 0x2d	; 45
    1fd0:	07 fe       	sbrs	r0, 7
    1fd2:	fd cf       	rjmp	.-6      	; 0x1fce <spi_xfer+0x2>
		;
}
    1fd4:	08 95       	ret

00001fd6 <setdisplay>:
}

// This changes and updates the display
// We use the digit/segment table to determine which
// pins on the MAX6921 to turn on
void setdisplay(uint8_t digit, uint8_t segments) {
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
	uint32_t d = 0;	// we only need 20 bits but 32 will do
	uint8_t i;

	// Set the digit selection pin
	d |= _BV(pgm_read_byte(digittable_p + digit));
    1fea:	e8 2f       	mov	r30, r24
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	e0 54       	subi	r30, 0x40	; 64
    1ff0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff2:	e4 91       	lpm	r30, Z
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <setdisplay+0x28>
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	ea 95       	dec	r30
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <setdisplay+0x24>
    2002:	69 01       	movw	r12, r18
    2004:	ee 24       	eor	r14, r14
    2006:	d7 fc       	sbrc	r13, 7
    2008:	e0 94       	com	r14
    200a:	fe 2c       	mov	r15, r14
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
		if (segments & _BV(i))
    2010:	a6 2f       	mov	r26, r22
    2012:	b0 e0       	ldi	r27, 0x00	; 0
			d |= ((uint32_t)1 << pgm_read_byte(segmenttable_p + i));
    2014:	11 e0       	ldi	r17, 0x01	; 1
    2016:	81 2e       	mov	r8, r17
    2018:	91 2c       	mov	r9, r1
    201a:	a1 2c       	mov	r10, r1
    201c:	b1 2c       	mov	r11, r1
	d |= _BV(pgm_read_byte(digittable_p + digit));

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
		if (segments & _BV(i))
    201e:	9d 01       	movw	r18, r26
    2020:	08 2e       	mov	r0, r24
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <setdisplay+0x52>
    2024:	35 95       	asr	r19
    2026:	27 95       	ror	r18
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <setdisplay+0x4e>
    202c:	20 ff       	sbrs	r18, 0
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <setdisplay+0x7c>
			d |= ((uint32_t)1 << pgm_read_byte(segmenttable_p + i));
    2030:	fc 01       	movw	r30, r24
    2032:	ea 54       	subi	r30, 0x4A	; 74
    2034:	fe 4f       	sbci	r31, 0xFE	; 254
    2036:	44 91       	lpm	r20, Z
    2038:	95 01       	movw	r18, r10
    203a:	84 01       	movw	r16, r8
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <setdisplay+0x70>
    203e:	00 0f       	add	r16, r16
    2040:	11 1f       	adc	r17, r17
    2042:	22 1f       	adc	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	4a 95       	dec	r20
    2048:	d2 f7       	brpl	.-12     	; 0x203e <setdisplay+0x68>
    204a:	c0 2a       	or	r12, r16
    204c:	d1 2a       	or	r13, r17
    204e:	e2 2a       	or	r14, r18
    2050:	f3 2a       	or	r15, r19
    2052:	01 96       	adiw	r24, 0x01	; 1
	// Set the digit selection pin
	d |= _BV(pgm_read_byte(digittable_p + digit));

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
    2054:	88 30       	cpi	r24, 0x08	; 8
    2056:	91 05       	cpc	r25, r1
    2058:	11 f7       	brne	.-60     	; 0x201e <setdisplay+0x48>
	}

	// Shift the data out to the display

	// send lowest 20 bits
	cli();			 // to prevent flicker we turn off interrupts
    205a:	f8 94       	cli
	spi_xfer(d >> 16);
    205c:	8e 2d       	mov	r24, r14
    205e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <spi_xfer>
	spi_xfer(d >> 8);
    2062:	8d 2d       	mov	r24, r13
    2064:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <spi_xfer>
	spi_xfer(d);
    2068:	8c 2d       	mov	r24, r12
    206a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <spi_xfer>

	// latch data
	VFDLOAD_PORT |= _BV(VFDLOAD);
    206e:	40 9a       	sbi	0x08, 0	; 8
	VFDLOAD_PORT &= ~_BV(VFDLOAD);
    2070:	40 98       	cbi	0x08, 0	; 8
	sei();
    2072:	78 94       	sei
}
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	9f 90       	pop	r9
    2086:	8f 90       	pop	r8
    2088:	08 95       	ret

0000208a <__vector_16>:

/******************************** TIMER INTERRUPTS ********************************/

// Timer 0 overflow -- display multiplex -- called @ (F_CPU/256) = ~30khz (31.25 khz)
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    208a:	78 94       	sei
    208c:	1f 92       	push	r1
    208e:	0f 92       	push	r0
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	2f 93       	push	r18
    20a4:	3f 93       	push	r19
    20a6:	4f 93       	push	r20
    20a8:	5f 93       	push	r21
    20aa:	6f 93       	push	r22
    20ac:	7f 93       	push	r23
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25
    20b2:	af 93       	push	r26
    20b4:	bf 93       	push	r27
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	ef 93       	push	r30
    20bc:	ff 93       	push	r31
	if (++mildiv >= MIL_DIVIDER) {
    20be:	80 91 3c 01 	lds	r24, 0x013C
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	80 93 3c 01 	sts	0x013C, r24
    20c8:	8f 31       	cpi	r24, 0x1F	; 31
    20ca:	08 f4       	brcc	.+2      	; 0x20ce <__vector_16+0x44>
    20cc:	99 c0       	rjmp	.+306    	; 0x2200 <__vector_16+0x176>
		// Everything in this block happens every millisecond
		uint16_t *ptimer;
		uint8_t button;
		
		OCR0A = ocr0a;	// prevents flicker
    20ce:	80 91 3d 01 	lds	r24, 0x013D
    20d2:	87 bd       	out	0x27, r24	; 39
		mildiv = 0;
    20d4:	10 92 3c 01 	sts	0x013C, r1
		milliseconds++;
    20d8:	80 91 10 01 	lds	r24, 0x0110
    20dc:	90 91 11 01 	lds	r25, 0x0111
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	90 93 11 01 	sts	0x0111, r25
    20e6:	80 93 10 01 	sts	0x0110, r24
		
		// check if we should have the buzzer on
		if (alarming && !snoozetimer) {
    20ea:	80 91 3a 01 	lds	r24, 0x013A
    20ee:	88 23       	and	r24, r24
    20f0:	49 f1       	breq	.+82     	; 0x2144 <__vector_16+0xba>
    20f2:	80 91 43 01 	lds	r24, 0x0143
    20f6:	90 91 44 01 	lds	r25, 0x0144
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	19 f5       	brne	.+70     	; 0x2144 <__vector_16+0xba>
			alarmdiv++;
    20fe:	80 91 12 01 	lds	r24, 0x0112
    2102:	90 91 13 01 	lds	r25, 0x0113
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	90 93 13 01 	sts	0x0113, r25
    210c:	80 93 12 01 	sts	0x0112, r24
			if (alarmdiv > ALARM_DIVIDER) {
    2110:	21 e0       	ldi	r18, 0x01	; 1
    2112:	8d 32       	cpi	r24, 0x2D	; 45
    2114:	92 07       	cpc	r25, r18
    2116:	b0 f0       	brcs	.+44     	; 0x2144 <__vector_16+0xba>
				// This part only gets reached at about 1Hz
				alarmdiv = 0;
    2118:	10 92 13 01 	sts	0x0113, r1
    211c:	10 92 12 01 	sts	0x0112, r1
				beep (4000, ALARM_BEEP, (alarming & 0x80));	// Runs in background
    2120:	40 91 3a 01 	lds	r20, 0x013A
    2124:	40 78       	andi	r20, 0x80	; 128
    2126:	80 ea       	ldi	r24, 0xA0	; 160
    2128:	9f e0       	ldi	r25, 0x0F	; 15
    212a:	68 e5       	ldi	r22, 0x58	; 88
    212c:	72 e0       	ldi	r23, 0x02	; 2
    212e:	0e 94 4f 03 	call	0x69e	; 0x69e <beep>
				if (!(alarming & 0x80))
    2132:	80 91 3a 01 	lds	r24, 0x013A
    2136:	87 fd       	sbrc	r24, 7
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <__vector_16+0xba>
					alarming += 0x4;		// increment beep count
    213a:	80 91 3a 01 	lds	r24, 0x013A
    213e:	8c 5f       	subi	r24, 0xFC	; 252
    2140:	80 93 3a 01 	sts	0x013A, r24

/******************************** TIMER INTERRUPTS ********************************/

// Timer 0 overflow -- display multiplex -- called @ (F_CPU/256) = ~30khz (31.25 khz)
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    2144:	00 e0       	ldi	r16, 0x00	; 0
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	cf e1       	ldi	r28, 0x1F	; 31
    214a:	d1 e0       	ldi	r29, 0x01	; 1
					else if (*ptimer == BT_HELD) {
						buttons |= _BV(button);		// Signal another button press
						tick();
						(*ptimer)++;			// Start timing to repeat
					} else if (++(*ptimer) >= BT_REPEAT)
						*ptimer = BT_HELD;
    214c:	88 ee       	ldi	r24, 0xE8	; 232
    214e:	c8 2e       	mov	r12, r24
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	d8 2e       	mov	r13, r24
					(*ptimer)++;			// Timer stops here unless repeated button
				} else if (brepeat & _BV(button)) {
					if (*ptimer < BT_HELD)
						(*ptimer)++;
					else if (*ptimer == BT_HELD) {
						buttons |= _BV(button);		// Signal another button press
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	e9 2e       	mov	r14, r25
    2158:	f1 2c       	mov	r15, r1
			}			
		}
		
		// Button timing processing
		for (ptimer = btimer, button = 0; button < BT_NUM; ptimer++, button++) {
			if (*ptimer) {	// timer set to 1 when button down detected by ISR
    215a:	28 81       	ld	r18, Y
    215c:	39 81       	ldd	r19, Y+1	; 0x01
    215e:	21 15       	cp	r18, r1
    2160:	31 05       	cpc	r19, r1
    2162:	09 f4       	brne	.+2      	; 0x2166 <__vector_16+0xdc>
    2164:	46 c0       	rjmp	.+140    	; 0x21f2 <__vector_16+0x168>
				if (*ptimer < BT_DEBOUNCE)
    2166:	29 31       	cpi	r18, 0x19	; 25
    2168:	31 05       	cpc	r19, r1
    216a:	e0 f0       	brcs	.+56     	; 0x21a4 <__vector_16+0x11a>
					(*ptimer)++;			// May still be bouncing
				else if (*ptimer == BT_DEBOUNCE) {
    216c:	29 31       	cpi	r18, 0x19	; 25
    216e:	31 05       	cpc	r19, r1
    2170:	51 f4       	brne	.+20     	; 0x2186 <__vector_16+0xfc>
					buttons |= _BV(button);		// Hasn't bounced yet, must really be down
    2172:	20 91 3b 01 	lds	r18, 0x013B
    2176:	c7 01       	movw	r24, r14
    2178:	00 2e       	mov	r0, r16
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <__vector_16+0xf6>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <__vector_16+0xf2>
    2184:	21 c0       	rjmp	.+66     	; 0x21c8 <__vector_16+0x13e>
					tick();
					(*ptimer)++;			// Timer stops here unless repeated button
				} else if (brepeat & _BV(button)) {
    2186:	80 91 3f 01 	lds	r24, 0x013F
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	00 2e       	mov	r0, r16
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <__vector_16+0x10a>
    2190:	95 95       	asr	r25
    2192:	87 95       	ror	r24
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <__vector_16+0x106>
    2198:	80 ff       	sbrs	r24, 0
    219a:	2b c0       	rjmp	.+86     	; 0x21f2 <__vector_16+0x168>
					if (*ptimer < BT_HELD)
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	28 3e       	cpi	r18, 0xE8	; 232
    21a0:	38 07       	cpc	r19, r24
    21a2:	28 f4       	brcc	.+10     	; 0x21ae <__vector_16+0x124>
						(*ptimer)++;
    21a4:	2f 5f       	subi	r18, 0xFF	; 255
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	39 83       	std	Y+1, r19	; 0x01
    21aa:	28 83       	st	Y, r18
    21ac:	22 c0       	rjmp	.+68     	; 0x21f2 <__vector_16+0x168>
					else if (*ptimer == BT_HELD) {
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	28 3e       	cpi	r18, 0xE8	; 232
    21b2:	38 07       	cpc	r19, r24
    21b4:	a1 f4       	brne	.+40     	; 0x21de <__vector_16+0x154>
						buttons |= _BV(button);		// Signal another button press
    21b6:	20 91 3b 01 	lds	r18, 0x013B
    21ba:	c7 01       	movw	r24, r14
    21bc:	00 2e       	mov	r0, r16
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <__vector_16+0x13a>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <__vector_16+0x136>
    21c8:	28 2b       	or	r18, r24
    21ca:	20 93 3b 01 	sts	0x013B, r18
						tick();
    21ce:	0e 94 8e 03 	call	0x71c	; 0x71c <tick>
						(*ptimer)++;			// Start timing to repeat
    21d2:	88 81       	ld	r24, Y
    21d4:	99 81       	ldd	r25, Y+1	; 0x01
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	99 83       	std	Y+1, r25	; 0x01
    21da:	88 83       	st	Y, r24
    21dc:	0a c0       	rjmp	.+20     	; 0x21f2 <__vector_16+0x168>
					} else if (++(*ptimer) >= BT_REPEAT)
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	39 83       	std	Y+1, r19	; 0x01
    21e4:	28 83       	st	Y, r18
    21e6:	84 e0       	ldi	r24, 0x04	; 4
    21e8:	20 3b       	cpi	r18, 0xB0	; 176
    21ea:	38 07       	cpc	r19, r24
    21ec:	10 f0       	brcs	.+4      	; 0x21f2 <__vector_16+0x168>
						*ptimer = BT_HELD;
    21ee:	d9 82       	std	Y+1, r13	; 0x01
    21f0:	c8 82       	st	Y, r12
					alarming += 0x4;		// increment beep count
			}			
		}
		
		// Button timing processing
		for (ptimer = btimer, button = 0; button < BT_NUM; ptimer++, button++) {
    21f2:	22 96       	adiw	r28, 0x02	; 2
    21f4:	0f 5f       	subi	r16, 0xFF	; 255
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	05 30       	cpi	r16, 0x05	; 5
    21fa:	11 05       	cpc	r17, r1
    21fc:	09 f0       	breq	.+2      	; 0x2200 <__vector_16+0x176>
    21fe:	ad cf       	rjmp	.-166    	; 0x215a <__vector_16+0xd0>
				}
			}
		}
	}	

	if (++muxdiv >= pgm_read_byte(mux_divider + currdigit)) {
    2200:	80 91 47 01 	lds	r24, 0x0147
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	80 93 47 01 	sts	0x0147, r24
    220a:	90 91 16 01 	lds	r25, 0x0116
    220e:	e9 2f       	mov	r30, r25
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e5 55       	subi	r30, 0x55	; 85
    2214:	fe 4f       	sbci	r31, 0xFE	; 254
    2216:	e4 91       	lpm	r30, Z
    2218:	8e 17       	cp	r24, r30
    221a:	e0 f1       	brcs	.+120    	; 0x2294 <__vector_16+0x20a>
		muxdiv = 0;
    221c:	10 92 47 01 	sts	0x0147, r1
	
		// Cycle through each digit in the display
		if (++currdigit >= DISPLAYSIZE) {
    2220:	9f 5f       	subi	r25, 0xFF	; 255
    2222:	90 93 16 01 	sts	0x0116, r25
    2226:	99 30       	cpi	r25, 0x09	; 9
    2228:	60 f1       	brcs	.+88     	; 0x2282 <__vector_16+0x1f8>
			currdigit = 0;
    222a:	10 92 16 01 	sts	0x0116, r1

			if (flag(f_show_time)) {
    222e:	80 91 46 01 	lds	r24, 0x0146
    2232:	87 ff       	sbrs	r24, 7
    2234:	26 c0       	rjmp	.+76     	; 0x2282 <__vector_16+0x1f8>
				if (snoozetimer) {
    2236:	80 91 43 01 	lds	r24, 0x0143
    223a:	90 91 44 01 	lds	r25, 0x0144
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	a9 f0       	breq	.+42     	; 0x226c <__vector_16+0x1e2>
					// blink alarm indicator while snoozing
					if (++snoozediv > SNOOZE_DIVIDER) {
    2242:	80 91 36 01 	lds	r24, 0x0136
    2246:	90 91 37 01 	lds	r25, 0x0137
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	90 93 37 01 	sts	0x0137, r25
    2250:	80 93 36 01 	sts	0x0136, r24
    2254:	83 33       	cpi	r24, 0x33	; 51
    2256:	91 05       	cpc	r25, r1
    2258:	a0 f0       	brcs	.+40     	; 0x2282 <__vector_16+0x1f8>
						snoozediv = 0;
    225a:	10 92 37 01 	sts	0x0137, r1
    225e:	10 92 36 01 	sts	0x0136, r1
						display[0] ^= 0x2;
    2262:	80 91 2a 01 	lds	r24, 0x012A
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	89 27       	eor	r24, r25
    226a:	09 c0       	rjmp	.+18     	; 0x227e <__vector_16+0x1f4>
					}			
				} else
					display[0] = (flag(f_alarm_on)) ? (display[0] | 0x2) : (display[0] & ~0x2);
    226c:	90 91 46 01 	lds	r25, 0x0146
    2270:	80 91 2a 01 	lds	r24, 0x012A
    2274:	96 ff       	sbrs	r25, 6
    2276:	02 c0       	rjmp	.+4      	; 0x227c <__vector_16+0x1f2>
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__vector_16+0x1f4>
    227c:	8d 7f       	andi	r24, 0xFD	; 253
    227e:	80 93 2a 01 	sts	0x012A, r24
			}
		}

		// Set the current display's segments
		setdisplay(currdigit, display[currdigit]);
    2282:	80 91 16 01 	lds	r24, 0x0116
    2286:	e8 2f       	mov	r30, r24
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	e6 5d       	subi	r30, 0xD6	; 214
    228c:	fe 4f       	sbci	r31, 0xFE	; 254
    228e:	60 81       	ld	r22, Z
    2290:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <setdisplay>
	}	
}
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	bf 91       	pop	r27
    229e:	af 91       	pop	r26
    22a0:	9f 91       	pop	r25
    22a2:	8f 91       	pop	r24
    22a4:	7f 91       	pop	r23
    22a6:	6f 91       	pop	r22
    22a8:	5f 91       	pop	r21
    22aa:	4f 91       	pop	r20
    22ac:	3f 91       	pop	r19
    22ae:	2f 91       	pop	r18
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	df 90       	pop	r13
    22ba:	cf 90       	pop	r12
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <twiStart>:
*/
static uint8_t twiStart (void)
{
	uint8_t stat;
	
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
    22c6:	84 ea       	ldi	r24, 0xA4	; 164
    22c8:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    22cc:	80 91 bc 00 	lds	r24, 0x00BC
    22d0:	87 ff       	sbrs	r24, 7
    22d2:	fc cf       	rjmp	.-8      	; 0x22cc <twiStart+0x6>
	stat = TWSR & 0xf8;
    22d4:	90 91 b9 00 	lds	r25, 0x00B9
    22d8:	98 7f       	andi	r25, 0xF8	; 248
	if ((stat == SR_START) || (stat == SR_RSTART))
    22da:	98 30       	cpi	r25, 0x08	; 8
    22dc:	29 f0       	breq	.+10     	; 0x22e8 <twiStart+0x22>
		return 0;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 31       	cpi	r25, 0x10	; 16
    22e2:	19 f4       	brne	.+6      	; 0x22ea <twiStart+0x24>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	08 95       	ret
    22e8:	80 e0       	ldi	r24, 0x00	; 0
	twiError (SR_START, stat);
	return 1;
}
    22ea:	08 95       	ret

000022ec <twiWrite>:
/*
** Write one byte of data
*/
static inline void twiWrite(const uint8_t data)
{
	TWDR = data;
    22ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    22f0:	84 e8       	ldi	r24, 0x84	; 132
    22f2:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    22f6:	80 91 bc 00 	lds	r24, 0x00BC
    22fa:	87 ff       	sbrs	r24, 7
    22fc:	fc cf       	rjmp	.-8      	; 0x22f6 <twiWrite+0xa>
}
    22fe:	08 95       	ret

00002300 <twiError>:
	char d[12];
	
	sprintf_P (d, twi_fmt, expected, received);
	uart_puts (d);
#endif
}
    2300:	08 95       	ret

00002302 <twiWriteReg>:

/*
** Write <data> into register <reg> of device at address <addr>
*/
int twiWriteReg(const uint8_t addr, const uint8_t reg, const uint8_t data)
{
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	c8 2f       	mov	r28, r24
    230a:	d6 2f       	mov	r29, r22
    230c:	14 2f       	mov	r17, r20
	if (twiStart() == 0) {
    230e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    2312:	88 23       	and	r24, r24
    2314:	f9 f4       	brne	.+62     	; 0x2354 <twiWriteReg+0x52>
		twiWrite((addr & 0xfe) | W);
    2316:	8c 2f       	mov	r24, r28
    2318:	8e 7f       	andi	r24, 0xFE	; 254
    231a:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
		if (TWSR != SR_SLA_WA)
    231e:	80 91 b9 00 	lds	r24, 0x00B9
    2322:	88 31       	cpi	r24, 0x18	; 24
    2324:	71 f4       	brne	.+28     	; 0x2342 <twiWriteReg+0x40>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    2326:	8d 2f       	mov	r24, r29
    2328:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
			if (TWSR != SR_DTA_A)
    232c:	80 91 b9 00 	lds	r24, 0x00B9
    2330:	88 32       	cpi	r24, 0x28	; 40
    2332:	39 f4       	brne	.+14     	; 0x2342 <twiWriteReg+0x40>
				twiError(SR_DTA_A, TWSR);
			else {
				twiWrite(data);
    2334:	81 2f       	mov	r24, r17
    2336:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
				if (TWSR != SR_DTA_A)
    233a:	80 91 b9 00 	lds	r24, 0x00B9
    233e:	88 32       	cpi	r24, 0x28	; 40
    2340:	19 f0       	breq	.+6      	; 0x2348 <twiWriteReg+0x46>
					twiError(SR_DTA_A, TWSR);
    2342:	80 91 b9 00 	lds	r24, 0x00B9
    2346:	06 c0       	rjmp	.+12     	; 0x2354 <twiWriteReg+0x52>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2348:	84 e9       	ldi	r24, 0x94	; 148
    234a:	80 93 bc 00 	sts	0x00BC, r24
				twiWrite(data);
				if (TWSR != SR_DTA_A)
					twiError(SR_DTA_A, TWSR);
				else {
					twiStop();
					return 0;
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	04 c0       	rjmp	.+8      	; 0x235c <twiWriteReg+0x5a>
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    2354:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	9f ef       	ldi	r25, 0xFF	; 255
}
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	08 95       	ret

00002364 <twiWriteRegN>:

/*
** Write N sequential bytes of data starting at register <reg>
*/
int twiWriteRegN(const uint8_t addr, const uint8_t reg, uint8_t n, void *pdata)
{
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	18 2f       	mov	r17, r24
    2370:	06 2f       	mov	r16, r22
    2372:	f4 2e       	mov	r15, r20
    2374:	e9 01       	movw	r28, r18
	if (twiStart() == 0) {
    2376:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    237a:	88 23       	and	r24, r24
    237c:	21 f5       	brne	.+72     	; 0x23c6 <twiWriteRegN+0x62>
		twiWrite((addr & 0xfe) | W);
    237e:	81 2f       	mov	r24, r17
    2380:	8e 7f       	andi	r24, 0xFE	; 254
    2382:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
		if (TWSR != SR_SLA_WA)
    2386:	80 91 b9 00 	lds	r24, 0x00B9
    238a:	88 31       	cpi	r24, 0x18	; 24
    238c:	79 f4       	brne	.+30     	; 0x23ac <twiWriteRegN+0x48>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    238e:	80 2f       	mov	r24, r16
    2390:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
			if (TWSR != SR_DTA_A)
    2394:	80 91 b9 00 	lds	r24, 0x00B9
    2398:	88 32       	cpi	r24, 0x28	; 40
    239a:	69 f0       	breq	.+26     	; 0x23b6 <twiWriteRegN+0x52>
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <twiWriteRegN+0x48>
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
					twiWrite(*(uint8_t *)pdata++);
    239e:	88 81       	ld	r24, Y
    23a0:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
					if (TWSR != SR_DTA_A) {
    23a4:	80 91 b9 00 	lds	r24, 0x00B9
    23a8:	88 32       	cpi	r24, 0x28	; 40
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <twiWriteRegN+0x4e>
						twiError(SR_DTA_A, TWSR);
    23ac:	80 91 b9 00 	lds	r24, 0x00B9
    23b0:	0a c0       	rjmp	.+20     	; 0x23c6 <twiWriteRegN+0x62>
			twiWrite(reg);
			if (TWSR != SR_DTA_A)
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
					twiWrite(*(uint8_t *)pdata++);
    23b2:	21 96       	adiw	r28, 0x01	; 1
					if (TWSR != SR_DTA_A) {
						twiError(SR_DTA_A, TWSR);
						TWCR = 0;
						return -1;
					}
					n--;
    23b4:	fa 94       	dec	r15
		else {
			twiWrite(reg);
			if (TWSR != SR_DTA_A)
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
    23b6:	ff 20       	and	r15, r15
    23b8:	91 f7       	brne	.-28     	; 0x239e <twiWriteRegN+0x3a>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    23ba:	84 e9       	ldi	r24, 0x94	; 148
    23bc:	80 93 bc 00 	sts	0x00BC, r24
						return -1;
					}
					n--;
				}
				twiStop();
				return 0;				
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <twiWriteRegN+0x6a>
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    23c6:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	9f ef       	ldi	r25, 0xFF	; 255
}
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	08 95       	ret

000023da <twiReadReg>:

/*
** Read register <reg> from device at address <addr>
*/
int twiReadReg(const uint8_t addr, const uint8_t reg)
{
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	c8 2f       	mov	r28, r24
    23e0:	d6 2f       	mov	r29, r22
	uint8_t dr;
	
	if (twiStart() == 0) {
    23e2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    23e6:	88 23       	and	r24, r24
    23e8:	81 f5       	brne	.+96     	; 0x244a <twiReadReg+0x70>
		twiWrite((addr & 0xfe) | W);
    23ea:	8c 2f       	mov	r24, r28
    23ec:	8e 7f       	andi	r24, 0xFE	; 254
    23ee:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
		if (TWSR != SR_SLA_WA)
    23f2:	80 91 b9 00 	lds	r24, 0x00B9
    23f6:	88 31       	cpi	r24, 0x18	; 24
    23f8:	f1 f4       	brne	.+60     	; 0x2436 <twiReadReg+0x5c>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    23fa:	8d 2f       	mov	r24, r29
    23fc:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
			if (TWSR != SR_DTA_A)
    2400:	80 91 b9 00 	lds	r24, 0x00B9
    2404:	88 32       	cpi	r24, 0x28	; 40
    2406:	b9 f4       	brne	.+46     	; 0x2436 <twiReadReg+0x5c>
				twiError(SR_DTA_A, TWSR);
			else if (twiStart() == 0) {
    2408:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    240c:	88 23       	and	r24, r24
    240e:	e9 f4       	brne	.+58     	; 0x244a <twiReadReg+0x70>
				twiWrite((addr & 0xfe) | R);
    2410:	8c 2f       	mov	r24, r28
    2412:	81 60       	ori	r24, 0x01	; 1
    2414:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
				if (TWSR != SR_SLA_RA)
    2418:	80 91 b9 00 	lds	r24, 0x00B9
    241c:	80 34       	cpi	r24, 0x40	; 64
    241e:	59 f4       	brne	.+22     	; 0x2436 <twiReadReg+0x5c>
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    2420:	84 e8       	ldi	r24, 0x84	; 132
    2422:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    2426:	80 91 bc 00 	lds	r24, 0x00BC
    242a:	87 ff       	sbrs	r24, 7
    242c:	fc cf       	rjmp	.-8      	; 0x2426 <twiReadReg+0x4c>
				twiWrite((addr & 0xfe) | R);
				if (TWSR != SR_SLA_RA)
					twiError(SR_SLA_RA, TWSR);
				else {
					twiReadNack();
					if (TWSR != SR_DTR)
    242e:	80 91 b9 00 	lds	r24, 0x00B9
    2432:	88 35       	cpi	r24, 0x58	; 88
    2434:	19 f0       	breq	.+6      	; 0x243c <twiReadReg+0x62>
						twiError(SR_DTR, TWSR);
    2436:	80 91 b9 00 	lds	r24, 0x00B9
    243a:	07 c0       	rjmp	.+14     	; 0x244a <twiReadReg+0x70>
					else {
						dr = TWDR;
    243c:	80 91 bb 00 	lds	r24, 0x00BB
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2440:	94 e9       	ldi	r25, 0x94	; 148
    2442:	90 93 bc 00 	sts	0x00BC, r25
					if (TWSR != SR_DTR)
						twiError(SR_DTR, TWSR);
					else {
						dr = TWDR;
						twiStop();
						return (dr);
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <twiReadReg+0x78>
					}
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    244a:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f ef       	ldi	r25, 0xFF	; 255
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <twiReadRegN>:
** Read N sequential bytes of data starting at register <reg>
**
** Note pdata must point to a buffer of sufficient size.
*/
int twiReadRegN(const uint8_t addr, const uint8_t reg, uint8_t n, void *pdata)
{
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	18 2f       	mov	r17, r24
    2464:	06 2f       	mov	r16, r22
    2466:	f4 2e       	mov	r15, r20
    2468:	e9 01       	movw	r28, r18
	if (twiStart() == 0) {
    246a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    246e:	88 23       	and	r24, r24
    2470:	09 f0       	breq	.+2      	; 0x2474 <twiReadRegN+0x1c>
    2472:	46 c0       	rjmp	.+140    	; 0x2500 <twiReadRegN+0xa8>
		twiWrite((addr & 0xfe) | W);
    2474:	81 2f       	mov	r24, r17
    2476:	8e 7f       	andi	r24, 0xFE	; 254
    2478:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
		if (TWSR != SR_SLA_WA)
    247c:	80 91 b9 00 	lds	r24, 0x00B9
    2480:	88 31       	cpi	r24, 0x18	; 24
    2482:	61 f5       	brne	.+88     	; 0x24dc <twiReadRegN+0x84>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    2484:	80 2f       	mov	r24, r16
    2486:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
			if (TWSR != SR_DTA_A)
    248a:	80 91 b9 00 	lds	r24, 0x00B9
    248e:	88 32       	cpi	r24, 0x28	; 40
    2490:	29 f5       	brne	.+74     	; 0x24dc <twiReadRegN+0x84>
				twiError(SR_DTA_A, TWSR);
			else if (twiStart() == 0) {
    2492:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twiStart>
    2496:	88 23       	and	r24, r24
    2498:	99 f5       	brne	.+102    	; 0x2500 <twiReadRegN+0xa8>
				twiWrite((addr & 0xfe) | R);
    249a:	81 2f       	mov	r24, r17
    249c:	81 60       	ori	r24, 0x01	; 1
    249e:	0e 94 76 11 	call	0x22ec	; 0x22ec <twiWrite>
				if (TWSR != SR_SLA_RA)
    24a2:	80 91 b9 00 	lds	r24, 0x00B9
    24a6:	80 34       	cpi	r24, 0x40	; 64
    24a8:	09 f1       	breq	.+66     	; 0x24ec <twiReadRegN+0x94>
    24aa:	18 c0       	rjmp	.+48     	; 0x24dc <twiReadRegN+0x84>
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
						if (n == 1) {
    24ac:	21 e0       	ldi	r18, 0x01	; 1
    24ae:	f2 16       	cp	r15, r18
    24b0:	59 f4       	brne	.+22     	; 0x24c8 <twiReadRegN+0x70>
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    24b2:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    24b6:	20 91 bc 00 	lds	r18, 0x00BC
    24ba:	27 ff       	sbrs	r18, 7
    24bc:	fc cf       	rjmp	.-8      	; 0x24b6 <twiReadRegN+0x5e>
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
						if (n == 1) {
							twiReadNack();	/* Last byte */
							if (TWSR != SR_DTR) {
    24be:	20 91 b9 00 	lds	r18, 0x00B9
    24c2:	28 35       	cpi	r18, 0x58	; 88
    24c4:	71 f0       	breq	.+28     	; 0x24e2 <twiReadRegN+0x8a>
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <twiReadRegN+0x84>
/*
** Read one byte of data
*/
static inline void twiRead(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    24c8:	90 93 bc 00 	sts	0x00BC, r25
	twiWait();
    24cc:	20 91 bc 00 	lds	r18, 0x00BC
    24d0:	27 ff       	sbrs	r18, 7
    24d2:	fc cf       	rjmp	.-8      	; 0x24cc <twiReadRegN+0x74>
								TWCR = 0;		/* Disable TWI */
								return -1;
							}
						} else {
							twiRead();
							if (TWSR != SR_DTR_A) {
    24d4:	20 91 b9 00 	lds	r18, 0x00B9
    24d8:	20 35       	cpi	r18, 0x50	; 80
    24da:	19 f0       	breq	.+6      	; 0x24e2 <twiReadRegN+0x8a>
								twiError(SR_DTR_A, TWSR);
    24dc:	80 91 b9 00 	lds	r24, 0x00B9
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <twiReadRegN+0xa8>
								TWCR = 0;		/* Disable TWI */
								return -1;
							}
						}
						*(uint8_t *)pdata++ = TWDR;
    24e2:	20 91 bb 00 	lds	r18, 0x00BB
    24e6:	29 93       	st	Y+, r18
						n--;
    24e8:	fa 94       	dec	r15
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <twiReadRegN+0x98>
/*
** Read one byte of data
*/
static inline void twiRead(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    24ec:	94 ec       	ldi	r25, 0xC4	; 196
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    24ee:	84 e8       	ldi	r24, 0x84	; 132
			else if (twiStart() == 0) {
				twiWrite((addr & 0xfe) | R);
				if (TWSR != SR_SLA_RA)
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
    24f0:	ff 20       	and	r15, r15
    24f2:	e1 f6       	brne	.-72     	; 0x24ac <twiReadRegN+0x54>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    24f4:	84 e9       	ldi	r24, 0x94	; 148
    24f6:	80 93 bc 00 	sts	0x00BC, r24
						}
						*(uint8_t *)pdata++ = TWDR;
						n--;
					}
					twiStop();
					return 0;
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <twiReadRegN+0xb0>
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    2500:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    2504:	8f ef       	ldi	r24, 0xFF	; 255
    2506:	9f ef       	ldi	r25, 0xFF	; 255
}
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	08 95       	ret

00002514 <twiInit>:

void twiInit (void)
{
	/* SCL freq = CPU clock/(16+2*TWBR*4^TWPS) */
	TWSR = 0x00;		/* prescale CPU/1 (Note: for status comparisons to work, must be =0) */
    2514:	10 92 b9 00 	sts	0x00B9, r1
	
	/* Min TWBR is 10 */
	//TWBR = 0xff;		/* 15.2khz for debugging */
	TWBR = 32;			/* 100khz */
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	80 93 b8 00 	sts	0x00B8, r24
}
    251e:	08 95       	ret

00002520 <delay_10us>:

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    2520:	05 c0       	rjmp	.+10     	; 0x252c <delay_10us+0xc>
    ns--;
    2522:	81 50       	subi	r24, 0x01	; 1
    2524:	9e e1       	ldi	r25, 0x1E	; 30
    for (i=0; i< 30; i++) {
      nop;
    2526:	00 00       	nop
    2528:	91 50       	subi	r25, 0x01	; 1
{
  uint8_t i;
  
  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    252a:	e9 f7       	brne	.-6      	; 0x2526 <delay_10us+0x6>

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    252c:	88 23       	and	r24, r24
    252e:	c9 f7       	brne	.-14     	; 0x2522 <delay_10us+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    }
  }
}
    2530:	08 95       	ret

00002532 <delay_s>:

void delay_s(uint8_t s) {
  while (s--) {
    2532:	0a c0       	rjmp	.+20     	; 0x2548 <delay_s+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2534:	2f ef       	ldi	r18, 0xFF	; 255
    2536:	39 e6       	ldi	r19, 0x69	; 105
    2538:	48 e1       	ldi	r20, 0x18	; 24
    253a:	21 50       	subi	r18, 0x01	; 1
    253c:	30 40       	sbci	r19, 0x00	; 0
    253e:	40 40       	sbci	r20, 0x00	; 0
    2540:	e1 f7       	brne	.-8      	; 0x253a <delay_s+0x8>
    2542:	00 c0       	rjmp	.+0      	; 0x2544 <delay_s+0x12>
    2544:	00 00       	nop
    2546:	81 50       	subi	r24, 0x01	; 1
    2548:	88 23       	and	r24, r24
    254a:	a1 f7       	brne	.-24     	; 0x2534 <delay_s+0x2>
    _delay_ms(1000);
  }
}
    254c:	08 95       	ret

0000254e <uart_init>:

#if DEBUG
void uart_init(uint16_t BRR) {
  /* setup the main UART */
  UBRR0 = BRR;               // set baudrate counter
    254e:	90 93 c5 00 	sts	0x00C5, r25
    2552:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    2556:	88 e1       	ldi	r24, 0x18	; 24
    2558:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    255c:	8e e0       	ldi	r24, 0x0E	; 14
    255e:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(PD1);
    2562:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(PD0);
    2564:	50 98       	cbi	0x0a, 0	; 10

}
    2566:	08 95       	ret

00002568 <uart_putchar>:

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2568:	90 91 c0 00 	lds	r25, 0x00C0
    256c:	95 ff       	sbrs	r25, 5
    256e:	fc cf       	rjmp	.-8      	; 0x2568 <uart_putchar>
  UDR0 = c;
    2570:	80 93 c6 00 	sts	0x00C6, r24
  return 0;
}
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	08 95       	ret

0000257a <uart_getchar>:

char uart_getchar(void) {
	while (!(UCSR0A & _BV(RXC0)));
    257a:	80 91 c0 00 	lds	r24, 0x00C0
    257e:	87 ff       	sbrs	r24, 7
    2580:	fc cf       	rjmp	.-8      	; 0x257a <uart_getchar>
	return UDR0;
    2582:	80 91 c6 00 	lds	r24, 0x00C6
}
    2586:	08 95       	ret

00002588 <uart_getch>:

char uart_getch(void) {
	return (UCSR0A & _BV(RXC0));
    2588:	80 91 c0 00 	lds	r24, 0x00C0
}
    258c:	80 78       	andi	r24, 0x80	; 128
    258e:	08 95       	ret

00002590 <ROM_putstring>:

void ROM_putstring(const char *str, uint8_t nl) {
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	7c 01       	movw	r14, r24
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    25a2:	10 e0       	ldi	r17, 0x00	; 0
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <ROM_putstring+0x20>
        uart_putchar(pgm_read_byte(&str[i]));
    25a6:	69 83       	std	Y+1, r22	; 0x01
    25a8:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
}

void ROM_putstring(const char *str, uint8_t nl) {
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    25ac:	1f 5f       	subi	r17, 0xFF	; 255
    25ae:	69 81       	ldd	r22, Y+1	; 0x01
    25b0:	f7 01       	movw	r30, r14
    25b2:	e1 0f       	add	r30, r17
    25b4:	f1 1d       	adc	r31, r1
    25b6:	84 91       	lpm	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <ROM_putstring+0x16>
        uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    25bc:	66 23       	and	r22, r22
    25be:	31 f0       	breq	.+12     	; 0x25cc <ROM_putstring+0x3c>
        uart_putchar('\n'); uart_putchar('\r');
    25c0:	8a e0       	ldi	r24, 0x0A	; 10
    25c2:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
    25c6:	8d e0       	ldi	r24, 0x0D	; 13
    25c8:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
  }
}
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	08 95       	ret

000025da <uart_puts>:

void uart_puts(const char* str)
{
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	ec 01       	movw	r28, r24
    while(*str)
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <uart_puts+0xc>
        uart_putc(*str++);
    25e2:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
  }
}

void uart_puts(const char* str)
{
    while(*str)
    25e6:	89 91       	ld	r24, Y+
    25e8:	88 23       	and	r24, r24
    25ea:	d9 f7       	brne	.-10     	; 0x25e2 <uart_puts+0x8>
        uart_putc(*str++);
}
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <uart_puts_P>:

void uart_puts_P(PGM_P str)
{
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	ec 01       	movw	r28, r24
	char c;
	
	while (1) {
		c = pgm_read_byte (str++);
    25f8:	fe 01       	movw	r30, r28
    25fa:	21 96       	adiw	r28, 0x01	; 1
    25fc:	84 91       	lpm	r24, Z
		if (c == 0) break;
    25fe:	88 23       	and	r24, r24
    2600:	19 f0       	breq	.+6      	; 0x2608 <uart_puts_P+0x16>
		uart_putc (c);
    2602:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
	}	
    2606:	f8 cf       	rjmp	.-16     	; 0x25f8 <uart_puts_P+0x6>
}
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    260e:	cf 93       	push	r28
    2610:	c8 2f       	mov	r28, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    2612:	82 95       	swap	r24
    2614:	8f 70       	andi	r24, 0x0F	; 15
    2616:	8a 30       	cpi	r24, 0x0A	; 10
    2618:	10 f4       	brcc	.+4      	; 0x261e <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
    261a:	80 5d       	subi	r24, 0xD0	; 208
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    261e:	89 5a       	subi	r24, 0xA9	; 169
    2620:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    2624:	2c 2f       	mov	r18, r28
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	2f 70       	andi	r18, 0x0F	; 15
    262a:	30 70       	andi	r19, 0x00	; 0
    262c:	8c 2f       	mov	r24, r28
    262e:	8f 70       	andi	r24, 0x0F	; 15
    2630:	2a 30       	cpi	r18, 0x0A	; 10
    2632:	31 05       	cpc	r19, r1
    2634:	14 f4       	brge	.+4      	; 0x263a <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
    2636:	80 5d       	subi	r24, 0xD0	; 208
    2638:	01 c0       	rjmp	.+2      	; 0x263c <uart_putc_hex+0x2e>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    263a:	89 5a       	subi	r24, 0xA9	; 169
    263c:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
}
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    2644:	cf 93       	push	r28
    2646:	c8 2f       	mov	r28, r24
    uart_putc_hex((uint8_t) (w >> 8));
    2648:	89 2f       	mov	r24, r25
    264a:	0e 94 07 13 	call	0x260e	; 0x260e <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    264e:	8c 2f       	mov	r24, r28
    2650:	0e 94 07 13 	call	0x260e	; 0x260e <uart_putc_hex>
}
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	6b 01       	movw	r12, r22
    2662:	7c 01       	movw	r14, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    2664:	c7 01       	movw	r24, r14
    2666:	0e 94 22 13 	call	0x2644	; 0x2644 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    266a:	c6 01       	movw	r24, r12
    266c:	0e 94 22 13 	call	0x2644	; 0x2644 <uart_putw_hex>
}
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	08 95       	ret

0000267a <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    267a:	bf 92       	push	r11
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	8c 01       	movw	r16, r24
    268e:	25 e0       	ldi	r18, 0x05	; 5
    2690:	e2 2e       	mov	r14, r18
    2692:	f1 2c       	mov	r15, r1
    uint16_t num = 10000;
    uint8_t started = 0;
    2694:	20 e0       	ldi	r18, 0x00	; 0
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    2696:	c0 e1       	ldi	r28, 0x10	; 16
    2698:	d7 e2       	ldi	r29, 0x27	; 39
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    269a:	3a e0       	ldi	r19, 0x0A	; 10
    269c:	c3 2e       	mov	r12, r19
    269e:	d1 2c       	mov	r13, r1
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    26a0:	c8 01       	movw	r24, r16
    26a2:	be 01       	movw	r22, r28
    26a4:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
    26a8:	b6 2e       	mov	r11, r22
        if(b > 0 || started || num == 1)
    26aa:	66 23       	and	r22, r22
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <uart_putw_dec+0x3e>
    26ae:	22 23       	and	r18, r18
    26b0:	19 f4       	brne	.+6      	; 0x26b8 <uart_putw_dec+0x3e>
    26b2:	c1 30       	cpi	r28, 0x01	; 1
    26b4:	d1 05       	cpc	r29, r1
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <uart_putw_dec+0x48>
        {
            uart_putc('0' + b);
    26b8:	8b 2d       	mov	r24, r11
    26ba:	80 5d       	subi	r24, 0xD0	; 208
    26bc:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
            started = 1;
    26c0:	21 e0       	ldi	r18, 0x01	; 1
        }
        w -= b * num;
    26c2:	6b 2d       	mov	r22, r11
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	6c 9f       	mul	r22, r28
    26c8:	c0 01       	movw	r24, r0
    26ca:	6d 9f       	mul	r22, r29
    26cc:	90 0d       	add	r25, r0
    26ce:	7c 9f       	mul	r23, r28
    26d0:	90 0d       	add	r25, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	08 1b       	sub	r16, r24
    26d6:	19 0b       	sbc	r17, r25

        num /= 10;
    26d8:	ce 01       	movw	r24, r28
    26da:	b6 01       	movw	r22, r12
    26dc:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__udivmodhi4>
    26e0:	eb 01       	movw	r28, r22
    26e2:	08 94       	sec
    26e4:	e1 08       	sbc	r14, r1
    26e6:	f1 08       	sbc	r15, r1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    26e8:	e1 14       	cp	r14, r1
    26ea:	f1 04       	cpc	r15, r1
    26ec:	c9 f6       	brne	.-78     	; 0x26a0 <uart_putw_dec+0x26>
        }
        w -= b * num;

        num /= 10;
    }
}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	08 95       	ret

00002702 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    2702:	4f 92       	push	r4
    2704:	5f 92       	push	r5
    2706:	6f 92       	push	r6
    2708:	7f 92       	push	r7
    270a:	8f 92       	push	r8
    270c:	9f 92       	push	r9
    270e:	af 92       	push	r10
    2710:	bf 92       	push	r11
    2712:	cf 92       	push	r12
    2714:	df 92       	push	r13
    2716:	ef 92       	push	r14
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	4b 01       	movw	r8, r22
    2724:	5c 01       	movw	r10, r24
    2726:	0a e0       	ldi	r16, 0x0A	; 10
    2728:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;
    272a:	c0 e0       	ldi	r28, 0x00	; 0
    }
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    272c:	c1 2c       	mov	r12, r1
    272e:	4a ec       	ldi	r20, 0xCA	; 202
    2730:	d4 2e       	mov	r13, r20
    2732:	4a e9       	ldi	r20, 0x9A	; 154
    2734:	e4 2e       	mov	r14, r20
    2736:	4b e3       	ldi	r20, 0x3B	; 59
    2738:	f4 2e       	mov	r15, r20
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    273a:	5a e0       	ldi	r21, 0x0A	; 10
    273c:	45 2e       	mov	r4, r21
    273e:	51 2c       	mov	r5, r1
    2740:	61 2c       	mov	r6, r1
    2742:	71 2c       	mov	r7, r1
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    2744:	c5 01       	movw	r24, r10
    2746:	b4 01       	movw	r22, r8
    2748:	a7 01       	movw	r20, r14
    274a:	96 01       	movw	r18, r12
    274c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__udivmodsi4>
    2750:	d2 2f       	mov	r29, r18
        if(b > 0 || started || num == 1)
    2752:	22 23       	and	r18, r18
    2754:	41 f4       	brne	.+16     	; 0x2766 <uart_putdw_dec+0x64>
    2756:	cc 23       	and	r28, r28
    2758:	31 f4       	brne	.+12     	; 0x2766 <uart_putdw_dec+0x64>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	c8 16       	cp	r12, r24
    275e:	d1 04       	cpc	r13, r1
    2760:	e1 04       	cpc	r14, r1
    2762:	f1 04       	cpc	r15, r1
    2764:	29 f4       	brne	.+10     	; 0x2770 <uart_putdw_dec+0x6e>
        {
            uart_putc('0' + b);
    2766:	8d 2f       	mov	r24, r29
    2768:	80 5d       	subi	r24, 0xD0	; 208
    276a:	0e 94 b4 12 	call	0x2568	; 0x2568 <uart_putchar>
            started = 1;
    276e:	c1 e0       	ldi	r28, 0x01	; 1
        }
        dw -= b * num;
    2770:	6d 2f       	mov	r22, r29
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a7 01       	movw	r20, r14
    277a:	96 01       	movw	r18, r12
    277c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__mulsi3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	88 1a       	sub	r8, r24
    2786:	99 0a       	sbc	r9, r25
    2788:	aa 0a       	sbc	r10, r26
    278a:	bb 0a       	sbc	r11, r27

        num /= 10;
    278c:	c7 01       	movw	r24, r14
    278e:	b6 01       	movw	r22, r12
    2790:	a3 01       	movw	r20, r6
    2792:	92 01       	movw	r18, r4
    2794:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__udivmodsi4>
    2798:	69 01       	movw	r12, r18
    279a:	7a 01       	movw	r14, r20
    279c:	01 50       	subi	r16, 0x01	; 1
    279e:	10 40       	sbci	r17, 0x00	; 0
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    27a0:	89 f6       	brne	.-94     	; 0x2744 <uart_putdw_dec+0x42>
        }
        dw -= b * num;

        num /= 10;
    }
}
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	bf 90       	pop	r11
    27b4:	af 90       	pop	r10
    27b6:	9f 90       	pop	r9
    27b8:	8f 90       	pop	r8
    27ba:	7f 90       	pop	r7
    27bc:	6f 90       	pop	r6
    27be:	5f 90       	pop	r5
    27c0:	4f 90       	pop	r4
    27c2:	08 95       	ret

000027c4 <main>:
int main(void) {
	uint8_t menu = 0;
	void (*menup)(void);

	// turn boost off
	TCCR0B = 0;
    27c4:	15 bc       	out	0x25, r1	; 37
	BOOST_DDR |= _BV(BOOST);
    27c6:	56 9a       	sbi	0x0a, 6	; 10
	BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
    27c8:	5e 98       	cbi	0x0b, 6	; 11

	// disable watchdog
	WDTCSR = 0;
    27ca:	10 92 60 00 	sts	0x0060, r1
	wdt_disable();
    27ce:	88 e1       	ldi	r24, 0x18	; 24
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	80 93 60 00 	sts	0x0060, r24
    27d8:	10 92 60 00 	sts	0x0060, r1
    27dc:	0f be       	out	0x3f, r0	; 63
	// now turn it back on... 4 second time out
	WDTCSR |= _BV(WDP3);
    27de:	80 91 60 00 	lds	r24, 0x0060
    27e2:	80 62       	ori	r24, 0x20	; 32
    27e4:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE);
    27e8:	88 e0       	ldi	r24, 0x08	; 8
    27ea:	80 93 60 00 	sts	0x0060, r24
	wdt_enable(WDTO_2S);
    27ee:	2f e0       	ldi	r18, 0x0F	; 15
    27f0:	88 e1       	ldi	r24, 0x18	; 24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	a8 95       	wdr
    27fa:	80 93 60 00 	sts	0x0060, r24
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	20 93 60 00 	sts	0x0060, r18
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    2804:	a8 95       	wdr
	uart_init(BRRL_192);
#endif
*/

	// init io's
	init_buttons();
    2806:	0e 94 20 03 	call	0x640	; 0x640 <init_buttons>
		
	VFDSWITCH_PORT &= ~_BV(VFDSWITCH);
    280a:	5b 98       	cbi	0x0b, 3	; 11
		
	DEBUGP("turning on buttons");
    280c:	8a e0       	ldi	r24, 0x0A	; 10
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	// set up button interrupts
	DEBUGP("turning on alarmsw");
    2816:	8d e1       	ldi	r24, 0x1D	; 29
    2818:	92 e0       	ldi	r25, 0x02	; 2
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	// set off an interrupt if alarm is set or unset
	EICRA = _BV(ISC00);
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 69 00 	sts	0x0069, r24
	EIMSK = _BV(INT0);
    2826:	8d bb       	out	0x1d, r24	; 29
	
	set_flag (f_show_time);
    2828:	80 91 46 01 	lds	r24, 0x0146
    282c:	80 68       	ori	r24, 0x80	; 128
    282e:	80 93 46 01 	sts	0x0146, r24
	DEBUGP("vfd init");
    2832:	80 e3       	ldi	r24, 0x30	; 48
    2834:	92 e0       	ldi	r25, 0x02	; 2
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void init_vfd(void) {
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    283c:	81 e5       	ldi	r24, 0x51	; 81
    283e:	8c bd       	out	0x2c, r24	; 44
	
	set_flag (f_show_time);
	DEBUGP("vfd init");
	init_vfd();
		
	DEBUGP("boost init");
    2840:	89 e3       	ldi	r24, 0x39	; 57
    2842:	92 e0       	ldi	r25, 0x02	; 2
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	init_boost();
    284a:	0e 94 96 03 	call	0x72c	; 0x72c <init_boost>

	region = eeprom_read_byte((uint8_t *)EE_REGION);
    284e:	8b e0       	ldi	r24, 0x0B	; 11
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__eerd_byte_m328p>
    2856:	80 93 14 01 	sts	0x0114, r24
		
	DEBUGP("speaker init");
    285a:	84 e4       	ldi	r24, 0x44	; 68
    285c:	92 e0       	ldi	r25, 0x02	; 2
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	init_speaker();
    2864:	0e 94 33 03 	call	0x666	; 0x666 <init_speaker>

	DEBUGP("clock init");
    2868:	81 e5       	ldi	r24, 0x51	; 81
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	init_rtc();
    2872:	0e 94 f7 02 	call	0x5ee	; 0x5ee <init_rtc>
	init_clock();
    2876:	0e 94 ab 04 	call	0x956	; 0x956 <init_clock>

	init_autobright();
    287a:	0e 94 b4 03 	call	0x768	; 0x768 <init_autobright>

	sei();
    287e:	78 94       	sei

	DEBUGP("alarm init");
    2880:	8c e5       	ldi	r24, 0x5C	; 92
    2882:	92 e0       	ldi	r25, 0x02	; 2
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>
	init_alarm();
    288a:	0e 94 0d 03 	call	0x61a	; 0x61a <init_alarm>
	if (PIND & _BV(ALARM))
    288e:	4a 9b       	sbis	0x09, 2	; 9
    2890:	04 c0       	rjmp	.+8      	; 0x289a <main+0xd6>
		set_flag (f_alarm_on);
    2892:	80 91 46 01 	lds	r24, 0x0146
    2896:	80 64       	ori	r24, 0x40	; 64
    2898:	03 c0       	rjmp	.+6      	; 0x28a0 <main+0xdc>
	else
		clr_flag (f_alarm_on);
    289a:	80 91 46 01 	lds	r24, 0x0146
    289e:	8f 7b       	andi	r24, 0xBF	; 191
    28a0:	80 93 46 01 	sts	0x0146, r24

	DEBUGP("init done");
    28a4:	87 e6       	ldi	r24, 0x67	; 103
    28a6:	92 e0       	ldi	r25, 0x02	; 2
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	0e 94 c8 12 	call	0x2590	; 0x2590 <ROM_putstring>

	display_Pstr (PSTR ("icetube"));
    28ae:	81 e7       	ldi	r24, 0x71	; 113
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	delayms (1000);
    28b6:	88 ee       	ldi	r24, 0xE8	; 232
    28b8:	93 e0       	ldi	r25, 0x03	; 3
    28ba:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
	display_Pstr (verstr);
    28be:	89 ec       	ldi	r24, 0xC9	; 201
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <display_Pstr>
	beep(4000, 2000, 0);	// 500ms @ 4000Hz
    28c6:	80 ea       	ldi	r24, 0xA0	; 160
    28c8:	9f e0       	ldi	r25, 0x0F	; 15
    28ca:	60 ed       	ldi	r22, 0xD0	; 208
    28cc:	77 e0       	ldi	r23, 0x07	; 7
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 4f 03 	call	0x69e	; 0x69e <beep>
	while (beepcounter) ;
    28d4:	80 91 33 01 	lds	r24, 0x0133
    28d8:	90 91 34 01 	lds	r25, 0x0134
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	d1 f7       	brne	.-12     	; 0x28d4 <main+0x110>
    28e0:	c0 e0       	ldi	r28, 0x00	; 0
			button_clear(4);
			setalarmstate(0);
		}

		if (flag(f_show_time) && flag(f_display_update)) {
			uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
    28e2:	08 e1       	ldi	r16, 0x18	; 24
    28e4:	10 e0       	ldi	r17, 0x00	; 0
			delayms (1500);

			set_flag(f_show_time);		 
		} else if (button_test(1)) {
			button_clear(1);
			flags ^= _BV(f_tick_on_sec);	// toggle tick
    28e6:	d4 e0       	ldi	r29, 0x04	; 4
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    28e8:	a8 95       	wdr
	while (beepcounter) ;

	while (1) {
		kickthedog();
		
		if (button_test(3)) {
    28ea:	80 91 3b 01 	lds	r24, 0x013B
    28ee:	83 ff       	sbrs	r24, 3
    28f0:	08 c0       	rjmp	.+16     	; 0x2902 <main+0x13e>
			button_clear(3);
    28f2:	80 91 3b 01 	lds	r24, 0x013B
    28f6:	87 7f       	andi	r24, 0xF7	; 247
    28f8:	80 93 3b 01 	sts	0x013B, r24
			setalarmstate(1);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	0e 94 77 0a 	call	0x14ee	; 0x14ee <setalarmstate>
		}
		if (button_test(4)) {
    2902:	80 91 3b 01 	lds	r24, 0x013B
    2906:	84 ff       	sbrs	r24, 4
    2908:	08 c0       	rjmp	.+16     	; 0x291a <main+0x156>
			button_clear(4);
    290a:	80 91 3b 01 	lds	r24, 0x013B
    290e:	8f 7e       	andi	r24, 0xEF	; 239
    2910:	80 93 3b 01 	sts	0x013B, r24
			setalarmstate(0);
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	0e 94 77 0a 	call	0x14ee	; 0x14ee <setalarmstate>
		}

		if (flag(f_show_time) && flag(f_display_update)) {
    291a:	80 91 46 01 	lds	r24, 0x0146
    291e:	87 ff       	sbrs	r24, 7
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <main+0x1dc>
    2922:	80 91 46 01 	lds	r24, 0x0146
    2926:	84 ff       	sbrs	r24, 4
    2928:	3b c0       	rjmp	.+118    	; 0x29a0 <main+0x1dc>
			uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
    292a:	20 91 15 01 	lds	r18, 0x0115
    292e:	80 91 46 01 	lds	r24, 0x0146
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	81 70       	andi	r24, 0x01	; 1
    2936:	90 70       	andi	r25, 0x00	; 0
    2938:	82 0f       	add	r24, r18
    293a:	91 1d       	adc	r25, r1
    293c:	b8 01       	movw	r22, r16
    293e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__divmodhi4>
    2942:	f8 2e       	mov	r15, r24
			if (flag(f_timeunknown) && (time_s % 2))
    2944:	80 91 46 01 	lds	r24, 0x0146
    2948:	81 ff       	sbrs	r24, 1
    294a:	07 c0       	rjmp	.+14     	; 0x295a <main+0x196>
    294c:	80 91 42 01 	lds	r24, 0x0142
    2950:	80 ff       	sbrs	r24, 0
    2952:	03 c0       	rjmp	.+6      	; 0x295a <main+0x196>
				display_clear();
    2954:	0e 94 05 06 	call	0xc0a	; 0xc0a <display_clear>
    2958:	07 c0       	rjmp	.+14     	; 0x2968 <main+0x1a4>
			else
				display_time(h, time_m, time_s);
    295a:	60 91 35 01 	lds	r22, 0x0135
    295e:	40 91 42 01 	lds	r20, 0x0142
    2962:	8f 2d       	mov	r24, r15
    2964:	0e 94 12 06 	call	0xc24	; 0xc24 <display_time>

			if (flag(f_tick_on_sec) && !alarming)
    2968:	80 91 46 01 	lds	r24, 0x0146
    296c:	82 ff       	sbrs	r24, 2
    296e:	06 c0       	rjmp	.+12     	; 0x297c <main+0x1b8>
    2970:	80 91 3a 01 	lds	r24, 0x013A
    2974:	88 23       	and	r24, r24
    2976:	11 f4       	brne	.+4      	; 0x297c <main+0x1b8>
				tick();
    2978:	0e 94 8e 03 	call	0x71c	; 0x71c <tick>

			if (h == 2 && time_m == 30 && time_s == 0)
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	f8 16       	cp	r15, r24
    2980:	51 f4       	brne	.+20     	; 0x2996 <main+0x1d2>
    2982:	80 91 35 01 	lds	r24, 0x0135
    2986:	8e 31       	cpi	r24, 0x1E	; 30
    2988:	31 f4       	brne	.+12     	; 0x2996 <main+0x1d2>
    298a:	80 91 42 01 	lds	r24, 0x0142
    298e:	88 23       	and	r24, r24
    2990:	11 f4       	brne	.+4      	; 0x2996 <main+0x1d2>
				init_clock();	// Re-sync with ChronoDot once a day
    2992:	0e 94 ab 04 	call	0x956	; 0x956 <init_clock>

			clr_flag (f_display_update);
    2996:	80 91 46 01 	lds	r24, 0x0146
    299a:	8f 7e       	andi	r24, 0xEF	; 239
    299c:	80 93 46 01 	sts	0x0146, r24
		}
		
		if (flag(f_show_time) && alarming && (buttons & 0x7)) {
    29a0:	80 91 46 01 	lds	r24, 0x0146
    29a4:	87 ff       	sbrs	r24, 7
    29a6:	12 c0       	rjmp	.+36     	; 0x29cc <main+0x208>
    29a8:	80 91 3a 01 	lds	r24, 0x013A
    29ac:	88 23       	and	r24, r24
    29ae:	71 f0       	breq	.+28     	; 0x29cc <main+0x208>
    29b0:	80 91 3b 01 	lds	r24, 0x013B
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	87 70       	andi	r24, 0x07	; 7
    29b8:	90 70       	andi	r25, 0x00	; 0
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	39 f0       	breq	.+14     	; 0x29cc <main+0x208>
			buttons &= ~0x7;
    29be:	80 91 3b 01 	lds	r24, 0x013B
    29c2:	88 7f       	andi	r24, 0xF8	; 248
    29c4:	80 93 3b 01 	sts	0x013B, r24
			setsnooze();
    29c8:	0e 94 35 09 	call	0x126a	; 0x126a <setsnooze>
		}

		if (button_test (0)) {
    29cc:	80 91 3b 01 	lds	r24, 0x013B
    29d0:	80 ff       	sbrs	r24, 0
    29d2:	2b c0       	rjmp	.+86     	; 0x2a2a <main+0x266>
			// 'menu' button pressed
			button_clear (0);
    29d4:	80 91 3b 01 	lds	r24, 0x013B
    29d8:	8e 7f       	andi	r24, 0xFE	; 254
    29da:	80 93 3b 01 	sts	0x013B, r24
			if (flag(f_show_time)) {
    29de:	80 91 46 01 	lds	r24, 0x0146
    29e2:	87 ff       	sbrs	r24, 7
    29e4:	06 c0       	rjmp	.+12     	; 0x29f2 <main+0x22e>
				clr_flag(f_show_time);	// Take us out of SHOW_TIME mode
    29e6:	80 91 46 01 	lds	r24, 0x0146
    29ea:	8f 77       	andi	r24, 0x7F	; 127
    29ec:	80 93 46 01 	sts	0x0146, r24
				menu = 0;				// Start at first item in menu
    29f0:	c0 e0       	ldi	r28, 0x00	; 0
			}
			
			// Call next item in menu
			menup = (void(*)(void))pgm_read_word(menu_list + menu++);
    29f2:	ec 2f       	mov	r30, r28
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	e0 50       	subi	r30, 0x00	; 0
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	cf 5f       	subi	r28, 0xFF	; 255
    2a00:	85 91       	lpm	r24, Z+
    2a02:	94 91       	lpm	r25, Z
			(*menup)();		
    2a04:	fc 01       	movw	r30, r24
    2a06:	09 95       	icall
			// Button 0 will be TRUE on return if 'menu' was pressed again
			
			// Check if we reached the end of menu
			if (!pgm_read_word(menu_list + menu)) {
    2a08:	ec 2f       	mov	r30, r28
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	ee 0f       	add	r30, r30
    2a0e:	ff 1f       	adc	r31, r31
    2a10:	e0 50       	subi	r30, 0x00	; 0
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	85 91       	lpm	r24, Z+
    2a16:	94 91       	lpm	r25, Z
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <main+0x25a>
    2a1c:	65 cf       	rjmp	.-310    	; 0x28e8 <main+0x124>
				// Return to SHOW_TIME mode
				button_clear(0);
    2a1e:	80 91 3b 01 	lds	r24, 0x013B
    2a22:	8e 7f       	andi	r24, 0xFE	; 254
    2a24:	80 93 3b 01 	sts	0x013B, r24
    2a28:	20 c0       	rjmp	.+64     	; 0x2a6a <main+0x2a6>
				set_flag(f_show_time);
			}			
		} else if (button_test(2)) {
    2a2a:	80 91 3b 01 	lds	r24, 0x013B
    2a2e:	82 ff       	sbrs	r24, 2
    2a30:	20 c0       	rjmp	.+64     	; 0x2a72 <main+0x2ae>
			// Info display
			button_clear(2);
    2a32:	80 91 3b 01 	lds	r24, 0x013B
    2a36:	8b 7f       	andi	r24, 0xFB	; 251
    2a38:	80 93 3b 01 	sts	0x013B, r24
			clr_flag(f_show_time);
    2a3c:	80 91 46 01 	lds	r24, 0x0146
    2a40:	8f 77       	andi	r24, 0x7F	; 127
    2a42:	80 93 46 01 	sts	0x0146, r24
			
			display_day();
    2a46:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <display_day>
			delayms (1500);
    2a4a:	8c ed       	ldi	r24, 0xDC	; 220
    2a4c:	95 e0       	ldi	r25, 0x05	; 5
    2a4e:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			
			display_sdate();
    2a52:	0e 94 a0 0b 	call	0x1740	; 0x1740 <display_sdate>
			delayms (1500);
    2a56:	8c ed       	ldi	r24, 0xDC	; 220
    2a58:	95 e0       	ldi	r25, 0x05	; 5
    2a5a:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			
			display_temp();
    2a5e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <display_temp>
			delayms (1500);
    2a62:	8c ed       	ldi	r24, 0xDC	; 220
    2a64:	95 e0       	ldi	r25, 0x05	; 5
    2a66:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>

			set_flag(f_show_time);		 
    2a6a:	80 91 46 01 	lds	r24, 0x0146
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	0c c0       	rjmp	.+24     	; 0x2a8a <main+0x2c6>
		} else if (button_test(1)) {
    2a72:	80 91 3b 01 	lds	r24, 0x013B
    2a76:	81 ff       	sbrs	r24, 1
    2a78:	37 cf       	rjmp	.-402    	; 0x28e8 <main+0x124>
			button_clear(1);
    2a7a:	80 91 3b 01 	lds	r24, 0x013B
    2a7e:	8d 7f       	andi	r24, 0xFD	; 253
    2a80:	80 93 3b 01 	sts	0x013B, r24
			flags ^= _BV(f_tick_on_sec);	// toggle tick
    2a84:	80 91 46 01 	lds	r24, 0x0146
    2a88:	8d 27       	eor	r24, r29
    2a8a:	80 93 46 01 	sts	0x0146, r24
    2a8e:	2c cf       	rjmp	.-424    	; 0x28e8 <main+0x124>

00002a90 <__mulsi3>:
    2a90:	62 9f       	mul	r22, r18
    2a92:	d0 01       	movw	r26, r0
    2a94:	73 9f       	mul	r23, r19
    2a96:	f0 01       	movw	r30, r0
    2a98:	82 9f       	mul	r24, r18
    2a9a:	e0 0d       	add	r30, r0
    2a9c:	f1 1d       	adc	r31, r1
    2a9e:	64 9f       	mul	r22, r20
    2aa0:	e0 0d       	add	r30, r0
    2aa2:	f1 1d       	adc	r31, r1
    2aa4:	92 9f       	mul	r25, r18
    2aa6:	f0 0d       	add	r31, r0
    2aa8:	83 9f       	mul	r24, r19
    2aaa:	f0 0d       	add	r31, r0
    2aac:	74 9f       	mul	r23, r20
    2aae:	f0 0d       	add	r31, r0
    2ab0:	65 9f       	mul	r22, r21
    2ab2:	f0 0d       	add	r31, r0
    2ab4:	99 27       	eor	r25, r25
    2ab6:	72 9f       	mul	r23, r18
    2ab8:	b0 0d       	add	r27, r0
    2aba:	e1 1d       	adc	r30, r1
    2abc:	f9 1f       	adc	r31, r25
    2abe:	63 9f       	mul	r22, r19
    2ac0:	b0 0d       	add	r27, r0
    2ac2:	e1 1d       	adc	r30, r1
    2ac4:	f9 1f       	adc	r31, r25
    2ac6:	bd 01       	movw	r22, r26
    2ac8:	cf 01       	movw	r24, r30
    2aca:	11 24       	eor	r1, r1
    2acc:	08 95       	ret

00002ace <__udivmodqi4>:
    2ace:	99 1b       	sub	r25, r25
    2ad0:	79 e0       	ldi	r23, 0x09	; 9
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <__udivmodqi4_ep>

00002ad4 <__udivmodqi4_loop>:
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	96 17       	cp	r25, r22
    2ad8:	08 f0       	brcs	.+2      	; 0x2adc <__udivmodqi4_ep>
    2ada:	96 1b       	sub	r25, r22

00002adc <__udivmodqi4_ep>:
    2adc:	88 1f       	adc	r24, r24
    2ade:	7a 95       	dec	r23
    2ae0:	c9 f7       	brne	.-14     	; 0x2ad4 <__udivmodqi4_loop>
    2ae2:	80 95       	com	r24
    2ae4:	08 95       	ret

00002ae6 <__udivmodhi4>:
    2ae6:	aa 1b       	sub	r26, r26
    2ae8:	bb 1b       	sub	r27, r27
    2aea:	51 e1       	ldi	r21, 0x11	; 17
    2aec:	07 c0       	rjmp	.+14     	; 0x2afc <__udivmodhi4_ep>

00002aee <__udivmodhi4_loop>:
    2aee:	aa 1f       	adc	r26, r26
    2af0:	bb 1f       	adc	r27, r27
    2af2:	a6 17       	cp	r26, r22
    2af4:	b7 07       	cpc	r27, r23
    2af6:	10 f0       	brcs	.+4      	; 0x2afc <__udivmodhi4_ep>
    2af8:	a6 1b       	sub	r26, r22
    2afa:	b7 0b       	sbc	r27, r23

00002afc <__udivmodhi4_ep>:
    2afc:	88 1f       	adc	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	5a 95       	dec	r21
    2b02:	a9 f7       	brne	.-22     	; 0x2aee <__udivmodhi4_loop>
    2b04:	80 95       	com	r24
    2b06:	90 95       	com	r25
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	08 95       	ret

00002b0e <__divmodhi4>:
    2b0e:	97 fb       	bst	r25, 7
    2b10:	09 2e       	mov	r0, r25
    2b12:	07 26       	eor	r0, r23
    2b14:	0a d0       	rcall	.+20     	; 0x2b2a <__divmodhi4_neg1>
    2b16:	77 fd       	sbrc	r23, 7
    2b18:	04 d0       	rcall	.+8      	; 0x2b22 <__divmodhi4_neg2>
    2b1a:	e5 df       	rcall	.-54     	; 0x2ae6 <__udivmodhi4>
    2b1c:	06 d0       	rcall	.+12     	; 0x2b2a <__divmodhi4_neg1>
    2b1e:	00 20       	and	r0, r0
    2b20:	1a f4       	brpl	.+6      	; 0x2b28 <__divmodhi4_exit>

00002b22 <__divmodhi4_neg2>:
    2b22:	70 95       	com	r23
    2b24:	61 95       	neg	r22
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255

00002b28 <__divmodhi4_exit>:
    2b28:	08 95       	ret

00002b2a <__divmodhi4_neg1>:
    2b2a:	f6 f7       	brtc	.-4      	; 0x2b28 <__divmodhi4_exit>
    2b2c:	90 95       	com	r25
    2b2e:	81 95       	neg	r24
    2b30:	9f 4f       	sbci	r25, 0xFF	; 255
    2b32:	08 95       	ret

00002b34 <__udivmodsi4>:
    2b34:	a1 e2       	ldi	r26, 0x21	; 33
    2b36:	1a 2e       	mov	r1, r26
    2b38:	aa 1b       	sub	r26, r26
    2b3a:	bb 1b       	sub	r27, r27
    2b3c:	fd 01       	movw	r30, r26
    2b3e:	0d c0       	rjmp	.+26     	; 0x2b5a <__udivmodsi4_ep>

00002b40 <__udivmodsi4_loop>:
    2b40:	aa 1f       	adc	r26, r26
    2b42:	bb 1f       	adc	r27, r27
    2b44:	ee 1f       	adc	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	a2 17       	cp	r26, r18
    2b4a:	b3 07       	cpc	r27, r19
    2b4c:	e4 07       	cpc	r30, r20
    2b4e:	f5 07       	cpc	r31, r21
    2b50:	20 f0       	brcs	.+8      	; 0x2b5a <__udivmodsi4_ep>
    2b52:	a2 1b       	sub	r26, r18
    2b54:	b3 0b       	sbc	r27, r19
    2b56:	e4 0b       	sbc	r30, r20
    2b58:	f5 0b       	sbc	r31, r21

00002b5a <__udivmodsi4_ep>:
    2b5a:	66 1f       	adc	r22, r22
    2b5c:	77 1f       	adc	r23, r23
    2b5e:	88 1f       	adc	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	1a 94       	dec	r1
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <__udivmodsi4_loop>
    2b66:	60 95       	com	r22
    2b68:	70 95       	com	r23
    2b6a:	80 95       	com	r24
    2b6c:	90 95       	com	r25
    2b6e:	9b 01       	movw	r18, r22
    2b70:	ac 01       	movw	r20, r24
    2b72:	bd 01       	movw	r22, r26
    2b74:	cf 01       	movw	r24, r30
    2b76:	08 95       	ret

00002b78 <__divmodsi4>:
    2b78:	97 fb       	bst	r25, 7
    2b7a:	09 2e       	mov	r0, r25
    2b7c:	05 26       	eor	r0, r21
    2b7e:	0e d0       	rcall	.+28     	; 0x2b9c <__divmodsi4_neg1>
    2b80:	57 fd       	sbrc	r21, 7
    2b82:	04 d0       	rcall	.+8      	; 0x2b8c <__divmodsi4_neg2>
    2b84:	d7 df       	rcall	.-82     	; 0x2b34 <__udivmodsi4>
    2b86:	0a d0       	rcall	.+20     	; 0x2b9c <__divmodsi4_neg1>
    2b88:	00 1c       	adc	r0, r0
    2b8a:	38 f4       	brcc	.+14     	; 0x2b9a <__divmodsi4_exit>

00002b8c <__divmodsi4_neg2>:
    2b8c:	50 95       	com	r21
    2b8e:	40 95       	com	r20
    2b90:	30 95       	com	r19
    2b92:	21 95       	neg	r18
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	4f 4f       	sbci	r20, 0xFF	; 255
    2b98:	5f 4f       	sbci	r21, 0xFF	; 255

00002b9a <__divmodsi4_exit>:
    2b9a:	08 95       	ret

00002b9c <__divmodsi4_neg1>:
    2b9c:	f6 f7       	brtc	.-4      	; 0x2b9a <__divmodsi4_exit>
    2b9e:	90 95       	com	r25
    2ba0:	80 95       	com	r24
    2ba2:	70 95       	com	r23
    2ba4:	61 95       	neg	r22
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	08 95       	ret

00002bae <memcpy_P>:
    2bae:	fb 01       	movw	r30, r22
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <memcpy_P+0xa>
    2bb4:	05 90       	lpm	r0, Z+
    2bb6:	0d 92       	st	X+, r0
    2bb8:	41 50       	subi	r20, 0x01	; 1
    2bba:	50 40       	sbci	r21, 0x00	; 0
    2bbc:	d8 f7       	brcc	.-10     	; 0x2bb4 <memcpy_P+0x6>
    2bbe:	08 95       	ret

00002bc0 <strcpy_P>:
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	05 90       	lpm	r0, Z+
    2bc6:	0d 92       	st	X+, r0
    2bc8:	00 20       	and	r0, r0
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <strcpy_P+0x4>
    2bcc:	08 95       	ret

00002bce <sprintf_P>:
    2bce:	ae e0       	ldi	r26, 0x0E	; 14
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ed ee       	ldi	r30, 0xED	; 237
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x1c>
    2bda:	0d 89       	ldd	r16, Y+21	; 0x15
    2bdc:	1e 89       	ldd	r17, Y+22	; 0x16
    2bde:	8e e0       	ldi	r24, 0x0E	; 14
    2be0:	8c 83       	std	Y+4, r24	; 0x04
    2be2:	1a 83       	std	Y+2, r17	; 0x02
    2be4:	09 83       	std	Y+1, r16	; 0x01
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	9f e7       	ldi	r25, 0x7F	; 127
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	ae 01       	movw	r20, r28
    2bf0:	47 5e       	subi	r20, 0xE7	; 231
    2bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	6f 89       	ldd	r22, Y+23	; 0x17
    2bfa:	78 8d       	ldd	r23, Y+24	; 0x18
    2bfc:	0e 94 09 16 	call	0x2c12	; 0x2c12 <vfprintf>
    2c00:	ef 81       	ldd	r30, Y+7	; 0x07
    2c02:	f8 85       	ldd	r31, Y+8	; 0x08
    2c04:	e0 0f       	add	r30, r16
    2c06:	f1 1f       	adc	r31, r17
    2c08:	10 82       	st	Z, r1
    2c0a:	2e 96       	adiw	r28, 0x0e	; 14
    2c0c:	e4 e0       	ldi	r30, 0x04	; 4
    2c0e:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x1c>

00002c12 <vfprintf>:
    2c12:	ad e0       	ldi	r26, 0x0D	; 13
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	ef e0       	ldi	r30, 0x0F	; 15
    2c18:	f6 e1       	ldi	r31, 0x16	; 22
    2c1a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__>
    2c1e:	3c 01       	movw	r6, r24
    2c20:	7d 87       	std	Y+13, r23	; 0x0d
    2c22:	6c 87       	std	Y+12, r22	; 0x0c
    2c24:	5a 01       	movw	r10, r20
    2c26:	fc 01       	movw	r30, r24
    2c28:	17 82       	std	Z+7, r1	; 0x07
    2c2a:	16 82       	std	Z+6, r1	; 0x06
    2c2c:	83 81       	ldd	r24, Z+3	; 0x03
    2c2e:	81 ff       	sbrs	r24, 1
    2c30:	c8 c1       	rjmp	.+912    	; 0x2fc2 <vfprintf+0x3b0>
    2c32:	2e 01       	movw	r4, r28
    2c34:	08 94       	sec
    2c36:	41 1c       	adc	r4, r1
    2c38:	51 1c       	adc	r5, r1
    2c3a:	f3 01       	movw	r30, r6
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c40:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c42:	93 fd       	sbrc	r25, 3
    2c44:	85 91       	lpm	r24, Z+
    2c46:	93 ff       	sbrs	r25, 3
    2c48:	81 91       	ld	r24, Z+
    2c4a:	fd 87       	std	Y+13, r31	; 0x0d
    2c4c:	ec 87       	std	Y+12, r30	; 0x0c
    2c4e:	88 23       	and	r24, r24
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <vfprintf+0x42>
    2c52:	b3 c1       	rjmp	.+870    	; 0x2fba <vfprintf+0x3a8>
    2c54:	85 32       	cpi	r24, 0x25	; 37
    2c56:	41 f4       	brne	.+16     	; 0x2c68 <vfprintf+0x56>
    2c58:	93 fd       	sbrc	r25, 3
    2c5a:	85 91       	lpm	r24, Z+
    2c5c:	93 ff       	sbrs	r25, 3
    2c5e:	81 91       	ld	r24, Z+
    2c60:	fd 87       	std	Y+13, r31	; 0x0d
    2c62:	ec 87       	std	Y+12, r30	; 0x0c
    2c64:	85 32       	cpi	r24, 0x25	; 37
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <vfprintf+0x60>
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	b3 01       	movw	r22, r6
    2c6c:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2c70:	e4 cf       	rjmp	.-56     	; 0x2c3a <vfprintf+0x28>
    2c72:	ff 24       	eor	r15, r15
    2c74:	ee 24       	eor	r14, r14
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	10 32       	cpi	r17, 0x20	; 32
    2c7a:	b0 f4       	brcc	.+44     	; 0x2ca8 <vfprintf+0x96>
    2c7c:	8b 32       	cpi	r24, 0x2B	; 43
    2c7e:	69 f0       	breq	.+26     	; 0x2c9a <vfprintf+0x88>
    2c80:	8c 32       	cpi	r24, 0x2C	; 44
    2c82:	28 f4       	brcc	.+10     	; 0x2c8e <vfprintf+0x7c>
    2c84:	80 32       	cpi	r24, 0x20	; 32
    2c86:	51 f0       	breq	.+20     	; 0x2c9c <vfprintf+0x8a>
    2c88:	83 32       	cpi	r24, 0x23	; 35
    2c8a:	71 f4       	brne	.+28     	; 0x2ca8 <vfprintf+0x96>
    2c8c:	0b c0       	rjmp	.+22     	; 0x2ca4 <vfprintf+0x92>
    2c8e:	8d 32       	cpi	r24, 0x2D	; 45
    2c90:	39 f0       	breq	.+14     	; 0x2ca0 <vfprintf+0x8e>
    2c92:	80 33       	cpi	r24, 0x30	; 48
    2c94:	49 f4       	brne	.+18     	; 0x2ca8 <vfprintf+0x96>
    2c96:	11 60       	ori	r17, 0x01	; 1
    2c98:	2c c0       	rjmp	.+88     	; 0x2cf2 <vfprintf+0xe0>
    2c9a:	12 60       	ori	r17, 0x02	; 2
    2c9c:	14 60       	ori	r17, 0x04	; 4
    2c9e:	29 c0       	rjmp	.+82     	; 0x2cf2 <vfprintf+0xe0>
    2ca0:	18 60       	ori	r17, 0x08	; 8
    2ca2:	27 c0       	rjmp	.+78     	; 0x2cf2 <vfprintf+0xe0>
    2ca4:	10 61       	ori	r17, 0x10	; 16
    2ca6:	25 c0       	rjmp	.+74     	; 0x2cf2 <vfprintf+0xe0>
    2ca8:	17 fd       	sbrc	r17, 7
    2caa:	2e c0       	rjmp	.+92     	; 0x2d08 <vfprintf+0xf6>
    2cac:	28 2f       	mov	r18, r24
    2cae:	20 53       	subi	r18, 0x30	; 48
    2cb0:	2a 30       	cpi	r18, 0x0A	; 10
    2cb2:	98 f4       	brcc	.+38     	; 0x2cda <vfprintf+0xc8>
    2cb4:	16 ff       	sbrs	r17, 6
    2cb6:	08 c0       	rjmp	.+16     	; 0x2cc8 <vfprintf+0xb6>
    2cb8:	8f 2d       	mov	r24, r15
    2cba:	88 0f       	add	r24, r24
    2cbc:	f8 2e       	mov	r15, r24
    2cbe:	ff 0c       	add	r15, r15
    2cc0:	ff 0c       	add	r15, r15
    2cc2:	f8 0e       	add	r15, r24
    2cc4:	f2 0e       	add	r15, r18
    2cc6:	15 c0       	rjmp	.+42     	; 0x2cf2 <vfprintf+0xe0>
    2cc8:	8e 2d       	mov	r24, r14
    2cca:	88 0f       	add	r24, r24
    2ccc:	e8 2e       	mov	r14, r24
    2cce:	ee 0c       	add	r14, r14
    2cd0:	ee 0c       	add	r14, r14
    2cd2:	e8 0e       	add	r14, r24
    2cd4:	e2 0e       	add	r14, r18
    2cd6:	10 62       	ori	r17, 0x20	; 32
    2cd8:	0c c0       	rjmp	.+24     	; 0x2cf2 <vfprintf+0xe0>
    2cda:	8e 32       	cpi	r24, 0x2E	; 46
    2cdc:	21 f4       	brne	.+8      	; 0x2ce6 <vfprintf+0xd4>
    2cde:	16 fd       	sbrc	r17, 6
    2ce0:	6c c1       	rjmp	.+728    	; 0x2fba <vfprintf+0x3a8>
    2ce2:	10 64       	ori	r17, 0x40	; 64
    2ce4:	06 c0       	rjmp	.+12     	; 0x2cf2 <vfprintf+0xe0>
    2ce6:	8c 36       	cpi	r24, 0x6C	; 108
    2ce8:	11 f4       	brne	.+4      	; 0x2cee <vfprintf+0xdc>
    2cea:	10 68       	ori	r17, 0x80	; 128
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0xe0>
    2cee:	88 36       	cpi	r24, 0x68	; 104
    2cf0:	59 f4       	brne	.+22     	; 0x2d08 <vfprintf+0xf6>
    2cf2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cf4:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cf6:	93 fd       	sbrc	r25, 3
    2cf8:	85 91       	lpm	r24, Z+
    2cfa:	93 ff       	sbrs	r25, 3
    2cfc:	81 91       	ld	r24, Z+
    2cfe:	fd 87       	std	Y+13, r31	; 0x0d
    2d00:	ec 87       	std	Y+12, r30	; 0x0c
    2d02:	88 23       	and	r24, r24
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <vfprintf+0xf6>
    2d06:	b8 cf       	rjmp	.-144    	; 0x2c78 <vfprintf+0x66>
    2d08:	98 2f       	mov	r25, r24
    2d0a:	95 54       	subi	r25, 0x45	; 69
    2d0c:	93 30       	cpi	r25, 0x03	; 3
    2d0e:	18 f0       	brcs	.+6      	; 0x2d16 <vfprintf+0x104>
    2d10:	90 52       	subi	r25, 0x20	; 32
    2d12:	93 30       	cpi	r25, 0x03	; 3
    2d14:	38 f4       	brcc	.+14     	; 0x2d24 <vfprintf+0x112>
    2d16:	24 e0       	ldi	r18, 0x04	; 4
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	a2 0e       	add	r10, r18
    2d1c:	b3 1e       	adc	r11, r19
    2d1e:	3f e3       	ldi	r19, 0x3F	; 63
    2d20:	39 83       	std	Y+1, r19	; 0x01
    2d22:	0f c0       	rjmp	.+30     	; 0x2d42 <vfprintf+0x130>
    2d24:	83 36       	cpi	r24, 0x63	; 99
    2d26:	31 f0       	breq	.+12     	; 0x2d34 <vfprintf+0x122>
    2d28:	83 37       	cpi	r24, 0x73	; 115
    2d2a:	81 f0       	breq	.+32     	; 0x2d4c <vfprintf+0x13a>
    2d2c:	83 35       	cpi	r24, 0x53	; 83
    2d2e:	09 f0       	breq	.+2      	; 0x2d32 <vfprintf+0x120>
    2d30:	5a c0       	rjmp	.+180    	; 0x2de6 <vfprintf+0x1d4>
    2d32:	22 c0       	rjmp	.+68     	; 0x2d78 <vfprintf+0x166>
    2d34:	f5 01       	movw	r30, r10
    2d36:	80 81       	ld	r24, Z
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	22 e0       	ldi	r18, 0x02	; 2
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	a2 0e       	add	r10, r18
    2d40:	b3 1e       	adc	r11, r19
    2d42:	21 e0       	ldi	r18, 0x01	; 1
    2d44:	c2 2e       	mov	r12, r18
    2d46:	d1 2c       	mov	r13, r1
    2d48:	42 01       	movw	r8, r4
    2d4a:	14 c0       	rjmp	.+40     	; 0x2d74 <vfprintf+0x162>
    2d4c:	92 e0       	ldi	r25, 0x02	; 2
    2d4e:	29 2e       	mov	r2, r25
    2d50:	31 2c       	mov	r3, r1
    2d52:	2a 0c       	add	r2, r10
    2d54:	3b 1c       	adc	r3, r11
    2d56:	f5 01       	movw	r30, r10
    2d58:	80 80       	ld	r8, Z
    2d5a:	91 80       	ldd	r9, Z+1	; 0x01
    2d5c:	16 ff       	sbrs	r17, 6
    2d5e:	03 c0       	rjmp	.+6      	; 0x2d66 <vfprintf+0x154>
    2d60:	6f 2d       	mov	r22, r15
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <vfprintf+0x158>
    2d66:	6f ef       	ldi	r22, 0xFF	; 255
    2d68:	7f ef       	ldi	r23, 0xFF	; 255
    2d6a:	c4 01       	movw	r24, r8
    2d6c:	0e 94 08 18 	call	0x3010	; 0x3010 <strnlen>
    2d70:	6c 01       	movw	r12, r24
    2d72:	51 01       	movw	r10, r2
    2d74:	1f 77       	andi	r17, 0x7F	; 127
    2d76:	15 c0       	rjmp	.+42     	; 0x2da2 <vfprintf+0x190>
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	28 2e       	mov	r2, r24
    2d7c:	31 2c       	mov	r3, r1
    2d7e:	2a 0c       	add	r2, r10
    2d80:	3b 1c       	adc	r3, r11
    2d82:	f5 01       	movw	r30, r10
    2d84:	80 80       	ld	r8, Z
    2d86:	91 80       	ldd	r9, Z+1	; 0x01
    2d88:	16 ff       	sbrs	r17, 6
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <vfprintf+0x180>
    2d8c:	6f 2d       	mov	r22, r15
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <vfprintf+0x184>
    2d92:	6f ef       	ldi	r22, 0xFF	; 255
    2d94:	7f ef       	ldi	r23, 0xFF	; 255
    2d96:	c4 01       	movw	r24, r8
    2d98:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <strnlen_P>
    2d9c:	6c 01       	movw	r12, r24
    2d9e:	10 68       	ori	r17, 0x80	; 128
    2da0:	51 01       	movw	r10, r2
    2da2:	13 fd       	sbrc	r17, 3
    2da4:	1c c0       	rjmp	.+56     	; 0x2dde <vfprintf+0x1cc>
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <vfprintf+0x1a2>
    2da8:	80 e2       	ldi	r24, 0x20	; 32
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	b3 01       	movw	r22, r6
    2dae:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2db2:	ea 94       	dec	r14
    2db4:	8e 2d       	mov	r24, r14
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	c8 16       	cp	r12, r24
    2dba:	d9 06       	cpc	r13, r25
    2dbc:	a8 f3       	brcs	.-22     	; 0x2da8 <vfprintf+0x196>
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <vfprintf+0x1cc>
    2dc0:	f4 01       	movw	r30, r8
    2dc2:	17 fd       	sbrc	r17, 7
    2dc4:	85 91       	lpm	r24, Z+
    2dc6:	17 ff       	sbrs	r17, 7
    2dc8:	81 91       	ld	r24, Z+
    2dca:	4f 01       	movw	r8, r30
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	b3 01       	movw	r22, r6
    2dd0:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2dd4:	e1 10       	cpse	r14, r1
    2dd6:	ea 94       	dec	r14
    2dd8:	08 94       	sec
    2dda:	c1 08       	sbc	r12, r1
    2ddc:	d1 08       	sbc	r13, r1
    2dde:	c1 14       	cp	r12, r1
    2de0:	d1 04       	cpc	r13, r1
    2de2:	71 f7       	brne	.-36     	; 0x2dc0 <vfprintf+0x1ae>
    2de4:	e7 c0       	rjmp	.+462    	; 0x2fb4 <vfprintf+0x3a2>
    2de6:	84 36       	cpi	r24, 0x64	; 100
    2de8:	11 f0       	breq	.+4      	; 0x2dee <vfprintf+0x1dc>
    2dea:	89 36       	cpi	r24, 0x69	; 105
    2dec:	51 f5       	brne	.+84     	; 0x2e42 <vfprintf+0x230>
    2dee:	f5 01       	movw	r30, r10
    2df0:	17 ff       	sbrs	r17, 7
    2df2:	07 c0       	rjmp	.+14     	; 0x2e02 <vfprintf+0x1f0>
    2df4:	80 81       	ld	r24, Z
    2df6:	91 81       	ldd	r25, Z+1	; 0x01
    2df8:	a2 81       	ldd	r26, Z+2	; 0x02
    2dfa:	b3 81       	ldd	r27, Z+3	; 0x03
    2dfc:	24 e0       	ldi	r18, 0x04	; 4
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	08 c0       	rjmp	.+16     	; 0x2e12 <vfprintf+0x200>
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	aa 27       	eor	r26, r26
    2e08:	97 fd       	sbrc	r25, 7
    2e0a:	a0 95       	com	r26
    2e0c:	ba 2f       	mov	r27, r26
    2e0e:	22 e0       	ldi	r18, 0x02	; 2
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	a2 0e       	add	r10, r18
    2e14:	b3 1e       	adc	r11, r19
    2e16:	01 2f       	mov	r16, r17
    2e18:	0f 76       	andi	r16, 0x6F	; 111
    2e1a:	b7 ff       	sbrs	r27, 7
    2e1c:	08 c0       	rjmp	.+16     	; 0x2e2e <vfprintf+0x21c>
    2e1e:	b0 95       	com	r27
    2e20:	a0 95       	com	r26
    2e22:	90 95       	com	r25
    2e24:	81 95       	neg	r24
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	af 4f       	sbci	r26, 0xFF	; 255
    2e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2c:	00 68       	ori	r16, 0x80	; 128
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	a2 01       	movw	r20, r4
    2e34:	2a e0       	ldi	r18, 0x0A	; 10
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	0e 94 3f 18 	call	0x307e	; 0x307e <__ultoa_invert>
    2e3c:	d8 2e       	mov	r13, r24
    2e3e:	d4 18       	sub	r13, r4
    2e40:	3f c0       	rjmp	.+126    	; 0x2ec0 <vfprintf+0x2ae>
    2e42:	85 37       	cpi	r24, 0x75	; 117
    2e44:	21 f4       	brne	.+8      	; 0x2e4e <vfprintf+0x23c>
    2e46:	1f 7e       	andi	r17, 0xEF	; 239
    2e48:	2a e0       	ldi	r18, 0x0A	; 10
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	20 c0       	rjmp	.+64     	; 0x2e8e <vfprintf+0x27c>
    2e4e:	19 7f       	andi	r17, 0xF9	; 249
    2e50:	8f 36       	cpi	r24, 0x6F	; 111
    2e52:	a9 f0       	breq	.+42     	; 0x2e7e <vfprintf+0x26c>
    2e54:	80 37       	cpi	r24, 0x70	; 112
    2e56:	20 f4       	brcc	.+8      	; 0x2e60 <vfprintf+0x24e>
    2e58:	88 35       	cpi	r24, 0x58	; 88
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <vfprintf+0x24c>
    2e5c:	ae c0       	rjmp	.+348    	; 0x2fba <vfprintf+0x3a8>
    2e5e:	0b c0       	rjmp	.+22     	; 0x2e76 <vfprintf+0x264>
    2e60:	80 37       	cpi	r24, 0x70	; 112
    2e62:	21 f0       	breq	.+8      	; 0x2e6c <vfprintf+0x25a>
    2e64:	88 37       	cpi	r24, 0x78	; 120
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <vfprintf+0x258>
    2e68:	a8 c0       	rjmp	.+336    	; 0x2fba <vfprintf+0x3a8>
    2e6a:	01 c0       	rjmp	.+2      	; 0x2e6e <vfprintf+0x25c>
    2e6c:	10 61       	ori	r17, 0x10	; 16
    2e6e:	14 ff       	sbrs	r17, 4
    2e70:	09 c0       	rjmp	.+18     	; 0x2e84 <vfprintf+0x272>
    2e72:	14 60       	ori	r17, 0x04	; 4
    2e74:	07 c0       	rjmp	.+14     	; 0x2e84 <vfprintf+0x272>
    2e76:	14 ff       	sbrs	r17, 4
    2e78:	08 c0       	rjmp	.+16     	; 0x2e8a <vfprintf+0x278>
    2e7a:	16 60       	ori	r17, 0x06	; 6
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <vfprintf+0x278>
    2e7e:	28 e0       	ldi	r18, 0x08	; 8
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <vfprintf+0x27c>
    2e84:	20 e1       	ldi	r18, 0x10	; 16
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <vfprintf+0x27c>
    2e8a:	20 e1       	ldi	r18, 0x10	; 16
    2e8c:	32 e0       	ldi	r19, 0x02	; 2
    2e8e:	f5 01       	movw	r30, r10
    2e90:	17 ff       	sbrs	r17, 7
    2e92:	07 c0       	rjmp	.+14     	; 0x2ea2 <vfprintf+0x290>
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	44 e0       	ldi	r20, 0x04	; 4
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	06 c0       	rjmp	.+12     	; 0x2eae <vfprintf+0x29c>
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	42 e0       	ldi	r20, 0x02	; 2
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	a4 0e       	add	r10, r20
    2eb0:	b5 1e       	adc	r11, r21
    2eb2:	a2 01       	movw	r20, r4
    2eb4:	0e 94 3f 18 	call	0x307e	; 0x307e <__ultoa_invert>
    2eb8:	d8 2e       	mov	r13, r24
    2eba:	d4 18       	sub	r13, r4
    2ebc:	01 2f       	mov	r16, r17
    2ebe:	0f 77       	andi	r16, 0x7F	; 127
    2ec0:	06 ff       	sbrs	r16, 6
    2ec2:	09 c0       	rjmp	.+18     	; 0x2ed6 <vfprintf+0x2c4>
    2ec4:	0e 7f       	andi	r16, 0xFE	; 254
    2ec6:	df 14       	cp	r13, r15
    2ec8:	30 f4       	brcc	.+12     	; 0x2ed6 <vfprintf+0x2c4>
    2eca:	04 ff       	sbrs	r16, 4
    2ecc:	06 c0       	rjmp	.+12     	; 0x2eda <vfprintf+0x2c8>
    2ece:	02 fd       	sbrc	r16, 2
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <vfprintf+0x2c8>
    2ed2:	0f 7e       	andi	r16, 0xEF	; 239
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <vfprintf+0x2c8>
    2ed6:	1d 2d       	mov	r17, r13
    2ed8:	01 c0       	rjmp	.+2      	; 0x2edc <vfprintf+0x2ca>
    2eda:	1f 2d       	mov	r17, r15
    2edc:	80 2f       	mov	r24, r16
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	04 ff       	sbrs	r16, 4
    2ee2:	0c c0       	rjmp	.+24     	; 0x2efc <vfprintf+0x2ea>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ed 0d       	add	r30, r13
    2ee8:	f1 1d       	adc	r31, r1
    2eea:	20 81       	ld	r18, Z
    2eec:	20 33       	cpi	r18, 0x30	; 48
    2eee:	11 f4       	brne	.+4      	; 0x2ef4 <vfprintf+0x2e2>
    2ef0:	09 7e       	andi	r16, 0xE9	; 233
    2ef2:	09 c0       	rjmp	.+18     	; 0x2f06 <vfprintf+0x2f4>
    2ef4:	02 ff       	sbrs	r16, 2
    2ef6:	06 c0       	rjmp	.+12     	; 0x2f04 <vfprintf+0x2f2>
    2ef8:	1e 5f       	subi	r17, 0xFE	; 254
    2efa:	05 c0       	rjmp	.+10     	; 0x2f06 <vfprintf+0x2f4>
    2efc:	86 78       	andi	r24, 0x86	; 134
    2efe:	90 70       	andi	r25, 0x00	; 0
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <vfprintf+0x2f4>
    2f04:	1f 5f       	subi	r17, 0xFF	; 255
    2f06:	80 2e       	mov	r8, r16
    2f08:	99 24       	eor	r9, r9
    2f0a:	03 fd       	sbrc	r16, 3
    2f0c:	12 c0       	rjmp	.+36     	; 0x2f32 <vfprintf+0x320>
    2f0e:	00 ff       	sbrs	r16, 0
    2f10:	0d c0       	rjmp	.+26     	; 0x2f2c <vfprintf+0x31a>
    2f12:	fd 2c       	mov	r15, r13
    2f14:	1e 15       	cp	r17, r14
    2f16:	50 f4       	brcc	.+20     	; 0x2f2c <vfprintf+0x31a>
    2f18:	fe 0c       	add	r15, r14
    2f1a:	f1 1a       	sub	r15, r17
    2f1c:	1e 2d       	mov	r17, r14
    2f1e:	06 c0       	rjmp	.+12     	; 0x2f2c <vfprintf+0x31a>
    2f20:	80 e2       	ldi	r24, 0x20	; 32
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	b3 01       	movw	r22, r6
    2f26:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2f2a:	1f 5f       	subi	r17, 0xFF	; 255
    2f2c:	1e 15       	cp	r17, r14
    2f2e:	c0 f3       	brcs	.-16     	; 0x2f20 <vfprintf+0x30e>
    2f30:	04 c0       	rjmp	.+8      	; 0x2f3a <vfprintf+0x328>
    2f32:	1e 15       	cp	r17, r14
    2f34:	10 f4       	brcc	.+4      	; 0x2f3a <vfprintf+0x328>
    2f36:	e1 1a       	sub	r14, r17
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <vfprintf+0x32a>
    2f3a:	ee 24       	eor	r14, r14
    2f3c:	84 fe       	sbrs	r8, 4
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <vfprintf+0x34c>
    2f40:	80 e3       	ldi	r24, 0x30	; 48
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	b3 01       	movw	r22, r6
    2f46:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2f4a:	82 fe       	sbrs	r8, 2
    2f4c:	1f c0       	rjmp	.+62     	; 0x2f8c <vfprintf+0x37a>
    2f4e:	81 fe       	sbrs	r8, 1
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <vfprintf+0x346>
    2f52:	88 e5       	ldi	r24, 0x58	; 88
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	10 c0       	rjmp	.+32     	; 0x2f78 <vfprintf+0x366>
    2f58:	88 e7       	ldi	r24, 0x78	; 120
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0d c0       	rjmp	.+26     	; 0x2f78 <vfprintf+0x366>
    2f5e:	c4 01       	movw	r24, r8
    2f60:	86 78       	andi	r24, 0x86	; 134
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	91 f0       	breq	.+36     	; 0x2f8c <vfprintf+0x37a>
    2f68:	81 fc       	sbrc	r8, 1
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <vfprintf+0x35e>
    2f6c:	80 e2       	ldi	r24, 0x20	; 32
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <vfprintf+0x360>
    2f70:	8b e2       	ldi	r24, 0x2B	; 43
    2f72:	07 fd       	sbrc	r16, 7
    2f74:	8d e2       	ldi	r24, 0x2D	; 45
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	b3 01       	movw	r22, r6
    2f7a:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <vfprintf+0x37a>
    2f80:	80 e3       	ldi	r24, 0x30	; 48
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	b3 01       	movw	r22, r6
    2f86:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2f8a:	fa 94       	dec	r15
    2f8c:	df 14       	cp	r13, r15
    2f8e:	c0 f3       	brcs	.-16     	; 0x2f80 <vfprintf+0x36e>
    2f90:	da 94       	dec	r13
    2f92:	f2 01       	movw	r30, r4
    2f94:	ed 0d       	add	r30, r13
    2f96:	f1 1d       	adc	r31, r1
    2f98:	80 81       	ld	r24, Z
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	b3 01       	movw	r22, r6
    2f9e:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2fa2:	dd 20       	and	r13, r13
    2fa4:	a9 f7       	brne	.-22     	; 0x2f90 <vfprintf+0x37e>
    2fa6:	06 c0       	rjmp	.+12     	; 0x2fb4 <vfprintf+0x3a2>
    2fa8:	80 e2       	ldi	r24, 0x20	; 32
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	b3 01       	movw	r22, r6
    2fae:	0e 94 13 18 	call	0x3026	; 0x3026 <fputc>
    2fb2:	ea 94       	dec	r14
    2fb4:	ee 20       	and	r14, r14
    2fb6:	c1 f7       	brne	.-16     	; 0x2fa8 <vfprintf+0x396>
    2fb8:	40 ce       	rjmp	.-896    	; 0x2c3a <vfprintf+0x28>
    2fba:	f3 01       	movw	r30, r6
    2fbc:	86 81       	ldd	r24, Z+6	; 0x06
    2fbe:	97 81       	ldd	r25, Z+7	; 0x07
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <vfprintf+0x3b4>
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
    2fc4:	9f ef       	ldi	r25, 0xFF	; 255
    2fc6:	2d 96       	adiw	r28, 0x0d	; 13
    2fc8:	e2 e1       	ldi	r30, 0x12	; 18
    2fca:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__>

00002fce <__eerd_byte_m328p>:
    2fce:	f9 99       	sbic	0x1f, 1	; 31
    2fd0:	fe cf       	rjmp	.-4      	; 0x2fce <__eerd_byte_m328p>
    2fd2:	92 bd       	out	0x22, r25	; 34
    2fd4:	81 bd       	out	0x21, r24	; 33
    2fd6:	f8 9a       	sbi	0x1f, 0	; 31
    2fd8:	99 27       	eor	r25, r25
    2fda:	80 b5       	in	r24, 0x20	; 32
    2fdc:	08 95       	ret

00002fde <__eewr_byte_m328p>:
    2fde:	26 2f       	mov	r18, r22

00002fe0 <__eewr_r18_m328p>:
    2fe0:	f9 99       	sbic	0x1f, 1	; 31
    2fe2:	fe cf       	rjmp	.-4      	; 0x2fe0 <__eewr_r18_m328p>
    2fe4:	1f ba       	out	0x1f, r1	; 31
    2fe6:	92 bd       	out	0x22, r25	; 34
    2fe8:	81 bd       	out	0x21, r24	; 33
    2fea:	20 bd       	out	0x20, r18	; 32
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	fa 9a       	sbi	0x1f, 2	; 31
    2ff2:	f9 9a       	sbi	0x1f, 1	; 31
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	01 96       	adiw	r24, 0x01	; 1
    2ff8:	08 95       	ret

00002ffa <strnlen_P>:
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	05 90       	lpm	r0, Z+
    2ffe:	61 50       	subi	r22, 0x01	; 1
    3000:	70 40       	sbci	r23, 0x00	; 0
    3002:	01 10       	cpse	r0, r1
    3004:	d8 f7       	brcc	.-10     	; 0x2ffc <strnlen_P+0x2>
    3006:	80 95       	com	r24
    3008:	90 95       	com	r25
    300a:	8e 0f       	add	r24, r30
    300c:	9f 1f       	adc	r25, r31
    300e:	08 95       	ret

00003010 <strnlen>:
    3010:	fc 01       	movw	r30, r24
    3012:	61 50       	subi	r22, 0x01	; 1
    3014:	70 40       	sbci	r23, 0x00	; 0
    3016:	01 90       	ld	r0, Z+
    3018:	01 10       	cpse	r0, r1
    301a:	d8 f7       	brcc	.-10     	; 0x3012 <strnlen+0x2>
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	8e 0f       	add	r24, r30
    3022:	9f 1f       	adc	r25, r31
    3024:	08 95       	ret

00003026 <fputc>:
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	8c 01       	movw	r16, r24
    3030:	eb 01       	movw	r28, r22
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	81 ff       	sbrs	r24, 1
    3036:	1b c0       	rjmp	.+54     	; 0x306e <fputc+0x48>
    3038:	82 ff       	sbrs	r24, 2
    303a:	0d c0       	rjmp	.+26     	; 0x3056 <fputc+0x30>
    303c:	2e 81       	ldd	r18, Y+6	; 0x06
    303e:	3f 81       	ldd	r19, Y+7	; 0x07
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	28 17       	cp	r18, r24
    3046:	39 07       	cpc	r19, r25
    3048:	64 f4       	brge	.+24     	; 0x3062 <fputc+0x3c>
    304a:	e8 81       	ld	r30, Y
    304c:	f9 81       	ldd	r31, Y+1	; 0x01
    304e:	01 93       	st	Z+, r16
    3050:	f9 83       	std	Y+1, r31	; 0x01
    3052:	e8 83       	st	Y, r30
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <fputc+0x3c>
    3056:	e8 85       	ldd	r30, Y+8	; 0x08
    3058:	f9 85       	ldd	r31, Y+9	; 0x09
    305a:	80 2f       	mov	r24, r16
    305c:	09 95       	icall
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	31 f4       	brne	.+12     	; 0x306e <fputc+0x48>
    3062:	8e 81       	ldd	r24, Y+6	; 0x06
    3064:	9f 81       	ldd	r25, Y+7	; 0x07
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	9f 83       	std	Y+7, r25	; 0x07
    306a:	8e 83       	std	Y+6, r24	; 0x06
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <fputc+0x4c>
    306e:	0f ef       	ldi	r16, 0xFF	; 255
    3070:	1f ef       	ldi	r17, 0xFF	; 255
    3072:	c8 01       	movw	r24, r16
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <__ultoa_invert>:
    307e:	fa 01       	movw	r30, r20
    3080:	aa 27       	eor	r26, r26
    3082:	28 30       	cpi	r18, 0x08	; 8
    3084:	51 f1       	breq	.+84     	; 0x30da <__ultoa_invert+0x5c>
    3086:	20 31       	cpi	r18, 0x10	; 16
    3088:	81 f1       	breq	.+96     	; 0x30ea <__ultoa_invert+0x6c>
    308a:	e8 94       	clt
    308c:	6f 93       	push	r22
    308e:	6e 7f       	andi	r22, 0xFE	; 254
    3090:	6e 5f       	subi	r22, 0xFE	; 254
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	8f 4f       	sbci	r24, 0xFF	; 255
    3096:	9f 4f       	sbci	r25, 0xFF	; 255
    3098:	af 4f       	sbci	r26, 0xFF	; 255
    309a:	b1 e0       	ldi	r27, 0x01	; 1
    309c:	3e d0       	rcall	.+124    	; 0x311a <__ultoa_invert+0x9c>
    309e:	b4 e0       	ldi	r27, 0x04	; 4
    30a0:	3c d0       	rcall	.+120    	; 0x311a <__ultoa_invert+0x9c>
    30a2:	67 0f       	add	r22, r23
    30a4:	78 1f       	adc	r23, r24
    30a6:	89 1f       	adc	r24, r25
    30a8:	9a 1f       	adc	r25, r26
    30aa:	a1 1d       	adc	r26, r1
    30ac:	68 0f       	add	r22, r24
    30ae:	79 1f       	adc	r23, r25
    30b0:	8a 1f       	adc	r24, r26
    30b2:	91 1d       	adc	r25, r1
    30b4:	a1 1d       	adc	r26, r1
    30b6:	6a 0f       	add	r22, r26
    30b8:	71 1d       	adc	r23, r1
    30ba:	81 1d       	adc	r24, r1
    30bc:	91 1d       	adc	r25, r1
    30be:	a1 1d       	adc	r26, r1
    30c0:	20 d0       	rcall	.+64     	; 0x3102 <__ultoa_invert+0x84>
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <__ultoa_invert+0x48>
    30c4:	68 94       	set
    30c6:	3f 91       	pop	r19
    30c8:	2a e0       	ldi	r18, 0x0A	; 10
    30ca:	26 9f       	mul	r18, r22
    30cc:	11 24       	eor	r1, r1
    30ce:	30 19       	sub	r19, r0
    30d0:	30 5d       	subi	r19, 0xD0	; 208
    30d2:	31 93       	st	Z+, r19
    30d4:	de f6       	brtc	.-74     	; 0x308c <__ultoa_invert+0xe>
    30d6:	cf 01       	movw	r24, r30
    30d8:	08 95       	ret
    30da:	46 2f       	mov	r20, r22
    30dc:	47 70       	andi	r20, 0x07	; 7
    30de:	40 5d       	subi	r20, 0xD0	; 208
    30e0:	41 93       	st	Z+, r20
    30e2:	b3 e0       	ldi	r27, 0x03	; 3
    30e4:	0f d0       	rcall	.+30     	; 0x3104 <__ultoa_invert+0x86>
    30e6:	c9 f7       	brne	.-14     	; 0x30da <__ultoa_invert+0x5c>
    30e8:	f6 cf       	rjmp	.-20     	; 0x30d6 <__ultoa_invert+0x58>
    30ea:	46 2f       	mov	r20, r22
    30ec:	4f 70       	andi	r20, 0x0F	; 15
    30ee:	40 5d       	subi	r20, 0xD0	; 208
    30f0:	4a 33       	cpi	r20, 0x3A	; 58
    30f2:	18 f0       	brcs	.+6      	; 0x30fa <__ultoa_invert+0x7c>
    30f4:	49 5d       	subi	r20, 0xD9	; 217
    30f6:	31 fd       	sbrc	r19, 1
    30f8:	40 52       	subi	r20, 0x20	; 32
    30fa:	41 93       	st	Z+, r20
    30fc:	02 d0       	rcall	.+4      	; 0x3102 <__ultoa_invert+0x84>
    30fe:	a9 f7       	brne	.-22     	; 0x30ea <__ultoa_invert+0x6c>
    3100:	ea cf       	rjmp	.-44     	; 0x30d6 <__ultoa_invert+0x58>
    3102:	b4 e0       	ldi	r27, 0x04	; 4
    3104:	a6 95       	lsr	r26
    3106:	97 95       	ror	r25
    3108:	87 95       	ror	r24
    310a:	77 95       	ror	r23
    310c:	67 95       	ror	r22
    310e:	ba 95       	dec	r27
    3110:	c9 f7       	brne	.-14     	; 0x3104 <__ultoa_invert+0x86>
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	61 05       	cpc	r22, r1
    3116:	71 05       	cpc	r23, r1
    3118:	08 95       	ret
    311a:	9b 01       	movw	r18, r22
    311c:	ac 01       	movw	r20, r24
    311e:	0a 2e       	mov	r0, r26
    3120:	06 94       	lsr	r0
    3122:	57 95       	ror	r21
    3124:	47 95       	ror	r20
    3126:	37 95       	ror	r19
    3128:	27 95       	ror	r18
    312a:	ba 95       	dec	r27
    312c:	c9 f7       	brne	.-14     	; 0x3120 <__ultoa_invert+0xa2>
    312e:	62 0f       	add	r22, r18
    3130:	73 1f       	adc	r23, r19
    3132:	84 1f       	adc	r24, r20
    3134:	95 1f       	adc	r25, r21
    3136:	a0 1d       	adc	r26, r0
    3138:	08 95       	ret

0000313a <__prologue_saves__>:
    313a:	2f 92       	push	r2
    313c:	3f 92       	push	r3
    313e:	4f 92       	push	r4
    3140:	5f 92       	push	r5
    3142:	6f 92       	push	r6
    3144:	7f 92       	push	r7
    3146:	8f 92       	push	r8
    3148:	9f 92       	push	r9
    314a:	af 92       	push	r10
    314c:	bf 92       	push	r11
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	ca 1b       	sub	r28, r26
    3164:	db 0b       	sbc	r29, r27
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	09 94       	ijmp

00003172 <__epilogue_restores__>:
    3172:	2a 88       	ldd	r2, Y+18	; 0x12
    3174:	39 88       	ldd	r3, Y+17	; 0x11
    3176:	48 88       	ldd	r4, Y+16	; 0x10
    3178:	5f 84       	ldd	r5, Y+15	; 0x0f
    317a:	6e 84       	ldd	r6, Y+14	; 0x0e
    317c:	7d 84       	ldd	r7, Y+13	; 0x0d
    317e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3180:	9b 84       	ldd	r9, Y+11	; 0x0b
    3182:	aa 84       	ldd	r10, Y+10	; 0x0a
    3184:	b9 84       	ldd	r11, Y+9	; 0x09
    3186:	c8 84       	ldd	r12, Y+8	; 0x08
    3188:	df 80       	ldd	r13, Y+7	; 0x07
    318a:	ee 80       	ldd	r14, Y+6	; 0x06
    318c:	fd 80       	ldd	r15, Y+5	; 0x05
    318e:	0c 81       	ldd	r16, Y+4	; 0x04
    3190:	1b 81       	ldd	r17, Y+3	; 0x03
    3192:	aa 81       	ldd	r26, Y+2	; 0x02
    3194:	b9 81       	ldd	r27, Y+1	; 0x01
    3196:	ce 0f       	add	r28, r30
    3198:	d1 1d       	adc	r29, r1
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	ed 01       	movw	r28, r26
    31a6:	08 95       	ret

000031a8 <_exit>:
    31a8:	f8 94       	cli

000031aa <__stop_program>:
    31aa:	ff cf       	rjmp	.-2      	; 0x31aa <__stop_program>
