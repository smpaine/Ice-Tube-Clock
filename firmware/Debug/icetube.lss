
icetube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00003164  000031f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800110  00800110  00003208  2**0
                  ALLOC
  3 .stab         00000ee8  00000000  00000000  00003208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000348  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00004438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034ed  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00007b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b3  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a44  00000000  00000000  00009b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084e  00000000  00000000  0000a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b00  00000000  00000000  0000ae16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000d916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 01 	jmp	0x310	; 0x310 <__ctors_end>
       4:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_1>
       8:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
       c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_3>
      10:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_5>
      18:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      1c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      20:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      24:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_9>
      28:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      2c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      30:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      3c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      40:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_16>
      44:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      48:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      4c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      50:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      54:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_21>
      58:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      5c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      60:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>
      64:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__bad_interrupt>

00000068 <temp_fmt>:
      68:	20 25 33 64 2e 25 64 25 63 00                        %3d.%d%c.

00000072 <alarm_fmt2>:
      72:	25 30 32 64 3a 25 30 32 64 00                       %02d:%02d.

0000007c <alarm_fmt1>:
      7c:	25 32 64 3a 25 30 32 64 20 25 63 6d 00              %2d:%02d %cm.

00000089 <date_fmt2>:
      89:	25 53 20 25 2d 64 00                                %S %-d.

00000090 <monname>:
      90:	ea 00 e4 00 de 00 d8 00 d2 00 cc 00 c6 00 c0 00     ................
      a0:	ba 00 b4 00 ae 00 a8 00                             ........

000000a8 <dec>:
      a8:	64 65 63 65 6d 00                                   decem.

000000ae <nov>:
      ae:	6e 6f 76 65 6d 00                                   novem.

000000b4 <oct>:
      b4:	6f 63 74 6f 62 00                                   octob.

000000ba <sep>:
      ba:	20 73 65 70 74 00                                    sept.

000000c0 <aug>:
      c0:	61 75 67 73 74 00                                   augst.

000000c6 <jul>:
      c6:	20 6a 75 6c 79 00                                    july.

000000cc <jun>:
      cc:	20 6a 75 6e 65 00                                    june.

000000d2 <may>:
      d2:	20 20 6d 61 79 00                                     may.

000000d8 <apr>:
      d8:	61 70 72 69 6c 00                                   april.

000000de <mar>:
      de:	6d 61 72 63 68 00                                   march.

000000e4 <feb>:
      e4:	20 20 66 65 62 00                                     feb.

000000ea <jan>:
      ea:	20 20 6a 61 6e 00                                     jan.

000000f0 <date_fmt1>:
      f0:	25 30 32 64 2f 25 30 32 64 2f 25 30 32 64 00        %02d/%02d/%02d.

000000ff <dayname>:
      ff:	40 01 38 01 30 01 27 01 1e 01 16 01 0d 01           @.8.0.'.......

0000010d <sat>:
     10d:	73 61 74 75 72 64 61 79 00                          saturday.

00000116 <fri>:
     116:	20 66 72 69 64 61 79 00                              friday.

0000011e <thu>:
     11e:	74 68 75 72 73 64 61 79 00                          thursday.

00000127 <wed>:
     127:	77 65 64 6e 73 64 61 79 00                          wednsday.

00000130 <tue>:
     130:	74 75 65 73 64 61 79 00                             tuesday.

00000138 <mon>:
     138:	20 6d 6f 6e 64 61 79 00                              monday.

00000140 <sun>:
     140:	20 73 75 6e 64 61 79 00                              sunday.

00000148 <mon_tbl_p>:
     148:	4a 01                                               J.

0000014a <mon_tbl>:
     14a:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000156 <dow_tbl>:
     156:	00 03 02 05 00 03 05 01 04 06 02 04                 ............

00000162 <trim_fmt>:
     162:	74 72 69 6d 20 25 2d 33 64 00                       trim %-3d.

0000016c <dst_off>:
     16c:	20 64 73 74 20 6f 2e 66 2e 66 2e 00                  dst o.f.f..

00000178 <dst_on>:
     178:	20 64 73 74 20 6f 2e 6e 2e 20 00                     dst o.n. .

00000183 <region2>:
     183:	65 75 72 2d 32 34 68 72 00                          eur-24hr.

0000018c <region1>:
     18c:	75 73 61 2d 31 32 68 72 00                          usa-12hr.

00000195 <brit_fmt2>:
     195:	62 72 69 74 20 61 75 74 00                          brit aut.

0000019e <brit_fmt1>:
     19e:	62 72 69 74 20 25 2d 32 64 20 00                    brit %-2d .

000001a9 <mux_divider_p>:
     1a9:	ab 01                                               ..

000001ab <mux_divider>:
     1ab:	5a 1e 1e 28 1e 1e 3c 1e 37                          Z..(..<.7

000001b4 <segmenttable_p>:
     1b4:	b6 01                                               ..

000001b6 <segmenttable>:
     1b6:	0b 10 12 0f 0d 0e 11 13                             ........

000001be <digittable_p>:
     1be:	c0 01                                               ..

000001c0 <digittable>:
     1c0:	03 07 08 09 06 0a 05 0c 04                          .........

000001c9 <verstr>:
     1c9:	76 65 72 20 32 2e 31 34 00                          ver 2.14.

000001d2 <numbertable_p>:
     1d2:	d4 01                                               ..

000001d4 <numbertable>:
     1d4:	fc 60 da f2 66 b6 be e0 fe e6                       .`..f.....

000001de <alphatable_p>:
     1de:	e0 01                                               ..

000001e0 <alphatable>:
     1e0:	fa 3e 1a 7a de 8e f6 2e 60 78 ae 1c aa 2a 3a ce     .>.z....`x...*:.
     1f0:	f3 0a b6 1e 38 38 b8 6e 76 da                       ....88.nv.

000001fa <__c.2078>:
     1fa:	73 6e 6f 6f 7a 65 00                                snooze.

00000201 <__c.2080>:
     201:	73 6e 6f 6f 7a 69 6e 67 00                          snoozing.

0000020a <__c.2140>:
     20a:	74 75 72 6e 69 6e 67 20 6f 6e 20 62 75 74 74 6f     turning on butto
     21a:	6e 73 00                                            ns.

0000021d <__c.2142>:
     21d:	74 75 72 6e 69 6e 67 20 6f 6e 20 61 6c 61 72 6d     turning on alarm
     22d:	73 77 00                                            sw.

00000230 <__c.2144>:
     230:	76 66 64 20 69 6e 69 74 00                          vfd init.

00000239 <__c.2146>:
     239:	62 6f 6f 73 74 20 69 6e 69 74 00                    boost init.

00000244 <__c.2148>:
     244:	73 70 65 61 6b 65 72 20 69 6e 69 74 00              speaker init.

00000251 <__c.2150>:
     251:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

0000025c <__c.2152>:
     25c:	61 6c 61 72 6d 20 69 6e 69 74 00                    alarm init.

00000267 <__c.2154>:
     267:	69 6e 69 74 20 64 6f 6e 65 00                       init done.

00000271 <__c.2156>:
     271:	69 63 65 74 75 62 65 00                             icetube.

00000279 <__c.2178>:
     279:	73 65 74 20 61 6c 61 72 6d 00                       set alarm.

00000283 <__c.2196>:
     283:	73 65 74 20 74 69 6d 65 00                          set time.

0000028c <__c.2204>:
     28c:	43 68 72 6f 6e 6f 44 6f 74 20 73 65 74 21 00        ChronoDot set!.

0000029b <__c.2216>:
     29b:	73 65 74 20 64 61 74 65 00                          set date.

000002a4 <__c.2219>:
     2a4:	53 65 74 20 64 61 79 00                             Set day.

000002ac <__c.2235>:
     2ac:	73 65 74 20 62 72 69 74 00                          set brit.

000002b5 <__c.2246>:
     2b5:	73 65 74 20 72 67 6e 20 00                          set rgn .

000002be <__c.2257>:
     2be:	73 65 74 20 64 73 74 00                             set dst.

000002c6 <__c.2269>:
     2c6:	73 65 74 20 74 72 69 6d 00                          set trim.

000002cf <__c.2281>:
     2cf:	43 68 72 6f 6e 6f 44 6f 74 20 63 68 65 63 6b 20     ChronoDot check 
     2df:	66 61 69 6c 65 64 21 00                             failed!.

000002e7 <__c.2296>:
     2e7:	61 6c 61 72 6d 20 6f 66 66 00                       alarm off.

000002f1 <__c.2294>:
     2f1:	61 6c 61 72 6d 20 6f 6e 00                          alarm on.

000002fa <__c.2351>:
     2fa:	63 00                                               c.

000002fc <__c.2456>:
     2fc:	5d 00                                               ].

000002fe <__c.2467>:
     2fe:	7d 00                                               }.

00000300 <twi_fmt>:
     300:	74 77 69 20 25 30 32 78 3a 25 30 32 78 0d 0a 00     twi %02x:%02x...

00000310 <__ctors_end>:
     310:	11 24       	eor	r1, r1
     312:	1f be       	out	0x3f, r1	; 63
     314:	cf ef       	ldi	r28, 0xFF	; 255
     316:	d8 e0       	ldi	r29, 0x08	; 8
     318:	de bf       	out	0x3e, r29	; 62
     31a:	cd bf       	out	0x3d, r28	; 61

0000031c <__do_copy_data>:
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b1 e0       	ldi	r27, 0x01	; 1
     322:	e4 e6       	ldi	r30, 0x64	; 100
     324:	f1 e3       	ldi	r31, 0x31	; 49
     326:	02 c0       	rjmp	.+4      	; 0x32c <__do_copy_data+0x10>
     328:	05 90       	lpm	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	a0 31       	cpi	r26, 0x10	; 16
     32e:	b1 07       	cpc	r27, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <__do_copy_data+0xc>

00000332 <__do_clear_bss>:
     332:	11 e0       	ldi	r17, 0x01	; 1
     334:	a0 e1       	ldi	r26, 0x10	; 16
     336:	b1 e0       	ldi	r27, 0x01	; 1
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a8 34       	cpi	r26, 0x48	; 72
     33e:	b1 07       	cpc	r27, r17
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 be 13 	call	0x277c	; 0x277c <main>
     346:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <_exit>

0000034a <__bad_interrupt>:
     34a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034e <delayms>:
// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms)
{
	while (ms > 1000) {
     34e:	0b c0       	rjmp	.+22     	; 0x366 <delayms+0x18>
		// Much longer than a second would trigger watchdog,
		//  so break it into smaller pieces.
		milliseconds = 0;
		while (milliseconds < 1000)
     350:	20 91 10 01 	lds	r18, 0x0110
     354:	30 91 11 01 	lds	r19, 0x0111
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	28 3e       	cpi	r18, 0xE8	; 232
     35c:	34 07       	cpc	r19, r20
     35e:	c0 f3       	brcs	.-16     	; 0x350 <delayms+0x2>
			;
		ms -= 1000;
     360:	88 5e       	subi	r24, 0xE8	; 232
     362:	93 40       	sbci	r25, 0x03	; 3
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     364:	a8 95       	wdr
void delayms(uint16_t ms)
{
	while (ms > 1000) {
		// Much longer than a second would trigger watchdog,
		//  so break it into smaller pieces.
		milliseconds = 0;
     366:	10 92 11 01 	sts	0x0111, r1
     36a:	10 92 10 01 	sts	0x0110, r1
// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms)
{
	while (ms > 1000) {
     36e:	23 e0       	ldi	r18, 0x03	; 3
     370:	89 3e       	cpi	r24, 0xE9	; 233
     372:	92 07       	cpc	r25, r18
     374:	68 f7       	brcc	.-38     	; 0x350 <delayms+0x2>
			;
		ms -= 1000;
		kickthedog();
	}
	milliseconds = 0;
	while (milliseconds < ms)
     376:	20 91 10 01 	lds	r18, 0x0110
     37a:	30 91 11 01 	lds	r19, 0x0111
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	c8 f3       	brcs	.-14     	; 0x376 <delayms+0x28>
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     384:	a8 95       	wdr
	}
	milliseconds = 0;
	while (milliseconds < ms)
		;
	kickthedog();
}
     386:	08 95       	ret

00000388 <__vector_21>:
// Lower ADC values mean more light, higher ADC values mean less.

volatile long adc_sum;			// Sum of ADC values to produce average
volatile uint16_t adc_count;		// Count of # of ADC readings in adc_sum

ISR(ADC_vect, ISR_NOBLOCK) {
     388:	78 94       	sei
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	2f 93       	push	r18
     396:	3f 93       	push	r19
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25

	uint8_t low, high;
	unsigned int val;

	// Read 2-byte value. Must read ADCL first because that locks the value.
	low = ADCL;
     39c:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     3a0:	90 91 79 00 	lds	r25, 0x0079
	val = (high << 8) | low;
     3a4:	39 2f       	mov	r19, r25
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	82 2b       	or	r24, r18
     3ac:	93 2b       	or	r25, r19
	// Set brightness to a value between min & max based on light reading.
	if (val >= PHOTOCELL_DARK) {
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	8b 33       	cpi	r24, 0x3B	; 59
     3b2:	92 07       	cpc	r25, r18
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <__vector_21+0x38>
		val = PHOTOCELL_MIN;
	} else if (val <= PHOTOCELL_LIGHT) {
     3b6:	00 97       	sbiw	r24, 0x00	; 0
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <__vector_21+0x38>
		val = PHOTOCELL_MAX;
     3ba:	8a e5       	ldi	r24, 0x5A	; 90
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__vector_21+0x3c>
		// Max = 90, Min = 30
		// example: photocell value is 5
		// (Dark (315) - (5) / (dark (315) - light (0)) ) * (max (90) - min (30) ) =
		// 59
		// 59 + Min (30) = 89.04
		val = PHOTOCELL_MIN + ( (PHOTOCELL_DARK - val) / (PHOTOCELL_DARK - PHOTOCELL_LIGHT) ) * (PHOTOCELL_MAX - PHOTOCELL_MIN);
     3c0:	8e e1       	ldi	r24, 0x1E	; 30
     3c2:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (flag(f_autobright)) {
     3c4:	20 91 46 01 	lds	r18, 0x0146
     3c8:	25 ff       	sbrs	r18, 5
     3ca:	16 c0       	rjmp	.+44     	; 0x3f8 <__vector_21+0x70>
		if (val > ocr0a) ocr0a++;					// Smoothly slew brightness
     3cc:	20 91 3d 01 	lds	r18, 0x013D
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	28 17       	cp	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	28 f4       	brcc	.+10     	; 0x3e2 <__vector_21+0x5a>
     3d8:	20 91 3d 01 	lds	r18, 0x013D
     3dc:	2f 5f       	subi	r18, 0xFF	; 255
     3de:	20 93 3d 01 	sts	0x013D, r18
		if (val < ocr0a) ocr0a--;
     3e2:	20 91 3d 01 	lds	r18, 0x013D
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	82 17       	cp	r24, r18
     3ea:	93 07       	cpc	r25, r19
     3ec:	28 f4       	brcc	.+10     	; 0x3f8 <__vector_21+0x70>
     3ee:	80 91 3d 01 	lds	r24, 0x013D
     3f2:	81 50       	subi	r24, 0x01	; 1
     3f4:	80 93 3d 01 	sts	0x013D, r24
	}
}
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_5>:
// We use the pin change interrupts to detect when buttons are pressed


// This interrupt detects switches 0 and 2
ISR(PCINT2_vect, ISR_NOBLOCK)
{
     40a:	78 94       	sei
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
	if (PIND & _BV(BUTTON1))	// Button 0 is up:
     41a:	4d 9b       	sbis	0x09, 5	; 9
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__vector_5+0x1e>
		btimer[0] = 0;			//  Stop timer
     41e:	10 92 20 01 	sts	0x0120, r1
     422:	10 92 1f 01 	sts	0x011F, r1
     426:	0c c0       	rjmp	.+24     	; 0x440 <__vector_5+0x36>
	else if (!btimer[0])		// Button 0 is down and timer isn't already running:
     428:	80 91 1f 01 	lds	r24, 0x011F
     42c:	90 91 20 01 	lds	r25, 0x0120
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	31 f4       	brne	.+12     	; 0x440 <__vector_5+0x36>
		btimer[0] = 1;			//  Start timer
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 20 01 	sts	0x0120, r25
     43c:	80 93 1f 01 	sts	0x011F, r24
	
	if (PIND & _BV(BUTTON3))	// Same for button 2
     440:	4c 9b       	sbis	0x09, 4	; 9
     442:	05 c0       	rjmp	.+10     	; 0x44e <__vector_5+0x44>
		btimer[2] = 0;
     444:	10 92 24 01 	sts	0x0124, r1
     448:	10 92 23 01 	sts	0x0123, r1
     44c:	0c c0       	rjmp	.+24     	; 0x466 <__vector_5+0x5c>
	else if (!btimer[2])
     44e:	80 91 23 01 	lds	r24, 0x0123
     452:	90 91 24 01 	lds	r25, 0x0124
     456:	00 97       	sbiw	r24, 0x00	; 0
     458:	31 f4       	brne	.+12     	; 0x466 <__vector_5+0x5c>
		btimer[2] = 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 24 01 	sts	0x0124, r25
     462:	80 93 23 01 	sts	0x0123, r24
}
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <__vector_3>:

// Just button #1
ISR(PCINT0_vect, ISR_NOBLOCK) 
{
     474:	78 94       	sei
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
     482:	9f 93       	push	r25
	EIFR &= ~_BV(INTF0);
     484:	e0 98       	cbi	0x1c, 0	; 28

	if (PINB & _BV(BUTTON2))
     486:	18 9b       	sbis	0x03, 0	; 3
     488:	05 c0       	rjmp	.+10     	; 0x494 <__vector_3+0x20>
		btimer[1] = 0;
     48a:	10 92 22 01 	sts	0x0122, r1
     48e:	10 92 21 01 	sts	0x0121, r1
     492:	0c c0       	rjmp	.+24     	; 0x4ac <__vector_3+0x38>
	else if (!btimer[2])
     494:	80 91 23 01 	lds	r24, 0x0123
     498:	90 91 24 01 	lds	r25, 0x0124
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	31 f4       	brne	.+12     	; 0x4ac <__vector_3+0x38>
		btimer[1] = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 22 01 	sts	0x0122, r25
     4a8:	80 93 21 01 	sts	0x0121, r24
}
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <__vector_1>:

// Button 3 interrupt (alarm switch)
// This is turned into two buttons, 3 & 4: 3 for closed (alarm on)
//  and 4 for open (alarm off)
ISR(INT0_vect, ISR_NOBLOCK) 
{
     4ba:	78 94       	sei
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	8f 93       	push	r24
     4c8:	9f 93       	push	r25
	EIFR &= ~_BV(INTF0);
     4ca:	e0 98       	cbi	0x1c, 0	; 28

	if (PIND & _BV(ALARM)) {
     4cc:	4a 9b       	sbis	0x09, 2	; 9
     4ce:	11 c0       	rjmp	.+34     	; 0x4f2 <__vector_1+0x38>
		btimer[4] = 0;
     4d0:	10 92 28 01 	sts	0x0128, r1
     4d4:	10 92 27 01 	sts	0x0127, r1
		if (!btimer[3])
     4d8:	80 91 25 01 	lds	r24, 0x0125
     4dc:	90 91 26 01 	lds	r25, 0x0126
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	b9 f4       	brne	.+46     	; 0x512 <__vector_1+0x58>
			btimer[3] = 1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 26 01 	sts	0x0126, r25
     4ec:	80 93 25 01 	sts	0x0125, r24
     4f0:	10 c0       	rjmp	.+32     	; 0x512 <__vector_1+0x58>
	} else {
		btimer[3] = 0;
     4f2:	10 92 26 01 	sts	0x0126, r1
     4f6:	10 92 25 01 	sts	0x0125, r1
		if (!btimer[4])
     4fa:	80 91 27 01 	lds	r24, 0x0127
     4fe:	90 91 28 01 	lds	r25, 0x0128
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	31 f4       	brne	.+12     	; 0x512 <__vector_1+0x58>
			btimer[4] = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 28 01 	sts	0x0128, r25
     50e:	80 93 27 01 	sts	0x0127, r24
	}	
}
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_13>:
	}	
}

// Timer 1 overflow -- speaker driver
ISR (TIMER1_OVF_vect, ISR_NOBLOCK)
{
     520:	78 94       	sei
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
	if (--beepcounter) return;			// Count off the cycles
     530:	80 91 33 01 	lds	r24, 0x0133
     534:	90 91 34 01 	lds	r25, 0x0134
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	90 93 34 01 	sts	0x0134, r25
     53e:	80 93 33 01 	sts	0x0133, r24
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	41 f4       	brne	.+16     	; 0x556 <__vector_13+0x36>
	TCCR1B &= ~_BV(CS11);				// Turn off counter/timer
     546:	80 91 81 00 	lds	r24, 0x0081
     54a:	8d 7f       	andi	r24, 0xFD	; 253
     54c:	80 93 81 00 	sts	0x0081, r24
	PORTB &= ~_BV(SPK1) & ~_BV(SPK2);	// turn speaker off
     550:	85 b1       	in	r24, 0x05	; 5
     552:	89 7f       	andi	r24, 0xF9	; 249
     554:	85 b9       	out	0x05, r24	; 5
}
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <b2bcd>:
	}
	brepeat &= ~_BV(2);
}

uint8_t b2bcd (uint8_t b) {
	return ((b / 10) << 4) | (b % 10);
     564:	6a e0       	ldi	r22, 0x0A	; 10
     566:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     56a:	82 95       	swap	r24
     56c:	80 7f       	andi	r24, 0xF0	; 240
}
     56e:	89 2b       	or	r24, r25
     570:	08 95       	ret

00000572 <bcd2b>:

uint8_t bcd2b (uint8_t bcd) {
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
     572:	98 2f       	mov	r25, r24
     574:	92 95       	swap	r25
     576:	9f 70       	andi	r25, 0x0F	; 15
     578:	99 0f       	add	r25, r25
     57a:	29 2f       	mov	r18, r25
     57c:	22 0f       	add	r18, r18
     57e:	22 0f       	add	r18, r18
     580:	29 0f       	add	r18, r25
     582:	8f 70       	andi	r24, 0x0F	; 15
}
     584:	82 0f       	add	r24, r18
     586:	08 95       	ret

00000588 <limit_brightness>:
	}
	brepeat &= ~_BV(2);
}

uint8_t limit_brightness (uint8_t brightness) 
{
     588:	28 2f       	mov	r18, r24
	const uint8_t step = 5;
	
	// Set PWM value, don't set it so high that
	// we could damage the MAX chip or display
	// Or so low its not visible
	if (brightness < 30 || 90 < brightness)
     58a:	8e 51       	subi	r24, 0x1E	; 30
     58c:	8d 33       	cpi	r24, 0x3D	; 61
     58e:	08 f0       	brcs	.+2      	; 0x592 <limit_brightness+0xa>
		brightness = 30;
     590:	2e e1       	ldi	r18, 0x1E	; 30
	if ((i = brightness % step) != 0)
     592:	82 2f       	mov	r24, r18
     594:	65 e0       	ldi	r22, 0x05	; 5
     596:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     59a:	99 23       	and	r25, r25
     59c:	11 f0       	breq	.+4      	; 0x5a2 <limit_brightness+0x1a>
		brightness += step - i;	/* Round up to nearest multiple of 5 */
     59e:	2b 5f       	subi	r18, 0xFB	; 251
     5a0:	29 1b       	sub	r18, r25
	return brightness;
}
     5a2:	82 2f       	mov	r24, r18
     5a4:	08 95       	ret

000005a6 <init_rtc>:
}

// Turn on the RTC by selecting the external 32khz crystal
void init_rtc (void) {
	// 32.768 / 128 = 256 which is exactly an 8-bit timer overflow
	ASSR |= _BV(EXCLK);		// External clock (comment out if using xtal)
     5a6:	e6 eb       	ldi	r30, 0xB6	; 182
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	80 64       	ori	r24, 0x40	; 64
     5ae:	80 83       	st	Z, r24
	ASSR |= _BV(AS2); // use crystal
     5b0:	80 81       	ld	r24, Z
     5b2:	80 62       	ori	r24, 0x20	; 32
     5b4:	80 83       	st	Z, r24
	TCCR2A = 0;
     5b6:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = _BV(CS22) | _BV(CS20); // div by 128
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	80 93 b1 00 	sts	0x00B1, r24
	// We will overflow once a second, and call an interrupt

	CLKPR = _BV(CLKPCE);	// CPU clock division factor to 1
     5c0:	e1 e6       	ldi	r30, 0x61	; 97
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 e8       	ldi	r24, 0x80	; 128
     5c6:	80 83       	st	Z, r24
	CLKPR = 0;
     5c8:	10 82       	st	Z, r1

	// enable interrupt on overflow
	TIMSK2 = _BV(TOIE2);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 70 00 	sts	0x0070, r24
}
     5d0:	08 95       	ret

000005d2 <init_alarm>:

// Set up the stored alarm time and date
void init_alarm (void) {
	alarm_m = eeprom_read_byte((uint8_t *)EE_ALARM_MIN) % 60;
     5d2:	88 e0       	ldi	r24, 0x08	; 8
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
     5da:	6c e3       	ldi	r22, 0x3C	; 60
     5dc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     5e0:	90 93 1a 01 	sts	0x011A, r25
	alarm_h = eeprom_read_byte((uint8_t *)EE_ALARM_HOUR) % 24;
     5e4:	87 e0       	ldi	r24, 0x07	; 7
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
     5ec:	68 e1       	ldi	r22, 0x18	; 24
     5ee:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     5f2:	90 93 38 01 	sts	0x0138, r25
}
     5f6:	08 95       	ret

000005f8 <init_buttons>:
		}
	}
}

void init_buttons(void) {
		DDRB =	_BV(VFDCLK) | _BV(VFDDATA) | _BV(SPK1) | _BV(SPK2);
     5f8:	8e e2       	ldi	r24, 0x2E	; 46
     5fa:	84 b9       	out	0x04, r24	; 4
		DDRD = _BV(BOOST) | _BV(VFDSWITCH);
     5fc:	88 e4       	ldi	r24, 0x48	; 72
     5fe:	8a b9       	out	0x0a, r24	; 10
		DDRC = _BV(VFDLOAD) | _BV(VFDBLANK) | _BV(4);
     600:	89 e1       	ldi	r24, 0x19	; 25
     602:	87 b9       	out	0x07, r24	; 7
		PORTD = _BV(BUTTON1) | _BV(BUTTON3) | _BV(ALARM);
     604:	84 e3       	ldi	r24, 0x34	; 52
     606:	8b b9       	out	0x0b, r24	; 11
		PORTB = _BV(BUTTON2);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	85 b9       	out	0x05, r24	; 5

		PCICR = _BV(PCIE0) | _BV(PCIE2);
     60c:	95 e0       	ldi	r25, 0x05	; 5
     60e:	90 93 68 00 	sts	0x0068, r25
		PCMSK0 = _BV(PCINT0);
     612:	80 93 6b 00 	sts	0x006B, r24
		PCMSK2 = _BV(PCINT21) | _BV(PCINT20);		
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	80 93 6d 00 	sts	0x006D, r24
}
     61c:	08 95       	ret

0000061e <init_speaker>:

// Set up the speaker to prepare for beeping!
void init_speaker(void) {

	// We use the built-in fast PWM, 8 bit timer
	PORTB |= _BV(SPK1) | _BV(SPK2); 
     61e:	85 b1       	in	r24, 0x05	; 5
     620:	86 60       	ori	r24, 0x06	; 6
     622:	85 b9       	out	0x05, r24	; 5

	// Turn on PWM outputs for both pins
	TCCR1A = _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
     624:	82 e3       	ldi	r24, 0x32	; 50
     626:	80 93 80 00 	sts	0x0080, r24

	TCCR1B = _BV(WGM13) | _BV(WGM12);
     62a:	88 e1       	ldi	r24, 0x18	; 24
     62c:	80 93 81 00 	sts	0x0081, r24

	// start at 4khz:	250 * 8 multiplier * 4000 = 8mhz
	ICR1 = 250;
     630:	e6 e8       	ldi	r30, 0x86	; 134
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	8a ef       	ldi	r24, 0xFA	; 250
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	80 83       	st	Z, r24
	OCR1B = OCR1A = ICR1 / 2;
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	96 95       	lsr	r25
     642:	87 95       	ror	r24
     644:	90 93 89 00 	sts	0x0089, r25
     648:	80 93 88 00 	sts	0x0088, r24
     64c:	90 93 8b 00 	sts	0x008B, r25
     650:	80 93 8a 00 	sts	0x008A, r24
}
     654:	08 95       	ret

00000656 <beep>:
{
	beep (500, 5, 1);
}

// We can play short beeps!
void beep(uint16_t freq, uint16_t cycles, uint8_t loud) {
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	8b 01       	movw	r16, r22
     65e:	c4 2f       	mov	r28, r20
	// set the PWM output to match the desired frequency
	ICR1 = (F_CPU/8)/freq;
     660:	9c 01       	movw	r18, r24
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	60 e4       	ldi	r22, 0x40	; 64
     668:	72 e4       	ldi	r23, 0x42	; 66
     66a:	8f e0       	ldi	r24, 0x0F	; 15
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divmodsi4>
     672:	30 93 87 00 	sts	0x0087, r19
     676:	20 93 86 00 	sts	0x0086, r18
	// we want 50% duty cycle square wave
	OCR1A = OCR1B = ICR1/2;
     67a:	80 91 86 00 	lds	r24, 0x0086
     67e:	90 91 87 00 	lds	r25, 0x0087
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	90 93 8b 00 	sts	0x008B, r25
     68a:	80 93 8a 00 	sts	0x008A, r24
     68e:	90 93 89 00 	sts	0x0089, r25
     692:	80 93 88 00 	sts	0x0088, r24
	beepcounter = cycles;
     696:	10 93 34 01 	sts	0x0134, r17
     69a:	00 93 33 01 	sts	0x0133, r16
	TCNT1 = 0;
     69e:	10 92 85 00 	sts	0x0085, r1
     6a2:	10 92 84 00 	sts	0x0084, r1
	if (loud)
		TCCR1A |= _BV(COM1A1);	// Drives both OCR1x outputs out of phase
     6a6:	80 91 80 00 	lds	r24, 0x0080
	ICR1 = (F_CPU/8)/freq;
	// we want 50% duty cycle square wave
	OCR1A = OCR1B = ICR1/2;
	beepcounter = cycles;
	TCNT1 = 0;
	if (loud)
     6aa:	cc 23       	and	r28, r28
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <beep+0x5c>
		TCCR1A |= _BV(COM1A1);	// Drives both OCR1x outputs out of phase
     6ae:	80 68       	ori	r24, 0x80	; 128
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <beep+0x5e>
	else
		TCCR1A &= ~_BV(COM1A1);
     6b2:	8f 77       	andi	r24, 0x7F	; 127
     6b4:	80 93 80 00 	sts	0x0080, r24
	TIMSK1 |= _BV(TOIE1);	// Enable interrupts
     6b8:	80 91 6f 00 	lds	r24, 0x006F
     6bc:	81 60       	ori	r24, 0x01	; 1
     6be:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B |= _BV(CS11); // turn it on!
     6c2:	80 91 81 00 	lds	r24, 0x0081
     6c6:	82 60       	ori	r24, 0x02	; 2
     6c8:	80 93 81 00 	sts	0x0081, r24
}
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <tick>:
}

// This makes the speaker tick
void tick(void)
{
	beep (500, 5, 1);
     6d4:	84 ef       	ldi	r24, 0xF4	; 244
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	65 e0       	ldi	r22, 0x05	; 5
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	0e 94 2b 03 	call	0x656	; 0x656 <beep>
}
     6e2:	08 95       	ret

000006e4 <init_boost>:

// We control the boost converter by changing the PWM output
// pins
void init_boost (void) 
{
	brightness = eeprom_read_byte ((uint8_t *) EE_BRIGHT);
     6e4:	89 e0       	ldi	r24, 0x09	; 9
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
	brightness = limit_brightness(brightness);
     6ec:	0e 94 c4 02 	call	0x588	; 0x588 <limit_brightness>
     6f0:	80 93 45 01 	sts	0x0145, r24
	if (!flag(f_autobright)) {
     6f4:	90 91 46 01 	lds	r25, 0x0146
     6f8:	95 fd       	sbrc	r25, 5
     6fa:	05 c0       	rjmp	.+10     	; 0x706 <init_boost+0x22>
		ocr0a = brightness;
     6fc:	80 93 3d 01 	sts	0x013D, r24
		OCR0A = ocr0a;
     700:	80 91 3d 01 	lds	r24, 0x013D
     704:	87 bd       	out	0x27, r24	; 39
	}	

	// fast PWM, set OC0A (boost output pin) on match
	TCCR0A = _BV(WGM00) | _BV(WGM01);	
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	84 bd       	out	0x24, r24	; 36

	// Use the fastest clock
	TCCR0B = _BV(CS00);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	85 bd       	out	0x25, r24	; 37
 
	TCCR0A |= _BV(COM0A1);
     70e:	84 b5       	in	r24, 0x24	; 36
     710:	80 68       	ori	r24, 0x80	; 128
     712:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(TOIE0); // turn on the interrupt for muxing
     714:	80 91 6e 00 	lds	r24, 0x006E
     718:	81 60       	ori	r24, 0x01	; 1
     71a:	80 93 6e 00 	sts	0x006E, r24
}
     71e:	08 95       	ret

00000720 <init_autobright>:

void init_autobright (void) {
	if (eeprom_read_byte ((uint8_t *)EE_AUTOB))
     720:	8e e0       	ldi	r24, 0x0E	; 14
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
     728:	88 23       	and	r24, r24
     72a:	21 f0       	breq	.+8      	; 0x734 <init_autobright+0x14>
		set_flag (f_autobright);
     72c:	80 91 46 01 	lds	r24, 0x0146
     730:	80 62       	ori	r24, 0x20	; 32
     732:	03 c0       	rjmp	.+6      	; 0x73a <init_autobright+0x1a>
	else
		clr_flag (f_autobright);
     734:	80 91 46 01 	lds	r24, 0x0146
     738:	8f 7d       	andi	r24, 0xDF	; 223
     73a:	80 93 46 01 	sts	0x0146, r24
	
	adc_sum = 0;
     73e:	10 92 1b 01 	sts	0x011B, r1
     742:	10 92 1c 01 	sts	0x011C, r1
     746:	10 92 1d 01 	sts	0x011D, r1
     74a:	10 92 1e 01 	sts	0x011E, r1
	adc_count = 0;
     74e:	10 92 18 01 	sts	0x0118, r1
     752:	10 92 17 01 	sts	0x0117, r1
	if (flag(f_autobright)) {
     756:	80 91 46 01 	lds	r24, 0x0146
     75a:	85 ff       	sbrs	r24, 5
     75c:	06 c0       	rjmp	.+12     	; 0x76a <init_autobright+0x4a>
		ocr0a = 90;		// Start at maximum
     75e:	8a e5       	ldi	r24, 0x5A	; 90
     760:	80 93 3d 01 	sts	0x013D, r24
		OCR0A = ocr0a;
     764:	80 91 3d 01 	lds	r24, 0x013D
     768:	87 bd       	out	0x27, r24	; 39
	}	

	//ADCSRA |= _BV(ADPS2)| _BV(ADPS1); // Set ADC prescalar to 64 - 125KHz sample rate @ 8MHz F_CPU
	ADMUX |= _BV(REFS0);	// Set ADC reference to AVCC
     76a:	80 91 7c 00 	lds	r24, 0x007C
     76e:	80 64       	ori	r24, 0x40	; 64
     770:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= 0x2;			// Set ADC input as ADC2
     774:	80 91 7c 00 	lds	r24, 0x007C
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	80 93 7c 00 	sts	0x007C, r24
	DIDR0 = _BV(ADC2D);		// Disable ADC2 digital input
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRB = 0;
     784:	10 92 7b 00 	sts	0x007B, r1
	// enable ADC and interrupts, divide clock by 128, start conversion
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | 0x7;
     788:	80 91 7a 00 	lds	r24, 0x007A
     78c:	8f 6a       	ori	r24, 0xAF	; 175
     78e:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADSC);
     792:	80 91 7a 00 	lds	r24, 0x007A
     796:	80 64       	ori	r24, 0x40	; 64
     798:	80 93 7a 00 	sts	0x007A, r24
}
     79c:	08 95       	ret

0000079e <dow>:
/**************************** TIME CALCULATIONS *****************************/

const char dow_tbl[] PROGMEM = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};

// Calculate day of the week by Sakamoto's method, 0=Sunday
uint8_t dow (uint8_t y, uint8_t m, uint8_t d) {
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
	uint16_t yy;		

	yy = y + 2000 - (m < 3);
     7a2:	c8 2f       	mov	r28, r24
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	c0 53       	subi	r28, 0x30	; 48
     7a8:	d8 4f       	sbci	r29, 0xF8	; 248
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	63 30       	cpi	r22, 0x03	; 3
     7b0:	10 f0       	brcs	.+4      	; 0x7b6 <dow+0x18>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	c8 1b       	sub	r28, r24
     7b8:	d9 0b       	sbc	r29, r25
	return (yy + yy/4 - yy/100 + yy/400 + pgm_read_byte(dow_tbl + m-1) + d) % 7;
     7ba:	e6 2f       	mov	r30, r22
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	eb 5a       	subi	r30, 0xAB	; 171
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	e4 91       	lpm	r30, Z
     7c4:	9e 01       	movw	r18, r28
     7c6:	24 0f       	add	r18, r20
     7c8:	31 1d       	adc	r19, r1
     7ca:	ce 01       	movw	r24, r28
     7cc:	96 95       	lsr	r25
     7ce:	87 95       	ror	r24
     7d0:	96 95       	lsr	r25
     7d2:	87 95       	ror	r24
     7d4:	28 0f       	add	r18, r24
     7d6:	39 1f       	adc	r19, r25
     7d8:	ce 01       	movw	r24, r28
     7da:	60 e9       	ldi	r22, 0x90	; 144
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
     7e2:	26 0f       	add	r18, r22
     7e4:	37 1f       	adc	r19, r23
     7e6:	ce 01       	movw	r24, r28
     7e8:	64 e6       	ldi	r22, 0x64	; 100
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
     7f0:	26 1b       	sub	r18, r22
     7f2:	37 0b       	sbc	r19, r23
     7f4:	2e 0f       	add	r18, r30
     7f6:	31 1d       	adc	r19, r1
     7f8:	c9 01       	movw	r24, r18
     7fa:	67 e0       	ldi	r22, 0x07	; 7
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <leapyear>:

// This will calculate leap years, give it the year
// and it will return 1 (true) or 0 (false)
uint8_t leapyear(uint16_t y)  {
     808:	9c 01       	movw	r18, r24
	return ( (!(y % 4) && (y % 100)) || !(y % 400));
     80a:	83 70       	andi	r24, 0x03	; 3
     80c:	90 70       	andi	r25, 0x00	; 0
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	39 f4       	brne	.+14     	; 0x820 <leapyear+0x18>
     812:	c9 01       	movw	r24, r18
     814:	64 e6       	ldi	r22, 0x64	; 100
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	61 f4       	brne	.+24     	; 0x838 <leapyear+0x30>
     820:	c9 01       	movw	r24, r18
     822:	60 e9       	ldi	r22, 0x90	; 144
     824:	71 e0       	ldi	r23, 0x01	; 1
     826:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	29 f0       	breq	.+10     	; 0x83c <leapyear+0x34>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	02 c0       	rjmp	.+4      	; 0x83c <leapyear+0x34>
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
}
     83c:	82 2f       	mov	r24, r18
     83e:	08 95       	ret

00000840 <monthlen>:

const char mon_tbl[] PROGMEM = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
PGM_P const mon_tbl_p PROGMEM = mon_tbl;

uint8_t monthlen(uint8_t y, uint8_t m) {
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	0f 92       	push	r0
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
	uint8_t ml;
	if (m == 2 && leapyear(y+2000))
     84a:	62 30       	cpi	r22, 0x02	; 2
     84c:	49 f4       	brne	.+18     	; 0x860 <monthlen+0x20>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	80 53       	subi	r24, 0x30	; 48
     852:	98 4f       	sbci	r25, 0xF8	; 248
     854:	69 83       	std	Y+1, r22	; 0x01
     856:	0e 94 04 04 	call	0x808	; 0x808 <leapyear>
     85a:	69 81       	ldd	r22, Y+1	; 0x01
     85c:	88 23       	and	r24, r24
     85e:	31 f4       	brne	.+12     	; 0x86c <monthlen+0x2c>
		ml = 29;
	else
		ml = pgm_read_byte(mon_tbl_p + (m-1));
     860:	e6 2f       	mov	r30, r22
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	e7 5b       	subi	r30, 0xB7	; 183
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	84 91       	lpm	r24, Z
     86a:	01 c0       	rjmp	.+2      	; 0x86e <monthlen+0x2e>
PGM_P const mon_tbl_p PROGMEM = mon_tbl;

uint8_t monthlen(uint8_t y, uint8_t m) {
	uint8_t ml;
	if (m == 2 && leapyear(y+2000))
		ml = 29;
     86c:	8d e1       	ldi	r24, 0x1D	; 29
	else
		ml = pgm_read_byte(mon_tbl_p + (m-1));
	return ml;
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <dst>:
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	d4 2f       	mov	r29, r20
     87c:	c2 2f       	mov	r28, r18
	uint8_t day;
	
	if (!flag(f_dst_enable)) return 0;
     87e:	90 91 46 01 	lds	r25, 0x0146
     882:	93 ff       	sbrs	r25, 3
     884:	40 c0       	rjmp	.+128    	; 0x906 <__stack+0x7>
	
	if (region == REGION_US) {
     886:	20 91 14 01 	lds	r18, 0x0114
     88a:	96 2f       	mov	r25, r22
     88c:	94 50       	subi	r25, 0x04	; 4
     88e:	22 23       	and	r18, r18
     890:	81 f4       	brne	.+32     	; 0x8b2 <dst+0x3c>
		if (March < m && m < November)
     892:	97 30       	cpi	r25, 0x07	; 7
     894:	b0 f1       	brcs	.+108    	; 0x902 <__stack+0x3>
			return 1;
		else if (m == March) {
     896:	63 30       	cpi	r22, 0x03	; 3
     898:	29 f4       	brne	.+10     	; 0x8a4 <dst+0x2e>
			day = 14 - dow (y, March, 14);	// 2nd Sunday
     89a:	4e e0       	ldi	r20, 0x0E	; 14
     89c:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
     8a0:	9e e0       	ldi	r25, 0x0E	; 14
     8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <dst+0x4c>
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == November) {
     8a4:	6b 30       	cpi	r22, 0x0B	; 11
     8a6:	79 f5       	brne	.+94     	; 0x906 <__stack+0x7>
			day = 7 - dow (y, November, 7);	// 1st Sunday
     8a8:	47 e0       	ldi	r20, 0x07	; 7
     8aa:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	18 c0       	rjmp	.+48     	; 0x8e2 <dst+0x6c>
			return (d < day) || ((d == day) && (h < 1));
		} else
			return 0;
	} else {
		// European transition hour may be off, depending on timezone and country
		if (March < m && m < October)
     8b2:	96 30       	cpi	r25, 0x06	; 6
     8b4:	30 f1       	brcs	.+76     	; 0x902 <__stack+0x3>
			return 1;
		else if (m == March) {
     8b6:	63 30       	cpi	r22, 0x03	; 3
     8b8:	71 f4       	brne	.+28     	; 0x8d6 <dst+0x60>
			day = 31 - dow (y, March, 31);	// last Sunday
     8ba:	4f e1       	ldi	r20, 0x1F	; 31
     8bc:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
     8c0:	9f e1       	ldi	r25, 0x1F	; 31
     8c2:	98 1b       	sub	r25, r24
			return (d > day) || ((d == day) && (h > 1));
     8c4:	9d 17       	cp	r25, r29
     8c6:	b8 f0       	brcs	.+46     	; 0x8f6 <dst+0x80>
     8c8:	d9 17       	cp	r29, r25
     8ca:	c1 f4       	brne	.+48     	; 0x8fc <dst+0x86>
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	c2 30       	cpi	r28, 0x02	; 2
     8d2:	d0 f4       	brcc	.+52     	; 0x908 <__stack+0x9>
     8d4:	13 c0       	rjmp	.+38     	; 0x8fc <dst+0x86>
		if (March < m && m < October)
			return 1;
		else if (m == March) {
			day = 31 - dow (y, March, 31);	// last Sunday
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == October) {
     8d6:	6a 30       	cpi	r22, 0x0A	; 10
     8d8:	b1 f4       	brne	.+44     	; 0x906 <__stack+0x7>
			day = 31 - dow (y, October, 31);	// last Sunday
     8da:	4f e1       	ldi	r20, 0x1F	; 31
     8dc:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
     8e0:	9f e1       	ldi	r25, 0x1F	; 31
     8e2:	98 1b       	sub	r25, r24
			return (d < day) || ((d == day) && (h < 1));
     8e4:	d9 17       	cp	r29, r25
     8e6:	38 f0       	brcs	.+14     	; 0x8f6 <dst+0x80>
     8e8:	d9 17       	cp	r29, r25
     8ea:	41 f4       	brne	.+16     	; 0x8fc <dst+0x86>
#define October 10
#define November 11

// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	cc 23       	and	r28, r28
     8f2:	51 f0       	breq	.+20     	; 0x908 <__stack+0x9>
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <dst+0x86>
		else if (m == March) {
			day = 31 - dow (y, March, 31);	// last Sunday
			return (d > day) || ((d == day) && (h > 1));
		} else if (m == October) {
			day = 31 - dow (y, October, 31);	// last Sunday
			return (d < day) || ((d == day) && (h < 1));
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <__stack+0x9>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
		} else
			return 0;
	} else {
		// European transition hour may be off, depending on timezone and country
		if (March < m && m < October)
			return 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0x9>
// Returns 1 if specified point in time is subject to
// daylight savings' time, 0 otherwise.
uint8_t dst (uint8_t y, uint8_t m, uint8_t d, uint8_t h) {
	uint8_t day;
	
	if (!flag(f_dst_enable)) return 0;
     906:	80 e0       	ldi	r24, 0x00	; 0
			day = 31 - dow (y, October, 31);	// last Sunday
			return (d < day) || ((d == day) && (h < 1));
		} else
			return 0;		
	}
}
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <init_clock>:


/**************************** INITIALIZATION *****************************/


void init_clock(void) {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	27 97       	sbiw	r28, 0x07	; 7
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
	uint8_t dt[7];
	uint8_t i;
	
	// Initialize Daylight Saving Time enable
	if (eeprom_read_byte ((uint8_t *)EE_DST))
     922:	8d e0       	ldi	r24, 0x0D	; 13
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
     92a:	88 23       	and	r24, r24
     92c:	21 f0       	breq	.+8      	; 0x936 <init_clock+0x28>
		set_flag(f_dst_enable);
     92e:	80 91 46 01 	lds	r24, 0x0146
     932:	88 60       	ori	r24, 0x08	; 8
     934:	03 c0       	rjmp	.+6      	; 0x93c <init_clock+0x2e>
	else
		clr_flag(f_dst_enable);
     936:	80 91 46 01 	lds	r24, 0x0146
     93a:	87 7f       	andi	r24, 0xF7	; 247
     93c:	80 93 46 01 	sts	0x0146, r24
	
	// Read check values from ChronoDot alarm fields
	twiReadRegN(0xd0, 0x07, 7, dt);
     940:	80 ed       	ldi	r24, 0xD0	; 208
     942:	67 e0       	ldi	r22, 0x07	; 7
     944:	47 e0       	ldi	r20, 0x07	; 7
     946:	9e 01       	movw	r18, r28
     948:	2f 5f       	subi	r18, 0xFF	; 255
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	0e 94 08 12 	call	0x2410	; 0x2410 <twiReadRegN>
     950:	fe 01       	movw	r30, r28
     952:	31 96       	adiw	r30, 0x01	; 1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < 7; i++)
		if (dt[i] != i+1) break;
     958:	21 91       	ld	r18, Z+
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	28 17       	cp	r18, r24
     960:	39 07       	cpc	r19, r25
     962:	21 f4       	brne	.+8      	; 0x96c <init_clock+0x5e>
	else
		clr_flag(f_dst_enable);
	
	// Read check values from ChronoDot alarm fields
	twiReadRegN(0xd0, 0x07, 7, dt);
	for (i = 0; i < 7; i++)
     964:	87 30       	cpi	r24, 0x07	; 7
     966:	91 05       	cpc	r25, r1
     968:	b9 f7       	brne	.-18     	; 0x958 <init_clock+0x4a>
     96a:	63 c0       	rjmp	.+198    	; 0xa32 <init_clock+0x124>
		if (dt[i] != i+1) break;
	if (i != 7) {
		DEBUGP("ChronoDot check failed!");
     96c:	8f ec       	ldi	r24, 0xCF	; 207
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
		set_flag (f_timeunknown);	// let customer know time needs setting
     976:	80 91 46 01 	lds	r24, 0x0146
     97a:	82 60       	ori	r24, 0x02	; 2
     97c:	4f c0       	rjmp	.+158    	; 0xa1c <init_clock+0x10e>
	} else {
		// Sync to start of ChronoDot second
		cli();
		
		time_s = twiReadReg(0xd0, 0x00);
		do twiReadRegN(0xd0, 0x00, 7, dt); while (dt[0] == time_s);
     97e:	80 ed       	ldi	r24, 0xD0	; 208
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	47 e0       	ldi	r20, 0x07	; 7
     984:	9e 01       	movw	r18, r28
     986:	2f 5f       	subi	r18, 0xFF	; 255
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	0e 94 08 12 	call	0x2410	; 0x2410 <twiReadRegN>
     98e:	80 91 42 01 	lds	r24, 0x0142
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	98 17       	cp	r25, r24
     996:	99 f3       	breq	.-26     	; 0x97e <init_clock+0x70>

		// Zero T/C2 to sync AVR to start of seconds
		GTCCR |= _BV(PSRASY) | _BV(TSM);
     998:	83 b5       	in	r24, 0x23	; 35
     99a:	82 68       	ori	r24, 0x82	; 130
     99c:	83 bd       	out	0x23, r24	; 35
		TCNT2 = 0;		
     99e:	10 92 b2 00 	sts	0x00B2, r1
		GTCCR &= ~_BV(TSM);
     9a2:	83 b5       	in	r24, 0x23	; 35
     9a4:	8f 77       	andi	r24, 0x7F	; 127
     9a6:	83 bd       	out	0x23, r24	; 35
		
		time_s = bcd2b (dt[0]);		// BCD to binary decode
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9ae:	80 93 42 01 	sts	0x0142, r24
		time_m = bcd2b (dt[1]);
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9b8:	80 93 35 01 	sts	0x0135, r24
		time_h = bcd2b (dt[2] & 0x3f);
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	8f 73       	andi	r24, 0x3F	; 63
     9c0:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9c4:	80 93 15 01 	sts	0x0115, r24

		date_d = bcd2b (dt[4]);
     9c8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ca:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9ce:	80 93 29 01 	sts	0x0129, r24
		date_m = bcd2b (dt[5] & 0x1f);
     9d2:	8e 81       	ldd	r24, Y+6	; 0x06
     9d4:	8f 71       	andi	r24, 0x1F	; 31
     9d6:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9da:	80 93 3e 01 	sts	0x013E, r24
		//date_y = bcd2b (dt[6]);
		date_y = bcd2b (dt[6] + 1970);
     9de:	8f 81       	ldd	r24, Y+7	; 0x07
     9e0:	8e 54       	subi	r24, 0x4E	; 78
     9e2:	0e 94 b9 02 	call	0x572	; 0x572 <bcd2b>
     9e6:	80 93 19 01 	sts	0x0119, r24
		
		sei();
     9ea:	78 94       	sei

		clr_flag (f_timeunknown);
     9ec:	80 91 46 01 	lds	r24, 0x0146
     9f0:	8d 7f       	andi	r24, 0xFD	; 253
     9f2:	80 93 46 01 	sts	0x0146, r24
		
		// Initialize DST now since it is only done at top of hour
		set_dst_offset (date_y, date_m, date_d, time_h);
     9f6:	80 91 19 01 	lds	r24, 0x0119
     9fa:	60 91 3e 01 	lds	r22, 0x013E
     9fe:	40 91 29 01 	lds	r20, 0x0129
     a02:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     a06:	0e 94 3b 04 	call	0x876	; 0x876 <dst>
     a0a:	88 23       	and	r24, r24
     a0c:	21 f0       	breq	.+8      	; 0xa16 <init_clock+0x108>
		set_flag (f_dst_offset);
     a0e:	80 91 46 01 	lds	r24, 0x0146
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <init_clock+0x10e>
	else
		clr_flag (f_dst_offset);
     a16:	80 91 46 01 	lds	r24, 0x0146
     a1a:	8e 7f       	andi	r24, 0xFE	; 254
     a1c:	80 93 46 01 	sts	0x0146, r24
		
		// Initialize DST now since it is only done at top of hour
		set_dst_offset (date_y, date_m, date_d, time_h);

	}
}
     a20:	27 96       	adiw	r28, 0x07	; 7
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret
	if (i != 7) {
		DEBUGP("ChronoDot check failed!");
		set_flag (f_timeunknown);	// let customer know time needs setting
	} else {
		// Sync to start of ChronoDot second
		cli();
     a32:	f8 94       	cli
		
		time_s = twiReadReg(0xd0, 0x00);
     a34:	80 ed       	ldi	r24, 0xD0	; 208
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	0e 94 c9 11 	call	0x2392	; 0x2392 <twiReadReg>
     a3c:	80 93 42 01 	sts	0x0142, r24
     a40:	9e cf       	rjmp	.-196    	; 0x97e <init_clock+0x70>

00000a42 <__vector_9>:
	PORTB &= ~_BV(SPK1) & ~_BV(SPK2);	// turn speaker off
}

// Timer 2 overflow -- master time base -- this goes off once a second
ISR (TIMER2_OVF_vect, ISR_NOBLOCK) 
{
     a42:	78 94       	sei
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	cf 93       	push	r28
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	set_flag (f_display_update);	// Notify main loop of change in time
     a68:	80 91 46 01 	lds	r24, 0x0146
     a6c:	80 61       	ori	r24, 0x10	; 16
     a6e:	80 93 46 01 	sts	0x0146, r24
	time_s++;				// One second has gone by
     a72:	80 91 42 01 	lds	r24, 0x0142
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 42 01 	sts	0x0142, r24

	if (time_s >= 60) {
     a7c:	80 91 42 01 	lds	r24, 0x0142
     a80:	8c 33       	cpi	r24, 0x3C	; 60
     a82:	70 f1       	brcs	.+92     	; 0xae0 <__vector_9+0x9e>
		// a minute!
		uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
     a84:	30 91 15 01 	lds	r19, 0x0115
     a88:	80 91 46 01 	lds	r24, 0x0146
		
		time_s = 0;
     a8c:	10 92 42 01 	sts	0x0142, r1
		time_m++;
     a90:	90 91 35 01 	lds	r25, 0x0135
     a94:	9f 5f       	subi	r25, 0xFF	; 255
     a96:	90 93 35 01 	sts	0x0135, r25

		if (flag(f_alarm_on) && (alarm_h == h) && (alarm_m == time_m)) {
     a9a:	90 91 46 01 	lds	r25, 0x0146
     a9e:	96 ff       	sbrs	r25, 6
     aa0:	1f c0       	rjmp	.+62     	; 0xae0 <__vector_9+0x9e>
     aa2:	20 91 38 01 	lds	r18, 0x0138
	set_flag (f_display_update);	// Notify main loop of change in time
	time_s++;				// One second has gone by

	if (time_s >= 60) {
		// a minute!
		uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	81 70       	andi	r24, 0x01	; 1
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	83 0f       	add	r24, r19
     aae:	91 1d       	adc	r25, r1
     ab0:	68 e1       	ldi	r22, 0x18	; 24
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
		
		time_s = 0;
		time_m++;

		if (flag(f_alarm_on) && (alarm_h == h) && (alarm_m == time_m)) {
     ab8:	28 17       	cp	r18, r24
     aba:	91 f4       	brne	.+36     	; 0xae0 <__vector_9+0x9e>
     abc:	90 91 1a 01 	lds	r25, 0x011A
     ac0:	80 91 35 01 	lds	r24, 0x0135
     ac4:	98 17       	cp	r25, r24
     ac6:	61 f4       	brne	.+24     	; 0xae0 <__vector_9+0x9e>
			alarming = 1;	// Sound the alarm
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 3a 01 	sts	0x013A, r24
			snoozetimer = 0;
     ace:	10 92 44 01 	sts	0x0144, r1
     ad2:	10 92 43 01 	sts	0x0143, r1
			TCCR1A &= ~_BV(COM1A1);		// start at low volume
     ad6:	80 91 80 00 	lds	r24, 0x0080
     ada:	8f 77       	andi	r24, 0x7F	; 127
     adc:	80 93 80 00 	sts	0x0080, r24
		}
	}

	if (time_m >= 60) {
     ae0:	80 91 35 01 	lds	r24, 0x0135
     ae4:	8c 33       	cpi	r24, 0x3C	; 60
     ae6:	e0 f0       	brcs	.+56     	; 0xb20 <__vector_9+0xde>
		// an hour...
		time_m = 0;
     ae8:	10 92 35 01 	sts	0x0135, r1
		time_h++;
     aec:	80 91 15 01 	lds	r24, 0x0115
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 15 01 	sts	0x0115, r24
		
		set_dst_offset (date_y, date_m, date_d, time_h);	// re-calculate DST each hour
     af6:	80 91 19 01 	lds	r24, 0x0119
     afa:	60 91 3e 01 	lds	r22, 0x013E
     afe:	40 91 29 01 	lds	r20, 0x0129
     b02:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     b06:	0e 94 3b 04 	call	0x876	; 0x876 <dst>
     b0a:	88 23       	and	r24, r24
     b0c:	21 f0       	breq	.+8      	; 0xb16 <__vector_9+0xd4>
		set_flag (f_dst_offset);
     b0e:	80 91 46 01 	lds	r24, 0x0146
     b12:	81 60       	ori	r24, 0x01	; 1
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <__vector_9+0xda>
	else
		clr_flag (f_dst_offset);
     b16:	80 91 46 01 	lds	r24, 0x0146
     b1a:	8e 7f       	andi	r24, 0xFE	; 254
     b1c:	80 93 46 01 	sts	0x0146, r24
		time_h++;
		
		set_dst_offset (date_y, date_m, date_d, time_h);	// re-calculate DST each hour
	}

	if (time_h >= 24) {
     b20:	80 91 15 01 	lds	r24, 0x0115
     b24:	88 31       	cpi	r24, 0x18	; 24
     b26:	38 f0       	brcs	.+14     	; 0xb36 <__vector_9+0xf4>
		// a day....
		time_h = 0;
     b28:	10 92 15 01 	sts	0x0115, r1
		date_d++;
     b2c:	80 91 29 01 	lds	r24, 0x0129
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 29 01 	sts	0x0129, r24
	}

	if (date_d > monthlen(date_y, date_m)) {
     b36:	c0 91 29 01 	lds	r28, 0x0129
     b3a:	80 91 19 01 	lds	r24, 0x0119
     b3e:	60 91 3e 01 	lds	r22, 0x013E
     b42:	0e 94 20 04 	call	0x840	; 0x840 <monthlen>
     b46:	8c 17       	cp	r24, r28
     b48:	40 f4       	brcc	.+16     	; 0xb5a <__vector_9+0x118>
		// a full month!
		date_d = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 29 01 	sts	0x0129, r24
		date_m++;
     b50:	80 91 3e 01 	lds	r24, 0x013E
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 3e 01 	sts	0x013E, r24
	}
	
	if (date_m > 12) {
     b5a:	80 91 3e 01 	lds	r24, 0x013E
     b5e:	8d 30       	cpi	r24, 0x0D	; 13
     b60:	40 f0       	brcs	.+16     	; 0xb72 <__vector_9+0x130>
		// HAPPY NEW YEAR!
		date_y++;
     b62:	80 91 19 01 	lds	r24, 0x0119
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 19 01 	sts	0x0119, r24
		date_m = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 3e 01 	sts	0x013E, r24
	}
	
	// Various countdown timers with 1-second clock rate
	if (snoozetimer)		snoozetimer--;
     b72:	80 91 43 01 	lds	r24, 0x0143
     b76:	90 91 44 01 	lds	r25, 0x0144
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	29 f0       	breq	.+10     	; 0xb88 <__vector_9+0x146>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	90 93 44 01 	sts	0x0144, r25
     b84:	80 93 43 01 	sts	0x0143, r24
	if (timeoutcounter)		timeoutcounter--;
     b88:	80 91 40 01 	lds	r24, 0x0140
     b8c:	90 91 41 01 	lds	r25, 0x0141
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	29 f0       	breq	.+10     	; 0xb9e <__vector_9+0x15c>
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	90 93 41 01 	sts	0x0141, r25
     b9a:	80 93 40 01 	sts	0x0140, r24
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	cf 91       	pop	r28
     ba4:	bf 91       	pop	r27
     ba6:	af 91       	pop	r26
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	7f 91       	pop	r23
     bae:	6f 91       	pop	r22
     bb0:	5f 91       	pop	r21
     bb2:	4f 91       	pop	r20
     bb4:	3f 91       	pop	r19
     bb6:	2f 91       	pop	r18
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <display_clear>:

/**************************** DISPLAY *****************************/

void display_clear(void)
{
	memset (display, 0, DISPLAYSIZE);
     bc2:	89 e0       	ldi	r24, 0x09	; 9
     bc4:	ea e2       	ldi	r30, 0x2A	; 42
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	df 01       	movw	r26, r30
     bca:	1d 92       	st	X+, r1
     bcc:	8a 95       	dec	r24
     bce:	e9 f7       	brne	.-6      	; 0xbca <display_clear+0x8>
	DEBUGP("c")
     bd0:	8a ef       	ldi	r24, 0xFA	; 250
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
}
     bda:	08 95       	ret

00000bdc <display_time>:
	display_str (d);
}
*/

// This displays a time on the clock
void display_time(uint8_t h, uint8_t m, uint8_t s) {
     bdc:	28 2f       	mov	r18, r24
     bde:	36 2f       	mov	r19, r22
     be0:	84 2f       	mov	r24, r20
	 * 	8		32
	 * 		16			1
	 */

	// seconds and minutes are at the end
	display[8] =  pgm_read_byte(numbertable_p + (s % 10));
     be2:	6a e0       	ldi	r22, 0x0A	; 10
     be4:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     be8:	e9 2f       	mov	r30, r25
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ec 52       	subi	r30, 0x2C	; 44
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	e4 91       	lpm	r30, Z
     bf2:	e0 93 32 01 	sts	0x0132, r30
	display[7] =  pgm_read_byte(numbertable_p + (s / 10));
     bf6:	e8 2f       	mov	r30, r24
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	ec 52       	subi	r30, 0x2C	; 44
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	e4 91       	lpm	r30, Z
     c00:	e0 93 31 01 	sts	0x0131, r30

	switch(s % 10) {
     c04:	93 30       	cpi	r25, 0x03	; 3
     c06:	c1 f0       	breq	.+48     	; 0xc38 <display_time+0x5c>
     c08:	94 30       	cpi	r25, 0x04	; 4
     c0a:	28 f4       	brcc	.+10     	; 0xc16 <display_time+0x3a>
     c0c:	91 30       	cpi	r25, 0x01	; 1
     c0e:	81 f0       	breq	.+32     	; 0xc30 <display_time+0x54>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	50 f4       	brcc	.+20     	; 0xc28 <display_time+0x4c>
     c14:	07 c0       	rjmp	.+14     	; 0xc24 <display_time+0x48>
     c16:	95 30       	cpi	r25, 0x05	; 5
     c18:	59 f0       	breq	.+22     	; 0xc30 <display_time+0x54>
     c1a:	95 30       	cpi	r25, 0x05	; 5
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <display_time+0x50>
     c1e:	96 30       	cpi	r25, 0x06	; 6
     c20:	59 f4       	brne	.+22     	; 0xc38 <display_time+0x5c>
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <display_time+0x58>
		case 0:
			display[3] = 0x08;
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <display_time+0x5e>
		case 1:
			display[3] = 0x02;
			display[6] = 0x02;
			break;
		case 2:
			display[3] = 0x40;
     c28:	80 e4       	ldi	r24, 0x40	; 64
     c2a:	07 c0       	rjmp	.+14     	; 0xc3a <display_time+0x5e>
		case 3:
			display[3] = 0x80;
			display[6] = 0x80;
			break;
		case 4:
			display[3] = 0x04;
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <display_time+0x5e>
			display[6] = 0x04;
			break;
		case 5:
			display[3] = 0x02;
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <display_time+0x5e>
			display[6] = 0x02;
			break;
		case 6:
			display[3] = 0x20;
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <display_time+0x5e>
			display[6] = 0x10;
		case 8:
			display[3] = 0x02;
			display[6] = 0x02;
		default:
			display[3] = 0x80;
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	80 93 2d 01 	sts	0x012D, r24
			display[6] = 0x80;
     c3e:	80 93 30 01 	sts	0x0130, r24
		secondDisp+=1;
	}
	*/


	display[5] =  pgm_read_byte(numbertable_p + (m % 10));
     c42:	4a e0       	ldi	r20, 0x0A	; 10
     c44:	83 2f       	mov	r24, r19
     c46:	64 2f       	mov	r22, r20
     c48:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     c4c:	e9 2f       	mov	r30, r25
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ec 52       	subi	r30, 0x2C	; 44
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	e4 91       	lpm	r30, Z
     c56:	e0 93 2f 01 	sts	0x012F, r30
	display[4] =  pgm_read_byte(numbertable_p + (m / 10)); 
     c5a:	e8 2f       	mov	r30, r24
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ec 52       	subi	r30, 0x2C	; 44
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	e4 91       	lpm	r30, Z
     c64:	e0 93 2e 01 	sts	0x012E, r30


	// check euro (24h) or US (12h) style time
	if (region == REGION_US) {
     c68:	80 91 14 01 	lds	r24, 0x0114
     c6c:	88 23       	and	r24, r24
     c6e:	11 f5       	brne	.+68     	; 0xcb4 <display_time+0xd8>
		display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
     c70:	82 2f       	mov	r24, r18
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0b 96       	adiw	r24, 0x0b	; 11
     c76:	6c e0       	ldi	r22, 0x0C	; 12
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	6a e0       	ldi	r22, 0x0A	; 10
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
     c88:	fc 01       	movw	r30, r24
     c8a:	ec 52       	subi	r30, 0x2C	; 44
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	e4 91       	lpm	r30, Z
     c90:	e0 93 2c 01 	sts	0x012C, r30
		display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));
     c94:	6c 52       	subi	r22, 0x2C	; 44
     c96:	7e 4f       	sbci	r23, 0xFE	; 254
     c98:	fb 01       	movw	r30, r22
     c9a:	64 91       	lpm	r22, Z
     c9c:	60 93 2b 01 	sts	0x012B, r22

		// We use the '*' as an am/pm notice
		if (h >= 12)
			display[0] |= 0x1;  // 'pm' notice
     ca0:	80 91 2a 01 	lds	r24, 0x012A
	if (region == REGION_US) {
		display[2] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) % 10));
		display[1] =  pgm_read_byte(numbertable_p + ( (((h+11)%12)+1) / 10));

		// We use the '*' as an am/pm notice
		if (h >= 12)
     ca4:	2c 30       	cpi	r18, 0x0C	; 12
     ca6:	10 f0       	brcs	.+4      	; 0xcac <display_time+0xd0>
			display[0] |= 0x1;  // 'pm' notice
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	01 c0       	rjmp	.+2      	; 0xcae <display_time+0xd2>
		else 
			display[0] &= ~0x1;  // 'pm' notice
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	80 93 2a 01 	sts	0x012A, r24
     cb2:	08 95       	ret
	} else {
		display[2] =  pgm_read_byte(numbertable_p + ( (h%24) % 10));
     cb4:	82 2f       	mov	r24, r18
     cb6:	68 e1       	ldi	r22, 0x18	; 24
     cb8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     cbc:	89 2f       	mov	r24, r25
     cbe:	64 2f       	mov	r22, r20
     cc0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
     cc4:	e9 2f       	mov	r30, r25
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	ec 52       	subi	r30, 0x2C	; 44
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	e4 91       	lpm	r30, Z
     cce:	e0 93 2c 01 	sts	0x012C, r30
		display[1] =  pgm_read_byte(numbertable_p + ( (h%24) / 10));
     cd2:	e8 2f       	mov	r30, r24
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	ec 52       	subi	r30, 0x2C	; 44
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	e4 91       	lpm	r30, Z
     cdc:	e0 93 2b 01 	sts	0x012B, r30
     ce0:	08 95       	ret

00000ce2 <display_char>:
// Set bit 7 to turn on decimal point
void display_char (char c, uint8_t pos)
{
	uint8_t dp = 0;
	
	if (c & _BV(7)) {
     ce2:	87 ff       	sbrs	r24, 7
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <display_char+0xa>
		// if top bit set, turn on decimal point
		c &= 0x7f;
     ce6:	8f 77       	andi	r24, 0x7F	; 127
		dp = 0x01;
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	01 c0       	rjmp	.+2      	; 0xcee <display_char+0xc>

// Numbers and letters are looked up in the font table!
// Set bit 7 to turn on decimal point
void display_char (char c, uint8_t pos)
{
	uint8_t dp = 0;
     cec:	90 e0       	ldi	r25, 0x00	; 0
	if (c & _BV(7)) {
		// if top bit set, turn on decimal point
		c &= 0x7f;
		dp = 0x01;
	}
	if (('a' <= c) && (c <= 'z')) {
     cee:	28 2f       	mov	r18, r24
     cf0:	21 56       	subi	r18, 0x61	; 97
     cf2:	2a 31       	cpi	r18, 0x1A	; 26
     cf4:	28 f4       	brcc	.+10     	; 0xd00 <display_char+0x1e>
		display[pos] =	pgm_read_byte(alphatable_p + c - 'a') | dp;
     cf6:	e8 2f       	mov	r30, r24
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e1 58       	subi	r30, 0x81	; 129
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <display_char+0x2e>
	} else if (('0' <= c) && (c <= '9')) {
     d00:	28 2f       	mov	r18, r24
     d02:	20 53       	subi	r18, 0x30	; 48
     d04:	2a 30       	cpi	r18, 0x0A	; 10
     d06:	60 f4       	brcc	.+24     	; 0xd20 <display_char+0x3e>
		display[pos] =	pgm_read_byte(numbertable_p + c - '0') | dp;
     d08:	e8 2f       	mov	r30, r24
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	ec 55       	subi	r30, 0x5C	; 92
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	e4 91       	lpm	r30, Z
     d12:	a6 2f       	mov	r26, r22
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	a6 5d       	subi	r26, 0xD6	; 214
     d18:	be 4f       	sbci	r27, 0xFE	; 254
     d1a:	e9 2b       	or	r30, r25
     d1c:	ec 93       	st	X, r30
     d1e:	08 95       	ret
     d20:	a6 2f       	mov	r26, r22
     d22:	b0 e0       	ldi	r27, 0x00	; 0
	} else if (c == '-') {	
		display[pos] =	0x02 | dp;
     d24:	a6 5d       	subi	r26, 0xD6	; 214
     d26:	be 4f       	sbci	r27, 0xFE	; 254
	}
	if (('a' <= c) && (c <= 'z')) {
		display[pos] =	pgm_read_byte(alphatable_p + c - 'a') | dp;
	} else if (('0' <= c) && (c <= '9')) {
		display[pos] =	pgm_read_byte(numbertable_p + c - '0') | dp;
	} else if (c == '-') {	
     d28:	8d 32       	cpi	r24, 0x2D	; 45
     d2a:	19 f4       	brne	.+6      	; 0xd32 <display_char+0x50>
		display[pos] =	0x02 | dp;
     d2c:	92 60       	ori	r25, 0x02	; 2
     d2e:	9c 93       	st	X, r25
     d30:	08 95       	ret
	} else {
		display[pos] = 0;			// spaces and other stuff are blanked :(
     d32:	1c 92       	st	X, r1
     d34:	08 95       	ret

00000d36 <display_Pstr>:
	}	
}

// Like display_str only argument is pointer to program memory
void display_Pstr(PGM_P s) 
{
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	ec 01       	movw	r28, r24
	char c;
	uint8_t i, limit = DISPLAYSIZE;
	
#if DEBUG
	uart_putchar ('{');
     d40:	8b e7       	ldi	r24, 0x7B	; 123
     d42:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
	uart_puts_P (s);
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 d5 12 	call	0x25aa	; 0x25aa <uart_puts_P>
	DEBUGP("}");
     d4c:	8e ef       	ldi	r24, 0xFE	; 254
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
#endif
	display_clear();
     d56:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>

// Like display_str only argument is pointer to program memory
void display_Pstr(PGM_P s) 
{
	char c;
	uint8_t i, limit = DISPLAYSIZE;
     d5a:	09 e0       	ldi	r16, 0x09	; 9
	uart_putchar ('{');
	uart_puts_P (s);
	DEBUGP("}");
#endif
	display_clear();
	for (i=1; i < limit; s++, i++) {
     d5c:	11 e0       	ldi	r17, 0x01	; 1
		c = pgm_read_byte (s);
     d5e:	fe 01       	movw	r30, r28
     d60:	84 91       	lpm	r24, Z
		if (c == 0) break;
     d62:	88 23       	and	r24, r24
     d64:	99 f0       	breq	.+38     	; 0xd8c <display_Pstr+0x56>
		if (c == '.') {
     d66:	8e 32       	cpi	r24, 0x2E	; 46
     d68:	51 f4       	brne	.+20     	; 0xd7e <display_Pstr+0x48>
			i--;				// Can't do easy look-ahead in pgmspace,
     d6a:	11 50       	subi	r17, 0x01	; 1
			display[i] |= 0x1;	//  so back up and add DP to display of previous char
     d6c:	e1 2f       	mov	r30, r17
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e6 5d       	subi	r30, 0xD6	; 214
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	80 83       	st	Z, r24
			limit++;
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <display_Pstr+0x4e>
		} else
			display_char (c, i);
     d7e:	61 2f       	mov	r22, r17
     d80:	0e 94 71 06 	call	0xce2	; 0xce2 <display_char>
	uart_putchar ('{');
	uart_puts_P (s);
	DEBUGP("}");
#endif
	display_clear();
	for (i=1; i < limit; s++, i++) {
     d84:	21 96       	adiw	r28, 0x01	; 1
     d86:	1f 5f       	subi	r17, 0xFF	; 255
     d88:	10 17       	cp	r17, r16
     d8a:	48 f3       	brcs	.-46     	; 0xd5e <display_Pstr+0x28>
			display[i] |= 0x1;	//  so back up and add DP to display of previous char
			limit++;
		} else
			display_char (c, i);
	}
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <set_dst>:

const char dst_on[] PROGMEM = " dst o.n. ";
const char dst_off[] PROGMEM = " dst o.f.f.";


void set_dst(void) {
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
	uint8_t mode = SHOW_MENU;
	uint8_t b;

	display_Pstr(PSTR("set dst"));
     da2:	8e eb       	ldi	r24, 0xBE	; 190
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	
	timeoutcounter = 5;
     daa:	85 e0       	ldi	r24, 0x05	; 5
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	90 93 41 01 	sts	0x0141, r25
     db2:	80 93 40 01 	sts	0x0140, r24
const char dst_on[] PROGMEM = " dst o.n. ";
const char dst_off[] PROGMEM = " dst o.f.f.";


void set_dst(void) {
	uint8_t mode = SHOW_MENU;
     db6:	c0 e0       	ldi	r28, 0x00	; 0
	timeoutcounter = 5;
	while (1) {
		kickthedog();
		b = buttons;
		if (b & 0x7) {
			timeoutcounter = 5;	
     db8:	65 e0       	ldi	r22, 0x05	; 5
     dba:	e6 2e       	mov	r14, r22
     dbc:	f1 2c       	mov	r15, r1
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_DST) {
				flags ^= _BV(f_dst_enable);
     dbe:	d8 e0       	ldi	r29, 0x08	; 8
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     dc0:	a8 95       	wdr
	display_Pstr(PSTR("set dst"));
	
	timeoutcounter = 5;
	while (1) {
		kickthedog();
		b = buttons;
     dc2:	00 91 3b 01 	lds	r16, 0x013B
		if (b & 0x7) {
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	c8 01       	movw	r24, r16
     dca:	87 70       	andi	r24, 0x07	; 7
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	29 f0       	breq	.+10     	; 0xddc <set_dst+0x46>
			timeoutcounter = 5;	
     dd2:	f0 92 41 01 	sts	0x0141, r15
     dd6:	e0 92 40 01 	sts	0x0140, r14
     dda:	09 c0       	rjmp	.+18     	; 0xdee <set_dst+0x58>
		} else if (!timeoutcounter) {	// timeout w/no buttons pressed after 3 seconds?
     ddc:	80 91 40 01 	lds	r24, 0x0140
     de0:	90 91 41 01 	lds	r25, 0x0141
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	19 f4       	brne	.+6      	; 0xdee <set_dst+0x58>
			set_flag(f_show_time);		 
     de8:	80 91 46 01 	lds	r24, 0x0146
     dec:	18 c0       	rjmp	.+48     	; 0xe1e <set_dst+0x88>
			break;
		}
		if (b & _BV(0)) { // mode change
     dee:	00 fd       	sbrc	r16, 0
     df0:	50 c0       	rjmp	.+160    	; 0xe92 <set_dst+0xfc>
			break;
		}
		if (b & _BV(1)) {
     df2:	01 ff       	sbrs	r16, 1
     df4:	18 c0       	rjmp	.+48     	; 0xe26 <set_dst+0x90>
			button_clear(1);
     df6:	80 91 3b 01 	lds	r24, 0x013B
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {	// first time through loop
				mode = SET_DST;
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e00:	80 91 46 01 	lds	r24, 0x0146
		if (b & _BV(0)) { // mode change
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {	// first time through loop
     e04:	cc 23       	and	r28, r28
     e06:	59 f4       	brne	.+22     	; 0xe1e <set_dst+0x88>
				mode = SET_DST;
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e08:	83 ff       	sbrs	r24, 3
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <set_dst+0x7c>
     e0c:	88 e7       	ldi	r24, 0x78	; 120
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <set_dst+0x80>
     e12:	8c e6       	ldi	r24, 0x6C	; 108
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {	// first time through loop
				mode = SET_DST;
     e1a:	cc e0       	ldi	r28, 0x0C	; 12
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <set_dst+0x90>
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
			} else {	
				set_flag(f_show_time);
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	80 93 46 01 	sts	0x0146, r24
				break;
     e24:	36 c0       	rjmp	.+108    	; 0xe92 <set_dst+0xfc>
			}
		}
		if (b & _BV(2)) {
     e26:	02 ff       	sbrs	r16, 2
     e28:	cb cf       	rjmp	.-106    	; 0xdc0 <set_dst+0x2a>
			button_clear(2);
     e2a:	80 91 3b 01 	lds	r24, 0x013B
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_DST) {
     e34:	cc 30       	cpi	r28, 0x0C	; 12
     e36:	21 f6       	brne	.-120    	; 0xdc0 <set_dst+0x2a>
				flags ^= _BV(f_dst_enable);
     e38:	80 91 46 01 	lds	r24, 0x0146
     e3c:	8d 27       	eor	r24, r29
     e3e:	80 93 46 01 	sts	0x0146, r24
				display_Pstr((flag(f_dst_enable)) ? dst_on : dst_off);
     e42:	80 91 46 01 	lds	r24, 0x0146
     e46:	83 ff       	sbrs	r24, 3
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <set_dst+0xba>
     e4a:	88 e7       	ldi	r24, 0x78	; 120
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <set_dst+0xbe>
     e50:	8c e6       	ldi	r24, 0x6C	; 108
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
				eeprom_write_byte((uint8_t *)EE_DST, flag(f_dst_enable));
     e58:	60 91 46 01 	lds	r22, 0x0146
     e5c:	68 70       	andi	r22, 0x08	; 8
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
				set_dst_offset (date_y, date_m, date_d, time_h);
     e66:	80 91 19 01 	lds	r24, 0x0119
     e6a:	60 91 3e 01 	lds	r22, 0x013E
     e6e:	40 91 29 01 	lds	r20, 0x0129
     e72:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
     e76:	0e 94 3b 04 	call	0x876	; 0x876 <dst>
     e7a:	88 23       	and	r24, r24
     e7c:	21 f0       	breq	.+8      	; 0xe86 <set_dst+0xf0>
		set_flag (f_dst_offset);
     e7e:	80 91 46 01 	lds	r24, 0x0146
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <set_dst+0xf6>
	else
		clr_flag (f_dst_offset);
     e86:	80 91 46 01 	lds	r24, 0x0146
     e8a:	8e 7f       	andi	r24, 0xFE	; 254
     e8c:	80 93 46 01 	sts	0x0146, r24
     e90:	97 cf       	rjmp	.-210    	; 0xdc0 <set_dst+0x2a>
				eeprom_write_byte((uint8_t *)EE_DST, flag(f_dst_enable));
				set_dst_offset (date_y, date_m, date_d, time_h);
			}
		}
	}
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	08 95       	ret

00000ea0 <set_region>:


const char region1[] PROGMEM = "usa-12hr";
const char region2[] PROGMEM = "eur-24hr";

void set_region(void) {
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
	uint8_t mode = SHOW_MENU;
	uint8_t b;

	display_Pstr(PSTR("set rgn "));
     ea8:	85 eb       	ldi	r24, 0xB5	; 181
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	
	timeoutcounter = 5;	
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	90 93 41 01 	sts	0x0141, r25
     eb8:	80 93 40 01 	sts	0x0140, r24
	region = eeprom_read_byte((uint8_t *)EE_REGION);
     ebc:	8b e0       	ldi	r24, 0x0B	; 11
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
     ec4:	80 93 14 01 	sts	0x0114, r24

const char region1[] PROGMEM = "usa-12hr";
const char region2[] PROGMEM = "eur-24hr";

void set_region(void) {
	uint8_t mode = SHOW_MENU;
     ec8:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;	
     eca:	c5 e0       	ldi	r28, 0x05	; 5
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <set_region+0x32>
				break;
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_REG) {
     ed0:	10 e0       	ldi	r17, 0x00	; 0
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     ed2:	a8 95       	wdr
	timeoutcounter = 5;	
	region = eeprom_read_byte((uint8_t *)EE_REGION);

	while (1) {
		kickthedog();
		b = buttons;
     ed4:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
     ed8:	80 91 3b 01 	lds	r24, 0x013B
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	87 70       	andi	r24, 0x07	; 7
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	29 f0       	breq	.+10     	; 0xef0 <set_region+0x50>
			timeoutcounter = 5;	
     ee6:	d0 93 41 01 	sts	0x0141, r29
     eea:	c0 93 40 01 	sts	0x0140, r28
     eee:	06 c0       	rjmp	.+12     	; 0xefc <set_region+0x5c>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
     ef0:	80 91 40 01 	lds	r24, 0x0140
     ef4:	90 91 41 01 	lds	r25, 0x0141
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	c1 f0       	breq	.+48     	; 0xf2c <set_region+0x8c>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // mode change
     efc:	00 fd       	sbrc	r16, 0
     efe:	3c c0       	rjmp	.+120    	; 0xf78 <set_region+0xd8>
			// button_clear(0); leave it to trigger main loop
			break;
		}
		if (b & _BV(1)) {
     f00:	01 ff       	sbrs	r16, 1
     f02:	1a c0       	rjmp	.+52     	; 0xf38 <set_region+0x98>
			button_clear(1);
     f04:	80 91 3b 01 	lds	r24, 0x013B
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
     f0e:	11 23       	and	r17, r17
     f10:	69 f4       	brne	.+26     	; 0xf2c <set_region+0x8c>
				// start!
				mode = SET_REG;
				// display region
				if (region == REGION_US) {
     f12:	80 91 14 01 	lds	r24, 0x0114
     f16:	88 23       	and	r24, r24
     f18:	19 f4       	brne	.+6      	; 0xf20 <set_region+0x80>
					display_Pstr(region1);
     f1a:	8c e8       	ldi	r24, 0x8C	; 140
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <set_region+0x84>
				} else {
					display_Pstr(region2);
     f20:	83 e8       	ldi	r24, 0x83	; 131
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_REG;
     f28:	11 e0       	ldi	r17, 0x01	; 1
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <set_region+0x98>
					display_Pstr(region1);
				} else {
					display_Pstr(region2);
				}
			} else {	
				set_flag(f_show_time);
     f2c:	80 91 46 01 	lds	r24, 0x0146
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	80 93 46 01 	sts	0x0146, r24
				break;
     f36:	20 c0       	rjmp	.+64     	; 0xf78 <set_region+0xd8>
			}
		}
		if (b & _BV(2)) {
     f38:	02 ff       	sbrs	r16, 2
     f3a:	cb cf       	rjmp	.-106    	; 0xed2 <set_region+0x32>
			button_clear(2);
     f3c:	80 91 3b 01 	lds	r24, 0x013B
     f40:	8b 7f       	andi	r24, 0xFB	; 251
     f42:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_REG) {
     f46:	11 30       	cpi	r17, 0x01	; 1
     f48:	19 f6       	brne	.-122    	; 0xed0 <set_region+0x30>
				region = !region;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 91 14 01 	lds	r25, 0x0114
     f50:	91 11       	cpse	r25, r1
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	80 93 14 01 	sts	0x0114, r24
				if (region == REGION_US) {
     f58:	88 23       	and	r24, r24
     f5a:	19 f4       	brne	.+6      	; 0xf62 <set_region+0xc2>
					display_Pstr(region1);
     f5c:	8c e8       	ldi	r24, 0x8C	; 140
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <set_region+0xc6>
				} else {
					display_Pstr(region2);
     f62:	83 e8       	ldi	r24, 0x83	; 131
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
				}
				eeprom_write_byte((uint8_t *)EE_REGION, region);
     f6a:	8b e0       	ldi	r24, 0x0B	; 11
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	60 91 14 01 	lds	r22, 0x0114
     f72:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
     f76:	ad cf       	rjmp	.-166    	; 0xed2 <set_region+0x32>
			}
		}
	}
}
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <set_time>:
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
}

void set_time(void) 
{
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <set_time+0x1a>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <set_time+0x1c>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode;
	uint8_t hour, min, sec;
	uint8_t b;
		
	display_Pstr(PSTR("set time"));
     fa2:	83 e8       	ldi	r24, 0x83	; 131
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>

	hour = time_h;
     faa:	f0 90 15 01 	lds	r15, 0x0115
	min = time_m;
     fae:	00 91 35 01 	lds	r16, 0x0135
	sec = time_s;
     fb2:	10 91 42 01 	lds	r17, 0x0142
	mode = SHOW_MENU;

	timeoutcounter = 5;
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	90 93 41 01 	sts	0x0141, r25
     fbe:	80 93 40 01 	sts	0x0140, r24
	brepeat |= _BV(2);
     fc2:	80 91 3f 01 	lds	r24, 0x013F
     fc6:	84 60       	ori	r24, 0x04	; 4
     fc8:	80 93 3f 01 	sts	0x013F, r24
	display_Pstr(PSTR("set time"));

	hour = time_h;
	min = time_m;
	sec = time_s;
	mode = SHOW_MENU;
     fcc:	20 e0       	ldi	r18, 0x00	; 0
		b = buttons;
		if (b & _BV(0)) { // mode change
			break;
		}
		if (buttons & 0x7) {
			timeoutcounter = 45;	
     fce:	7d e2       	ldi	r23, 0x2D	; 45
     fd0:	a7 2e       	mov	r10, r23
     fd2:	b1 2c       	mov	r11, r1
				display[4] |= 0x1;
				display[5] |= 0x1;
				time_m = min;
			}
			if ((mode == SET_SEC) ) {
				sec = (sec+1) % 60;
     fd4:	ec e3       	ldi	r30, 0x3C	; 60
     fd6:	ce 2e       	mov	r12, r30
     fd8:	d1 2c       	mov	r13, r1
		}
		if (b & _BV(2)) {
			button_clear(2);
			
			if (mode == SET_HOUR) {
				hour = (hour+1) % 24;
     fda:	f8 e1       	ldi	r31, 0x18	; 24
     fdc:	8f 2e       	mov	r8, r31
     fde:	91 2c       	mov	r9, r1
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
     fe0:	a8 95       	wdr
	timeoutcounter = 5;
	brepeat |= _BV(2);
	
	while (1) {
		kickthedog();
		b = buttons;
     fe2:	e0 90 3b 01 	lds	r14, 0x013B
		if (b & _BV(0)) { // mode change
     fe6:	e0 fc       	sbrc	r14, 0
     fe8:	06 c1       	rjmp	.+524    	; 0x11f6 <set_time+0x274>
			break;
		}
		if (buttons & 0x7) {
     fea:	80 91 3b 01 	lds	r24, 0x013B
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	87 70       	andi	r24, 0x07	; 7
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	29 f0       	breq	.+10     	; 0x1002 <set_time+0x80>
			timeoutcounter = 45;	
     ff8:	b0 92 41 01 	sts	0x0141, r11
     ffc:	a0 92 40 01 	sts	0x0140, r10
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <set_time+0x8e>
			// longer timeout since user may be weaiting for clock sync
		} else if (!timeoutcounter) {
    1002:	80 91 40 01 	lds	r24, 0x0140
    1006:	90 91 41 01 	lds	r25, 0x0141
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	09 f4       	brne	.+2      	; 0x1010 <set_time+0x8e>
    100e:	8e c0       	rjmp	.+284    	; 0x112c <set_time+0x1aa>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(1)) {
    1010:	e1 fe       	sbrs	r14, 1
    1012:	92 c0       	rjmp	.+292    	; 0x1138 <set_time+0x1b6>
			button_clear(1);
    1014:	80 91 3b 01 	lds	r24, 0x013B
    1018:	8d 7f       	andi	r24, 0xFD	; 253
    101a:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    101e:	22 23       	and	r18, r18
    1020:	b9 f4       	brne	.+46     	; 0x1050 <set_time+0xce>
				hour = time_h;
    1022:	f0 90 15 01 	lds	r15, 0x0115
				min = time_m;
    1026:	00 91 35 01 	lds	r16, 0x0135
				sec = time_s;
    102a:	10 91 42 01 	lds	r17, 0x0142

				// ok now its selected
				mode = SET_HOUR;
				display_time(hour, min, sec);
    102e:	8f 2d       	mov	r24, r15
    1030:	60 2f       	mov	r22, r16
    1032:	41 2f       	mov	r20, r17
    1034:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[1] |= 0x1;
    1038:	80 91 2b 01 	lds	r24, 0x012B
    103c:	81 60       	ori	r24, 0x01	; 1
    103e:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;	
    1042:	80 91 2c 01 	lds	r24, 0x012C
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	80 93 2c 01 	sts	0x012C, r24
				hour = time_h;
				min = time_m;
				sec = time_s;

				// ok now its selected
				mode = SET_HOUR;
    104c:	21 e0       	ldi	r18, 0x01	; 1
    104e:	74 c0       	rjmp	.+232    	; 0x1138 <set_time+0x1b6>
				display_time(hour, min, sec);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
    1050:	21 30       	cpi	r18, 0x01	; 1
    1052:	89 f4       	brne	.+34     	; 0x1076 <set_time+0xf4>
				mode = SET_MIN;
				display_time(hour, min, sec);
    1054:	8f 2d       	mov	r24, r15
    1056:	60 2f       	mov	r22, r16
    1058:	41 2f       	mov	r20, r17
    105a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[4] |= 0x1;
    105e:	80 91 2e 01 	lds	r24, 0x012E
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    1068:	80 91 2f 01 	lds	r24, 0x012F
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	80 93 2f 01 	sts	0x012F, r24
				mode = SET_HOUR;
				display_time(hour, min, sec);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
				mode = SET_MIN;
    1072:	22 e0       	ldi	r18, 0x02	; 2
    1074:	61 c0       	rjmp	.+194    	; 0x1138 <set_time+0x1b6>
				display_time(hour, min, sec);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (mode == SET_MIN) {
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	11 f0       	breq	.+4      	; 0x107e <set_time+0xfc>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <set_time+0x11e>
				mode = SET_SEC;
				display_time(hour, min, sec);
    107e:	8f 2d       	mov	r24, r15
    1080:	60 2f       	mov	r22, r16
    1082:	41 2f       	mov	r20, r17
    1084:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[7] |= 0x1;
    1088:	80 91 31 01 	lds	r24, 0x0131
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    1092:	80 91 32 01 	lds	r24, 0x0132
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 93 32 01 	sts	0x0132, r24
				mode = SET_MIN;
				display_time(hour, min, sec);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (mode == SET_MIN) {
				mode = SET_SEC;
    109c:	23 e0       	ldi	r18, 0x03	; 3
    109e:	4c c0       	rjmp	.+152    	; 0x1138 <set_time+0x1b6>
uint8_t bcd2b (uint8_t bcd) {
	//return (bcd & 0x0f) + (bcd >> 4) * 10;
	return (((bcd >> 4) & 0x0f) * 10) + (bcd & 0x0f);
}

void set_time(void) 
    10a0:	62 2f       	mov	r22, r18
    10a2:	69 5f       	subi	r22, 0xF9	; 249
				// done!
				uint8_t dt[3];
				uint8_t i;
				
				for (i = 0; i < 7; i++)
					twiWriteReg(0xd0, 0x07+i, i+1);		// Write check values into alarm fields
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	80 ed       	ldi	r24, 0xD0	; 208
    10a8:	42 2f       	mov	r20, r18
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	0e 94 5d 11 	call	0x22ba	; 0x22ba <twiWriteReg>
			} else {
				// done!
				uint8_t dt[3];
				uint8_t i;
				
				for (i = 0; i < 7; i++)
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	27 30       	cpi	r18, 0x07	; 7
    10b4:	a9 f7       	brne	.-22     	; 0x10a0 <set_time+0x11e>
					twiWriteReg(0xd0, 0x07+i, i+1);		// Write check values into alarm fields
				
				time_h = hour;
    10b6:	f0 92 15 01 	sts	0x0115, r15
				time_m = min;
    10ba:	00 93 35 01 	sts	0x0135, r16
				time_s = sec;
    10be:	10 93 42 01 	sts	0x0142, r17
				
				TCNT2 = 0;		// Sync AVR to start of seconds
    10c2:	10 92 b2 00 	sts	0x00B2, r1
				
				// Update ChronoDot
				dt[0] = b2bcd(sec);
    10c6:	81 2f       	mov	r24, r17
    10c8:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    10cc:	89 83       	std	Y+1, r24	; 0x01
				dt[1] = b2bcd(min);
    10ce:	80 2f       	mov	r24, r16
    10d0:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    10d4:	8a 83       	std	Y+2, r24	; 0x02
				dt[2] = b2bcd(hour);
    10d6:	8f 2d       	mov	r24, r15
    10d8:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    10dc:	8b 83       	std	Y+3, r24	; 0x03
				twiWriteRegN(0xd0, 0x00, 3, dt);
    10de:	80 ed       	ldi	r24, 0xD0	; 208
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	43 e0       	ldi	r20, 0x03	; 3
    10e4:	9e 01       	movw	r18, r28
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	0e 94 8e 11 	call	0x231c	; 0x231c <twiWriteRegN>
				
				set_dst_offset (date_y, date_m, date_d, time_h);
    10ee:	80 91 19 01 	lds	r24, 0x0119
    10f2:	60 91 3e 01 	lds	r22, 0x013E
    10f6:	40 91 29 01 	lds	r20, 0x0129
    10fa:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
    10fe:	0e 94 3b 04 	call	0x876	; 0x876 <dst>
    1102:	88 23       	and	r24, r24
    1104:	21 f0       	breq	.+8      	; 0x110e <set_time+0x18c>
		set_flag (f_dst_offset);
    1106:	80 91 46 01 	lds	r24, 0x0146
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <set_time+0x192>
	else
		clr_flag (f_dst_offset);
    110e:	80 91 46 01 	lds	r24, 0x0146
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	80 93 46 01 	sts	0x0146, r24
				dt[1] = b2bcd(min);
				dt[2] = b2bcd(hour);
				twiWriteRegN(0xd0, 0x00, 3, dt);
				
				set_dst_offset (date_y, date_m, date_d, time_h);
				clr_flag(f_timeunknown);
    1118:	80 91 46 01 	lds	r24, 0x0146
    111c:	8d 7f       	andi	r24, 0xFD	; 253
    111e:	80 93 46 01 	sts	0x0146, r24
				DEBUGP ("ChronoDot set!");
    1122:	8c e8       	ldi	r24, 0x8C	; 140
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
				
				set_flag(f_show_time);
    112c:	80 91 46 01 	lds	r24, 0x0146
    1130:	80 68       	ori	r24, 0x80	; 128
    1132:	80 93 46 01 	sts	0x0146, r24
				break;
    1136:	5f c0       	rjmp	.+190    	; 0x11f6 <set_time+0x274>
			}
		}
		if (b & _BV(2)) {
    1138:	e2 fe       	sbrs	r14, 2
    113a:	52 cf       	rjmp	.-348    	; 0xfe0 <set_time+0x5e>
			button_clear(2);
    113c:	80 91 3b 01 	lds	r24, 0x013B
    1140:	8b 7f       	andi	r24, 0xFB	; 251
    1142:	80 93 3b 01 	sts	0x013B, r24
			
			if (mode == SET_HOUR) {
    1146:	21 30       	cpi	r18, 0x01	; 1
    1148:	d1 f4       	brne	.+52     	; 0x117e <set_time+0x1fc>
				hour = (hour+1) % 24;
    114a:	8f 2d       	mov	r24, r15
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	b4 01       	movw	r22, r8
    1152:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    1156:	e8 2e       	mov	r14, r24
    1158:	f8 2e       	mov	r15, r24
				display_time(hour, min, sec);
    115a:	60 2f       	mov	r22, r16
    115c:	41 2f       	mov	r20, r17
    115e:	2c 83       	std	Y+4, r18	; 0x04
    1160:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[1] |= 0x1;
    1164:	80 91 2b 01 	lds	r24, 0x012B
    1168:	81 60       	ori	r24, 0x01	; 1
    116a:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    116e:	80 91 2c 01 	lds	r24, 0x012C
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	80 93 2c 01 	sts	0x012C, r24
				time_h = hour;
    1178:	e0 92 15 01 	sts	0x0115, r14
    117c:	3a c0       	rjmp	.+116    	; 0x11f2 <set_time+0x270>
			}
			if (mode == SET_MIN) {
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	d9 f4       	brne	.+54     	; 0x11b8 <set_time+0x236>
				min = (min+1) % 60;
    1182:	80 2f       	mov	r24, r16
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	b6 01       	movw	r22, r12
    118a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    118e:	e8 2e       	mov	r14, r24
    1190:	08 2f       	mov	r16, r24
				display_time(hour, min, sec);
    1192:	8f 2d       	mov	r24, r15
    1194:	6e 2d       	mov	r22, r14
    1196:	41 2f       	mov	r20, r17
    1198:	2c 83       	std	Y+4, r18	; 0x04
    119a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[4] |= 0x1;
    119e:	80 91 2e 01 	lds	r24, 0x012E
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    11a8:	80 91 2f 01 	lds	r24, 0x012F
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	80 93 2f 01 	sts	0x012F, r24
				time_m = min;
    11b2:	e0 92 35 01 	sts	0x0135, r14
    11b6:	1d c0       	rjmp	.+58     	; 0x11f2 <set_time+0x270>
			}
			if ((mode == SET_SEC) ) {
    11b8:	23 30       	cpi	r18, 0x03	; 3
    11ba:	09 f0       	breq	.+2      	; 0x11be <set_time+0x23c>
    11bc:	11 cf       	rjmp	.-478    	; 0xfe0 <set_time+0x5e>
				sec = (sec+1) % 60;
    11be:	81 2f       	mov	r24, r17
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	b6 01       	movw	r22, r12
    11c6:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    11ca:	e8 2e       	mov	r14, r24
    11cc:	18 2f       	mov	r17, r24
				display_time(hour, min, sec);
    11ce:	8f 2d       	mov	r24, r15
    11d0:	60 2f       	mov	r22, r16
    11d2:	4e 2d       	mov	r20, r14
    11d4:	2c 83       	std	Y+4, r18	; 0x04
    11d6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>
				display[7] |= 0x1;
    11da:	80 91 31 01 	lds	r24, 0x0131
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    11e4:	80 91 32 01 	lds	r24, 0x0132
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 93 32 01 	sts	0x0132, r24
				time_s = sec;
    11ee:	e0 92 42 01 	sts	0x0142, r14
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	f5 ce       	rjmp	.-534    	; 0xfe0 <set_time+0x5e>
			}
		}
	}
	brepeat &= ~_BV(2);
    11f6:	80 91 3f 01 	lds	r24, 0x013F
    11fa:	8b 7f       	andi	r24, 0xFB	; 251
    11fc:	80 93 3f 01 	sts	0x013F, r24
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	08 95       	ret

00001222 <setsnooze>:
// When the alarm is going off, pressing a button turns on snooze mode
// this sets the snoozetimer off in MAXSNOOZE seconds - which turns on
// the alarm again
void setsnooze(void)
{
	snoozetimer = MAXSNOOZE;
    1222:	88 e5       	ldi	r24, 0x58	; 88
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	90 93 44 01 	sts	0x0144, r25
    122a:	80 93 43 01 	sts	0x0143, r24
	DEBUGP("snooze");
    122e:	8a ef       	ldi	r24, 0xFA	; 250
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	display_Pstr(PSTR("snoozing"));
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	clr_flag (f_show_time);
    1240:	80 91 46 01 	lds	r24, 0x0146
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	80 93 46 01 	sts	0x0146, r24
	delayms(1000);
    124a:	88 ee       	ldi	r24, 0xE8	; 232
    124c:	93 e0       	ldi	r25, 0x03	; 3
    124e:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
	set_flag (f_show_time);
    1252:	80 91 46 01 	lds	r24, 0x0146
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 93 46 01 	sts	0x0146, r24
}
    125c:	08 95       	ret

0000125e <display_str>:
	display_str (d);
}

// display words (menus, prompts, etc)
void display_str(char *s) 
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
	uint8_t i, limit = DISPLAYSIZE;
	
#if DEBUG
	uart_putchar('[');
    1268:	8b e5       	ldi	r24, 0x5B	; 91
    126a:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
	uart_puts(s);
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 c9 12 	call	0x2592	; 0x2592 <uart_puts>
	DEBUGP("]");
    1274:	8c ef       	ldi	r24, 0xFC	; 252
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
}

// display words (menus, prompts, etc)
void display_str(char *s) 
{
	uint8_t i, limit = DISPLAYSIZE;
    127e:	09 e0       	ldi	r16, 0x09	; 9
	uart_puts(s);
	DEBUGP("]");
#endif

	// up to 8 characters
	for (i = 1; *s && i < limit; s++, i++) {
    1280:	11 e0       	ldi	r17, 0x01	; 1
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <display_str+0x44>
		if (*(s+1) == '.') {
    1284:	99 81       	ldd	r25, Y+1	; 0x01
    1286:	9e 32       	cpi	r25, 0x2E	; 46
    1288:	39 f4       	brne	.+14     	; 0x1298 <display_str+0x3a>
			// Period follows: add decimal point to this character
			display_char (*s++ | 0x80, i);
    128a:	21 96       	adiw	r28, 0x01	; 1
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	61 2f       	mov	r22, r17
    1290:	0e 94 71 06 	call	0xce2	; 0xce2 <display_char>
			limit++;
    1294:	0f 5f       	subi	r16, 0xFF	; 255
    1296:	03 c0       	rjmp	.+6      	; 0x129e <display_str+0x40>
		} else
			display_char (*s, i);
    1298:	61 2f       	mov	r22, r17
    129a:	0e 94 71 06 	call	0xce2	; 0xce2 <display_char>
	uart_puts(s);
	DEBUGP("]");
#endif

	// up to 8 characters
	for (i = 1; *s && i < limit; s++, i++) {
    129e:	21 96       	adiw	r28, 0x01	; 1
    12a0:	1f 5f       	subi	r17, 0xFF	; 255
    12a2:	88 81       	ld	r24, Y
    12a4:	88 23       	and	r24, r24
    12a6:	11 f0       	breq	.+4      	; 0x12ac <display_str+0x4e>
    12a8:	10 17       	cp	r17, r16
    12aa:	60 f3       	brcs	.-40     	; 0x1284 <display_str+0x26>
			display_char (*s++ | 0x80, i);
			limit++;
		} else
			display_char (*s, i);
	}	
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <display_temp>:
}

const char temp_fmt[] PROGMEM = " %3d.%d%c";

void display_temp(void) 
{
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	2b 97       	sbiw	r28, 0x0b	; 11
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
	char c, d[DISPLAYSIZE];
	uint8_t dt[2];
	uint16_t t;
	
	twiReadRegN (0xd0, 0x11, 2, dt);	// Read temperature from ChronoDot
    12ce:	80 ed       	ldi	r24, 0xD0	; 208
    12d0:	61 e1       	ldi	r22, 0x11	; 17
    12d2:	42 e0       	ldi	r20, 0x02	; 2
    12d4:	9e 01       	movw	r18, r28
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	0e 94 08 12 	call	0x2410	; 0x2410 <twiReadRegN>
	t = ((dt[0] << 8) | dt[1]) >> 6;	// in degrees C/4
    12de:	99 81       	ldd	r25, Y+1	; 0x01
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0a 81       	ldd	r16, Y+2	; 0x02
    12e4:	10 e0       	ldi	r17, 0x00	; 0
    12e6:	08 2b       	or	r16, r24
    12e8:	19 2b       	or	r17, r25
    12ea:	a6 e0       	ldi	r26, 0x06	; 6
    12ec:	15 95       	asr	r17
    12ee:	07 95       	ror	r16
    12f0:	aa 95       	dec	r26
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <display_temp+0x36>

	display_clear ();
    12f4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>
	//if (region == REGION_US) {
		t = t * 9/5 + (32 << 2);		// convert to degrees F/4
    12f8:	c8 01       	movw	r24, r16
    12fa:	b3 e0       	ldi	r27, 0x03	; 3
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	ba 95       	dec	r27
    1302:	e1 f7       	brne	.-8      	; 0x12fc <display_temp+0x46>
    1304:	80 0f       	add	r24, r16
    1306:	91 1f       	adc	r25, r17
    1308:	65 e0       	ldi	r22, 0x05	; 5
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
    1310:	60 58       	subi	r22, 0x80	; 128
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
	/*
	} else {
		c = 'c';
	}
	*/
	sprintf_P (d, temp_fmt, t/4, (t % 4)*10/4, c);
    1314:	8d b7       	in	r24, 0x3d	; 61
    1316:	9e b7       	in	r25, 0x3e	; 62
    1318:	0a 97       	sbiw	r24, 0x0a	; 10
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	9e bf       	out	0x3e, r25	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	8d bf       	out	0x3d, r24	; 61
    1324:	ed b7       	in	r30, 0x3d	; 61
    1326:	fe b7       	in	r31, 0x3e	; 62
    1328:	31 96       	adiw	r30, 0x01	; 1
    132a:	8e 01       	movw	r16, r28
    132c:	0d 5f       	subi	r16, 0xFD	; 253
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	ad b7       	in	r26, 0x3d	; 61
    1332:	be b7       	in	r27, 0x3e	; 62
    1334:	12 96       	adiw	r26, 0x02	; 2
    1336:	1c 93       	st	X, r17
    1338:	0e 93       	st	-X, r16
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	88 e6       	ldi	r24, 0x68	; 104
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	93 83       	std	Z+3, r25	; 0x03
    1342:	82 83       	std	Z+2, r24	; 0x02
    1344:	cb 01       	movw	r24, r22
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	96 95       	lsr	r25
    134c:	87 95       	ror	r24
    134e:	95 83       	std	Z+5, r25	; 0x05
    1350:	84 83       	std	Z+4, r24	; 0x04
    1352:	63 70       	andi	r22, 0x03	; 3
    1354:	70 70       	andi	r23, 0x00	; 0
    1356:	cb 01       	movw	r24, r22
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	43 e0       	ldi	r20, 0x03	; 3
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	4a 95       	dec	r20
    1364:	e1 f7       	brne	.-8      	; 0x135e <display_temp+0xa8>
    1366:	86 0f       	add	r24, r22
    1368:	97 1f       	adc	r25, r23
    136a:	96 95       	lsr	r25
    136c:	87 95       	ror	r24
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	97 83       	std	Z+7, r25	; 0x07
    1374:	86 83       	std	Z+6, r24	; 0x06
    1376:	86 e6       	ldi	r24, 0x66	; 102
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	91 87       	std	Z+9, r25	; 0x09
    137c:	80 87       	std	Z+8, r24	; 0x08
    137e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
	display_str (d);
    1382:	8d b7       	in	r24, 0x3d	; 61
    1384:	9e b7       	in	r25, 0x3e	; 62
    1386:	0a 96       	adiw	r24, 0x0a	; 10
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	9e bf       	out	0x3e, r25	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	8d bf       	out	0x3d, r24	; 61
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
}
    1398:	2b 96       	adiw	r28, 0x0b	; 11
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <display_alarm>:
const char alarm_fmt1[] PROGMEM = "%2d:%02d %cm";
const char alarm_fmt2[] PROGMEM = "%02d:%02d";

// Kinda like display_time but just hours and minutes
void display_alarm(uint8_t h, uint8_t m)
{ 
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	2a 97       	sbiw	r28, 0x0a	; 10
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	16 2f       	mov	r17, r22
	char c, d[DISPLAYSIZE];

	display_clear();
    13c6:	8a 87       	std	Y+10, r24	; 0x0a
    13c8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>

	// check euro or US style time
	if (region == REGION_US) {
    13cc:	90 91 14 01 	lds	r25, 0x0114
    13d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d2:	99 23       	and	r25, r25
    13d4:	91 f5       	brne	.+100    	; 0x143a <display_alarm+0x8c>
		c = (h >= 12) ? 'p' : 'a';
    13d6:	8c 30       	cpi	r24, 0x0C	; 12
    13d8:	10 f0       	brcs	.+4      	; 0x13de <display_alarm+0x30>
    13da:	20 e7       	ldi	r18, 0x70	; 112
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <display_alarm+0x32>
    13de:	21 e6       	ldi	r18, 0x61	; 97
		h = (h+11)%12+1;
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0b 96       	adiw	r24, 0x0b	; 11
    13e4:	6c e0       	ldi	r22, 0x0C	; 12
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
		sprintf_P (d, alarm_fmt1, h, m, c);
    13ec:	4d b7       	in	r20, 0x3d	; 61
    13ee:	5e b7       	in	r21, 0x3e	; 62
    13f0:	4a 50       	subi	r20, 0x0A	; 10
    13f2:	50 40       	sbci	r21, 0x00	; 0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	5e bf       	out	0x3e, r21	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	4d bf       	out	0x3d, r20	; 61
    13fe:	ed b7       	in	r30, 0x3d	; 61
    1400:	fe b7       	in	r31, 0x3e	; 62
    1402:	31 96       	adiw	r30, 0x01	; 1
    1404:	ae 01       	movw	r20, r28
    1406:	4f 5f       	subi	r20, 0xFF	; 255
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	ad b7       	in	r26, 0x3d	; 61
    140c:	be b7       	in	r27, 0x3e	; 62
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	5c 93       	st	X, r21
    1412:	4e 93       	st	-X, r20
    1414:	11 97       	sbiw	r26, 0x01	; 1
    1416:	4c e7       	ldi	r20, 0x7C	; 124
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	53 83       	std	Z+3, r21	; 0x03
    141c:	42 83       	std	Z+2, r20	; 0x02
	display_clear();

	// check euro or US style time
	if (region == REGION_US) {
		c = (h >= 12) ? 'p' : 'a';
		h = (h+11)%12+1;
    141e:	8f 5f       	subi	r24, 0xFF	; 255
		sprintf_P (d, alarm_fmt1, h, m, c);
    1420:	84 83       	std	Z+4, r24	; 0x04
    1422:	15 82       	std	Z+5, r1	; 0x05
    1424:	16 83       	std	Z+6, r17	; 0x06
    1426:	17 82       	std	Z+7, r1	; 0x07
    1428:	20 87       	std	Z+8, r18	; 0x08
    142a:	11 86       	std	Z+9, r1	; 0x09
    142c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
    1430:	2d b7       	in	r18, 0x3d	; 61
    1432:	3e b7       	in	r19, 0x3e	; 62
    1434:	26 5f       	subi	r18, 0xF6	; 246
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	23 c0       	rjmp	.+70     	; 0x1480 <display_alarm+0xd2>
	} else
		sprintf_P (d, alarm_fmt2, h, m);
    143a:	4d b7       	in	r20, 0x3d	; 61
    143c:	5e b7       	in	r21, 0x3e	; 62
    143e:	48 50       	subi	r20, 0x08	; 8
    1440:	50 40       	sbci	r21, 0x00	; 0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	5e bf       	out	0x3e, r21	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	4d bf       	out	0x3d, r20	; 61
    144c:	ed b7       	in	r30, 0x3d	; 61
    144e:	fe b7       	in	r31, 0x3e	; 62
    1450:	31 96       	adiw	r30, 0x01	; 1
    1452:	9e 01       	movw	r18, r28
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	ad b7       	in	r26, 0x3d	; 61
    145a:	be b7       	in	r27, 0x3e	; 62
    145c:	12 96       	adiw	r26, 0x02	; 2
    145e:	3c 93       	st	X, r19
    1460:	2e 93       	st	-X, r18
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	22 e7       	ldi	r18, 0x72	; 114
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	33 83       	std	Z+3, r19	; 0x03
    146a:	22 83       	std	Z+2, r18	; 0x02
    146c:	84 83       	std	Z+4, r24	; 0x04
    146e:	15 82       	std	Z+5, r1	; 0x05
    1470:	16 83       	std	Z+6, r17	; 0x06
    1472:	17 82       	std	Z+7, r1	; 0x07
    1474:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
    1478:	2d b7       	in	r18, 0x3d	; 61
    147a:	3e b7       	in	r19, 0x3e	; 62
    147c:	28 5f       	subi	r18, 0xF8	; 248
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	3e bf       	out	0x3e, r19	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	2d bf       	out	0x3d, r18	; 61
	display_str (d);
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
}
    1492:	2a 96       	adiw	r28, 0x0a	; 10
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	08 95       	ret

000014a6 <setalarmstate>:
}

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(uint8_t on) {
	if (on) { 
    14a6:	88 23       	and	r24, r24
    14a8:	51 f1       	breq	.+84     	; 0x14fe <setalarmstate+0x58>
		// Don't display the alarm/beep if we already have
		if	(!flag(f_alarm_on)) {
    14aa:	80 91 46 01 	lds	r24, 0x0146
    14ae:	86 fd       	sbrc	r24, 6
    14b0:	46 c0       	rjmp	.+140    	; 0x153e <setalarmstate+0x98>
			set_flag (f_alarm_on);						// alarm on!
    14b2:	80 91 46 01 	lds	r24, 0x0146
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	80 93 46 01 	sts	0x0146, r24
			snoozetimer = 0;					// reset snoozing
    14bc:	10 92 44 01 	sts	0x0144, r1
    14c0:	10 92 43 01 	sts	0x0143, r1
			display_Pstr(PSTR("alarm on"));			// show the status on the VFD tube
    14c4:	81 ef       	ldi	r24, 0xF1	; 241
    14c6:	92 e0       	ldi	r25, 0x02	; 2
    14c8:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
			clr_flag(f_show_time);			// its not actually SHOW_SNOOZE but just anything but SHOW_TIME
    14cc:	80 91 46 01 	lds	r24, 0x0146
    14d0:	8f 77       	andi	r24, 0x7F	; 127
    14d2:	80 93 46 01 	sts	0x0146, r24
			delayms(1000);
    14d6:	88 ee       	ldi	r24, 0xE8	; 232
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			display_alarm(alarm_h, alarm_m);	// show the current alarm time set
    14de:	80 91 38 01 	lds	r24, 0x0138
    14e2:	60 91 1a 01 	lds	r22, 0x011A
    14e6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <display_alarm>
			delayms(1000);
    14ea:	88 ee       	ldi	r24, 0xE8	; 232
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			set_flag(f_show_time);
    14f2:	80 91 46 01 	lds	r24, 0x0146
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	80 93 46 01 	sts	0x0146, r24
    14fc:	08 95       	ret
		}
	} else {
		if (flag(f_alarm_on)) {
    14fe:	80 91 46 01 	lds	r24, 0x0146
    1502:	86 ff       	sbrs	r24, 6
    1504:	1c c0       	rjmp	.+56     	; 0x153e <setalarmstate+0x98>
			clr_flag (f_alarm_on);	// turn off the alarm
    1506:	80 91 46 01 	lds	r24, 0x0146
    150a:	8f 7b       	andi	r24, 0xBF	; 191
    150c:	80 93 46 01 	sts	0x0146, r24
			snoozetimer = 0;
    1510:	10 92 44 01 	sts	0x0144, r1
    1514:	10 92 43 01 	sts	0x0143, r1
			if (alarming) {
    1518:	80 91 3a 01 	lds	r24, 0x013A
    151c:	88 23       	and	r24, r24
    151e:	79 f0       	breq	.+30     	; 0x153e <setalarmstate+0x98>
				// if the alarm is going off, we should turn it off and quiet the speaker
				DEBUGP("alarm off");
    1520:	87 ee       	ldi	r24, 0xE7	; 231
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
				alarming = 0;
    152a:	10 92 3a 01 	sts	0x013A, r1
				TCCR1B &= ~_BV(CS11); // turn it off!
    152e:	80 91 81 00 	lds	r24, 0x0081
    1532:	8d 7f       	andi	r24, 0xFD	; 253
    1534:	80 93 81 00 	sts	0x0081, r24
				PORTB |= _BV(SPK1) | _BV(SPK2);
    1538:	85 b1       	in	r24, 0x05	; 5
    153a:	86 60       	ori	r24, 0x06	; 6
    153c:	85 b9       	out	0x05, r24	; 5
    153e:	08 95       	ret

00001540 <set_alarm>:
}

/**************************** SUB-MENUS *****************************/

void set_alarm(void) 
{
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
	uint8_t mode;
	uint8_t hour, min, sec;
	uint8_t b;
		
	display_Pstr(PSTR("set alarm"));
    1554:	89 e7       	ldi	r24, 0x79	; 121
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>

	hour = min = sec = 0;
	mode = SHOW_MENU;

	hour = alarm_h;
    155c:	c0 91 38 01 	lds	r28, 0x0138
	min = alarm_m;
    1560:	d0 91 1a 01 	lds	r29, 0x011A
	sec = 0;
	
	timeoutcounter = 10;
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	90 93 41 01 	sts	0x0141, r25
    156c:	80 93 40 01 	sts	0x0140, r24
	brepeat |= _BV(2);		// Repeat button 2 if held down
    1570:	80 91 3f 01 	lds	r24, 0x013F
    1574:	84 60       	ori	r24, 0x04	; 4
    1576:	80 93 3f 01 	sts	0x013F, r24
	uint8_t b;
		
	display_Pstr(PSTR("set alarm"));

	hour = min = sec = 0;
	mode = SHOW_MENU;
    157a:	10 e0       	ldi	r17, 0x00	; 0
		b = buttons;	// Do this so ISR can't slip in a button in the middle of the loop
		if (b & _BV(0)) { // mode change
			break;
		}
		if (buttons & 0x7) {
			timeoutcounter = 10;	
    157c:	6a e0       	ldi	r22, 0x0A	; 10
    157e:	e6 2e       	mov	r14, r22
    1580:	f1 2c       	mov	r15, r1
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;
			}
			if (mode == SET_MIN) {
				min = (min+1) % 60;
    1582:	7c e3       	ldi	r23, 0x3C	; 60
    1584:	c7 2e       	mov	r12, r23
    1586:	d1 2c       	mov	r13, r1
		}
		if (b & _BV(2)) {
			button_clear(2);

			if (mode == SET_HOUR) {
				hour = (hour+1) % 24;
    1588:	e8 e1       	ldi	r30, 0x18	; 24
    158a:	ae 2e       	mov	r10, r30
    158c:	b1 2c       	mov	r11, r1
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    158e:	a8 95       	wdr
	timeoutcounter = 10;
	brepeat |= _BV(2);		// Repeat button 2 if held down
	
	while (1) {
		kickthedog();
		b = buttons;	// Do this so ISR can't slip in a button in the middle of the loop
    1590:	00 91 3b 01 	lds	r16, 0x013B
		if (b & _BV(0)) { // mode change
    1594:	00 fd       	sbrc	r16, 0
    1596:	a0 c0       	rjmp	.+320    	; 0x16d8 <set_alarm+0x198>
			break;
		}
		if (buttons & 0x7) {
    1598:	80 91 3b 01 	lds	r24, 0x013B
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	87 70       	andi	r24, 0x07	; 7
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <set_alarm+0x70>
			timeoutcounter = 10;	
    15a6:	f0 92 41 01 	sts	0x0141, r15
    15aa:	e0 92 40 01 	sts	0x0140, r14
    15ae:	1c c0       	rjmp	.+56     	; 0x15e8 <set_alarm+0xa8>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    15b0:	80 91 40 01 	lds	r24, 0x0140
    15b4:	90 91 41 01 	lds	r25, 0x0141
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	b1 f4       	brne	.+44     	; 0x15e8 <set_alarm+0xa8>
			//timed out!
			set_flag(f_show_time);		 
    15bc:	80 91 46 01 	lds	r24, 0x0146
    15c0:	80 68       	ori	r24, 0x80	; 128
    15c2:	80 93 46 01 	sts	0x0146, r24
			alarm_h = hour;
    15c6:	c0 93 38 01 	sts	0x0138, r28
			alarm_m = min;
    15ca:	d0 93 1a 01 	sts	0x011A, r29
			eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);		
    15ce:	60 91 38 01 	lds	r22, 0x0138
    15d2:	87 e0       	ldi	r24, 0x07	; 7
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
			eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);		
    15da:	60 91 1a 01 	lds	r22, 0x011A
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
			break;
    15e6:	78 c0       	rjmp	.+240    	; 0x16d8 <set_alarm+0x198>
		}
		if (b & _BV(1)) {
    15e8:	01 ff       	sbrs	r16, 1
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <set_alarm+0x12a>
			button_clear(1);
    15ec:	80 91 3b 01 	lds	r24, 0x013B
    15f0:	8d 7f       	andi	r24, 0xFD	; 253
    15f2:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    15f6:	11 23       	and	r17, r17
    15f8:	81 f4       	brne	.+32     	; 0x161a <set_alarm+0xda>
				// ok now it's selected
				mode = SET_HOUR;
				display_alarm(hour, min);
    15fa:	8c 2f       	mov	r24, r28
    15fc:	6d 2f       	mov	r22, r29
    15fe:	0e 94 d7 09 	call	0x13ae	; 0x13ae <display_alarm>
				display[1] |= 0x1;
    1602:	80 91 2b 01 	lds	r24, 0x012B
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;	
    160c:	80 91 2c 01 	lds	r24, 0x012C
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	80 93 2c 01 	sts	0x012C, r24
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// ok now it's selected
				mode = SET_HOUR;
    1616:	11 e0       	ldi	r17, 0x01	; 1
    1618:	28 c0       	rjmp	.+80     	; 0x166a <set_alarm+0x12a>
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
    161a:	11 30       	cpi	r17, 0x01	; 1
    161c:	81 f4       	brne	.+32     	; 0x163e <set_alarm+0xfe>
				mode = SET_MIN;
				display_alarm(hour, min);
    161e:	8c 2f       	mov	r24, r28
    1620:	6d 2f       	mov	r22, r29
    1622:	0e 94 d7 09 	call	0x13ae	; 0x13ae <display_alarm>
				display[4] |= 0x1;
    1626:	80 91 2e 01 	lds	r24, 0x012E
    162a:	81 60       	ori	r24, 0x01	; 1
    162c:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    1630:	80 91 2f 01 	lds	r24, 0x012F
    1634:	81 60       	ori	r24, 0x01	; 1
    1636:	80 93 2f 01 	sts	0x012F, r24
				mode = SET_HOUR;
				display_alarm(hour, min);
				display[1] |= 0x1;
				display[2] |= 0x1;	
			} else if (mode == SET_HOUR) {
				mode = SET_MIN;
    163a:	12 e0       	ldi	r17, 0x02	; 2
    163c:	16 c0       	rjmp	.+44     	; 0x166a <set_alarm+0x12a>
				display_alarm(hour, min);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else {
				// done!
				alarm_h = hour;
    163e:	c0 93 38 01 	sts	0x0138, r28
				alarm_m = min;
    1642:	d0 93 1a 01 	sts	0x011A, r29
				eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);		
    1646:	60 91 38 01 	lds	r22, 0x0138
    164a:	87 e0       	ldi	r24, 0x07	; 7
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
				eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);		
    1652:	60 91 1a 01 	lds	r22, 0x011A
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
				set_flag(f_show_time);
    165e:	80 91 46 01 	lds	r24, 0x0146
    1662:	80 68       	ori	r24, 0x80	; 128
    1664:	80 93 46 01 	sts	0x0146, r24
				break;
    1668:	37 c0       	rjmp	.+110    	; 0x16d8 <set_alarm+0x198>
			}
		}
		if (b & _BV(2)) {
    166a:	02 ff       	sbrs	r16, 2
    166c:	90 cf       	rjmp	.-224    	; 0x158e <set_alarm+0x4e>
			button_clear(2);
    166e:	80 91 3b 01 	lds	r24, 0x013B
    1672:	8b 7f       	andi	r24, 0xFB	; 251
    1674:	80 93 3b 01 	sts	0x013B, r24

			if (mode == SET_HOUR) {
    1678:	11 30       	cpi	r17, 0x01	; 1
    167a:	a9 f4       	brne	.+42     	; 0x16a6 <set_alarm+0x166>
				hour = (hour+1) % 24;
    167c:	8c 2f       	mov	r24, r28
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	b5 01       	movw	r22, r10
    1684:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    1688:	c8 2f       	mov	r28, r24
				display_alarm(hour, min);
    168a:	6d 2f       	mov	r22, r29
    168c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <display_alarm>
				display[1] |= 0x1;
    1690:	80 91 2b 01 	lds	r24, 0x012B
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    169a:	80 91 2c 01 	lds	r24, 0x012C
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	80 93 2c 01 	sts	0x012C, r24
    16a4:	74 cf       	rjmp	.-280    	; 0x158e <set_alarm+0x4e>
			}
			if (mode == SET_MIN) {
    16a6:	12 30       	cpi	r17, 0x02	; 2
    16a8:	09 f0       	breq	.+2      	; 0x16ac <set_alarm+0x16c>
    16aa:	71 cf       	rjmp	.-286    	; 0x158e <set_alarm+0x4e>
				min = (min+1) % 60;
    16ac:	8d 2f       	mov	r24, r29
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	b6 01       	movw	r22, r12
    16b4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    16b8:	68 2f       	mov	r22, r24
    16ba:	d8 2f       	mov	r29, r24
				display_alarm(hour, min);
    16bc:	8c 2f       	mov	r24, r28
    16be:	0e 94 d7 09 	call	0x13ae	; 0x13ae <display_alarm>
				display[4] |= 0x1;
    16c2:	80 91 2e 01 	lds	r24, 0x012E
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    16cc:	80 91 2f 01 	lds	r24, 0x012F
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 93 2f 01 	sts	0x012F, r24
    16d6:	5b cf       	rjmp	.-330    	; 0x158e <set_alarm+0x4e>
			}
		}
	}
	brepeat &= ~_BV(2);
    16d8:	80 91 3f 01 	lds	r24, 0x013F
    16dc:	8b 7f       	andi	r24, 0xFB	; 251
    16de:	80 93 3f 01 	sts	0x013F, r24
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	08 95       	ret

000016f8 <display_sdate>:

const char date_fmt2[] PROGMEM = "%S %-d";

// This is more "Sunday June 21" style
void display_sdate(void)
{
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	2b 97       	sbiw	r28, 0x0b	; 11
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];
	uint8_t mm, dd;
	PGM_P p;

	mm = date_m;
    1712:	e0 90 3e 01 	lds	r14, 0x013E
	dd = date_d;
    1716:	10 91 29 01 	lds	r17, 0x0129
	if (flag(f_dst_offset) && time_h == 23) {
    171a:	80 91 46 01 	lds	r24, 0x0146
    171e:	80 ff       	sbrs	r24, 0
    1720:	0e c0       	rjmp	.+28     	; 0x173e <display_sdate+0x46>
    1722:	80 91 15 01 	lds	r24, 0x0115
    1726:	87 31       	cpi	r24, 0x17	; 23
    1728:	51 f4       	brne	.+20     	; 0x173e <display_sdate+0x46>
		if (++dd > monthlen (date_y, mm)) {
    172a:	1f 5f       	subi	r17, 0xFF	; 255
    172c:	80 91 19 01 	lds	r24, 0x0119
    1730:	6e 2d       	mov	r22, r14
    1732:	0e 94 20 04 	call	0x840	; 0x840 <monthlen>
    1736:	81 17       	cp	r24, r17
    1738:	10 f4       	brcc	.+4      	; 0x173e <display_sdate+0x46>
			dd = 1;
			++mm;
    173a:	e3 94       	inc	r14

	mm = date_m;
	dd = date_d;
	if (flag(f_dst_offset) && time_h == 23) {
		if (++dd > monthlen (date_y, mm)) {
			dd = 1;
    173c:	11 e0       	ldi	r17, 0x01	; 1
			++mm;
		}
	}
	display_clear ();
    173e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>
	memcpy_P (&p, &monname[mm-1], sizeof(PGM_P));
    1742:	6e 2d       	mov	r22, r14
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	62 57       	subi	r22, 0x72	; 114
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	42 e0       	ldi	r20, 0x02	; 2
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <memcpy_P>
	sprintf_P (d, date_fmt2, p, dd);
    175a:	8d b7       	in	r24, 0x3d	; 61
    175c:	9e b7       	in	r25, 0x3e	; 62
    175e:	08 97       	sbiw	r24, 0x08	; 8
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	9e bf       	out	0x3e, r25	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	8d bf       	out	0x3d, r24	; 61
    176a:	ed b7       	in	r30, 0x3d	; 61
    176c:	fe b7       	in	r31, 0x3e	; 62
    176e:	31 96       	adiw	r30, 0x01	; 1
    1770:	a3 e0       	ldi	r26, 0x03	; 3
    1772:	ea 2e       	mov	r14, r26
    1774:	f1 2c       	mov	r15, r1
    1776:	ec 0e       	add	r14, r28
    1778:	fd 1e       	adc	r15, r29
    177a:	ad b7       	in	r26, 0x3d	; 61
    177c:	be b7       	in	r27, 0x3e	; 62
    177e:	12 96       	adiw	r26, 0x02	; 2
    1780:	fc 92       	st	X, r15
    1782:	ee 92       	st	-X, r14
    1784:	11 97       	sbiw	r26, 0x01	; 1
    1786:	89 e8       	ldi	r24, 0x89	; 137
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	93 83       	std	Z+3, r25	; 0x03
    178c:	82 83       	std	Z+2, r24	; 0x02
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	95 83       	std	Z+5, r25	; 0x05
    1794:	84 83       	std	Z+4, r24	; 0x04
    1796:	16 83       	std	Z+6, r17	; 0x06
    1798:	17 82       	std	Z+7, r1	; 0x07
    179a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
	display_str (d);
    179e:	8d b7       	in	r24, 0x3d	; 61
    17a0:	9e b7       	in	r25, 0x3e	; 62
    17a2:	08 96       	adiw	r24, 0x08	; 8
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	9e bf       	out	0x3e, r25	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	8d bf       	out	0x3d, r24	; 61
    17ae:	c7 01       	movw	r24, r14
    17b0:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
}
    17b4:	2b 96       	adiw	r28, 0x0b	; 11
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	08 95       	ret

000017cc <display_date>:

const char date_fmt1[] PROGMEM = "%02d/%02d/%02d";

// This type is mm-dd-yy OR dd-mm-yy depending on our region
void display_date(uint8_t yy, uint8_t mm, uint8_t dd) 
{
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	2c 97       	sbiw	r28, 0x0c	; 12
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];

	display_clear();
    17e4:	4c 87       	std	Y+12, r20	; 0x0c
    17e6:	6b 87       	std	Y+11, r22	; 0x0b
    17e8:	8a 87       	std	Y+10, r24	; 0x0a
    17ea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>

	//if (region == REGION_US)
		sprintf_P (d, date_fmt1, mm, dd, yy);	// mm-dd-yy
    17ee:	2d b7       	in	r18, 0x3d	; 61
    17f0:	3e b7       	in	r19, 0x3e	; 62
    17f2:	2a 50       	subi	r18, 0x0A	; 10
    17f4:	30 40       	sbci	r19, 0x00	; 0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	3e bf       	out	0x3e, r19	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	2d bf       	out	0x3d, r18	; 61
    1800:	ed b7       	in	r30, 0x3d	; 61
    1802:	fe b7       	in	r31, 0x3e	; 62
    1804:	31 96       	adiw	r30, 0x01	; 1
    1806:	8e 01       	movw	r16, r28
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	ad b7       	in	r26, 0x3d	; 61
    180e:	be b7       	in	r27, 0x3e	; 62
    1810:	12 96       	adiw	r26, 0x02	; 2
    1812:	1c 93       	st	X, r17
    1814:	0e 93       	st	-X, r16
    1816:	11 97       	sbiw	r26, 0x01	; 1
    1818:	20 ef       	ldi	r18, 0xF0	; 240
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	33 83       	std	Z+3, r19	; 0x03
    181e:	22 83       	std	Z+2, r18	; 0x02
    1820:	6b 85       	ldd	r22, Y+11	; 0x0b
    1822:	64 83       	std	Z+4, r22	; 0x04
    1824:	15 82       	std	Z+5, r1	; 0x05
    1826:	4c 85       	ldd	r20, Y+12	; 0x0c
    1828:	46 83       	std	Z+6, r20	; 0x06
    182a:	17 82       	std	Z+7, r1	; 0x07
    182c:	8a 85       	ldd	r24, Y+10	; 0x0a
    182e:	80 87       	std	Z+8, r24	; 0x08
    1830:	11 86       	std	Z+9, r1	; 0x09
    1832:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
	//else
		//sprintf_P (d, date_fmt1, dd, mm, yy);	// dd-mm-yy
	display_str (d);
    1836:	2d b7       	in	r18, 0x3d	; 61
    1838:	3e b7       	in	r19, 0x3e	; 62
    183a:	26 5f       	subi	r18, 0xF6	; 246
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	3e bf       	out	0x3e, r19	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	2d bf       	out	0x3d, r18	; 61
    1848:	c8 01       	movw	r24, r16
    184a:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
}
    184e:	2c 96       	adiw	r28, 0x0c	; 12
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <set_date>:
}



void set_date(void) 
{
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	00 d0       	rcall	.+0      	; 0x187a <set_date+0x16>
    187a:	00 d0       	rcall	.+0      	; 0x187c <set_date+0x18>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = SHOW_MENU;
	uint8_t m, d, y;
	uint8_t dt[4];
	uint8_t b;

	display_Pstr(PSTR("set date"));
    1880:	8b e9       	ldi	r24, 0x9B	; 155
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	
	timeoutcounter = 5;	
    1888:	85 e0       	ldi	r24, 0x05	; 5
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	90 93 41 01 	sts	0x0141, r25
    1890:	80 93 40 01 	sts	0x0140, r24
	m = date_m;
    1894:	10 91 3e 01 	lds	r17, 0x013E
	d = date_d;
    1898:	f0 90 29 01 	lds	r15, 0x0129
	y = date_y;
    189c:	00 91 19 01 	lds	r16, 0x0119
	
	brepeat |= _BV(2);
    18a0:	80 91 3f 01 	lds	r24, 0x013F
    18a4:	84 60       	ori	r24, 0x04	; 4
    18a6:	80 93 3f 01 	sts	0x013F, r24



void set_date(void) 
{
	uint8_t mode = SHOW_MENU;
    18aa:	ee 24       	eor	r14, r14

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;	
    18ac:	35 e0       	ldi	r19, 0x05	; 5
    18ae:	a3 2e       	mov	r10, r19
    18b0:	b1 2c       	mov	r11, r1
				}
				//twiWriteReg (0xd0, 0x04, b2bcd(d));
			}
			if (mode == SET_YEAR) {
				y++;
				y %= 100;
    18b2:	44 e6       	ldi	r20, 0x64	; 100
    18b4:	d4 2e       	mov	r13, r20
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    18b6:	a8 95       	wdr
	
	brepeat |= _BV(2);

	while (1) {
		kickthedog();
		b = buttons;
    18b8:	c0 90 3b 01 	lds	r12, 0x013B
		if (buttons & 0x7) {
    18bc:	80 91 3b 01 	lds	r24, 0x013B
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	87 70       	andi	r24, 0x07	; 7
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <set_date+0x70>
			timeoutcounter = 5;	
    18ca:	b0 92 41 01 	sts	0x0141, r11
    18ce:	a0 92 40 01 	sts	0x0140, r10
    18d2:	07 c0       	rjmp	.+14     	; 0x18e2 <set_date+0x7e>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    18d4:	80 91 40 01 	lds	r24, 0x0140
    18d8:	90 91 41 01 	lds	r25, 0x0141
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	09 f4       	brne	.+2      	; 0x18e2 <set_date+0x7e>
    18e0:	b4 c0       	rjmp	.+360    	; 0x1a4a <set_date+0x1e6>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // mode change
    18e2:	c0 fc       	sbrc	r12, 0
    18e4:	15 c1       	rjmp	.+554    	; 0x1b10 <set_date+0x2ac>
			break;
		}
		if (b & _BV(1)) {
    18e6:	c1 fe       	sbrs	r12, 1
    18e8:	b6 c0       	rjmp	.+364    	; 0x1a56 <set_date+0x1f2>
			button_clear(1);
    18ea:	80 91 3b 01 	lds	r24, 0x013B
    18ee:	8d 7f       	andi	r24, 0xFD	; 253
    18f0:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    18f4:	ee 20       	and	r14, r14
    18f6:	f1 f4       	brne	.+60     	; 0x1934 <set_date+0xd0>
				// start!
				if (region == REGION_US) {
    18f8:	80 91 14 01 	lds	r24, 0x0114
    18fc:	88 23       	and	r24, r24
    18fe:	41 f0       	breq	.+16     	; 0x1910 <set_date+0xac>
					mode = SET_MONTH;
				} else {
					DEBUGP("Set day");
    1900:	84 ea       	ldi	r24, 0xA4	; 164
    1902:	92 e0       	ldi	r25, 0x02	; 2
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
					mode = SET_DAY;
    190a:	22 e0       	ldi	r18, 0x02	; 2
    190c:	e2 2e       	mov	r14, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <set_date+0xb0>
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				if (region == REGION_US) {
					mode = SET_MONTH;
    1910:	ee 24       	eor	r14, r14
    1912:	e3 94       	inc	r14
				} else {
					DEBUGP("Set day");
					mode = SET_DAY;
				}
				display_date (y, m, d);
    1914:	80 2f       	mov	r24, r16
    1916:	61 2f       	mov	r22, r17
    1918:	4f 2d       	mov	r20, r15
    191a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				display[1] |= 0x1;
    191e:	80 91 2b 01 	lds	r24, 0x012B
    1922:	81 60       	ori	r24, 0x01	; 1
    1924:	80 93 2b 01 	sts	0x012B, r24
				display[2] |= 0x1;
    1928:	80 91 2c 01 	lds	r24, 0x012C
    192c:	81 60       	ori	r24, 0x01	; 1
    192e:	80 93 2c 01 	sts	0x012C, r24
    1932:	91 c0       	rjmp	.+290    	; 0x1a56 <set_date+0x1f2>
			} else if (((mode == SET_MONTH) && (region == REGION_US)) ||
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	e8 16       	cp	r14, r24
    1938:	29 f4       	brne	.+10     	; 0x1944 <set_date+0xe0>
    193a:	80 91 14 01 	lds	r24, 0x0114
    193e:	88 23       	and	r24, r24
    1940:	41 f0       	breq	.+16     	; 0x1952 <set_date+0xee>
    1942:	23 c0       	rjmp	.+70     	; 0x198a <set_date+0x126>
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	e8 16       	cp	r14, r24
    1948:	a1 f5       	brne	.+104    	; 0x19b2 <set_date+0x14e>
					 ((mode == SET_DAY) && (region == REGION_EU))) {
    194a:	80 91 14 01 	lds	r24, 0x0114
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	c9 f4       	brne	.+50     	; 0x1984 <set_date+0x120>
				if (region == REGION_US)
    1952:	80 91 14 01 	lds	r24, 0x0114
    1956:	88 23       	and	r24, r24
    1958:	19 f4       	brne	.+6      	; 0x1960 <set_date+0xfc>
					mode = SET_DAY;
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	e8 2e       	mov	r14, r24
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <set_date+0x100>
				else
					mode = SET_MONTH;
    1960:	ee 24       	eor	r14, r14
    1962:	e3 94       	inc	r14
				display_date (y, m, d);
    1964:	80 2f       	mov	r24, r16
    1966:	61 2f       	mov	r22, r17
    1968:	4f 2d       	mov	r20, r15
    196a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				display[4] |= 0x1;
    196e:	80 91 2e 01 	lds	r24, 0x012E
    1972:	81 60       	ori	r24, 0x01	; 1
    1974:	80 93 2e 01 	sts	0x012E, r24
				display[5] |= 0x1;
    1978:	80 91 2f 01 	lds	r24, 0x012F
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	80 93 2f 01 	sts	0x012F, r24
    1982:	69 c0       	rjmp	.+210    	; 0x1a56 <set_date+0x1f2>
			} else if (((mode == SET_DAY) && (region == REGION_US)) ||
    1984:	88 23       	and	r24, r24
    1986:	19 f0       	breq	.+6      	; 0x198e <set_date+0x12a>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <set_date+0x14e>
				((mode == SET_MONTH) && (region == REGION_EU))) {
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	91 f4       	brne	.+36     	; 0x19b2 <set_date+0x14e>
				mode = SET_YEAR;
				display_date (y, m, d);
    198e:	80 2f       	mov	r24, r16
    1990:	61 2f       	mov	r22, r17
    1992:	4f 2d       	mov	r20, r15
    1994:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				display[7] |= 0x1;
    1998:	80 91 31 01 	lds	r24, 0x0131
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    19a2:	80 91 32 01 	lds	r24, 0x0132
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	80 93 32 01 	sts	0x0132, r24
				display_date (y, m, d);
				display[4] |= 0x1;
				display[5] |= 0x1;
			} else if (((mode == SET_DAY) && (region == REGION_US)) ||
				((mode == SET_MONTH) && (region == REGION_EU))) {
				mode = SET_YEAR;
    19ac:	b3 e0       	ldi	r27, 0x03	; 3
    19ae:	eb 2e       	mov	r14, r27
				display_date (y, m, d);
				display[7] |= 0x1;
				display[8] |= 0x1;
    19b0:	52 c0       	rjmp	.+164    	; 0x1a56 <set_date+0x1f2>
			} else {
				clr_flag(f_show_time);
    19b2:	80 91 46 01 	lds	r24, 0x0146
    19b6:	8f 77       	andi	r24, 0x7F	; 127
    19b8:	80 93 46 01 	sts	0x0146, r24
				if (d > monthlen(y, m))
    19bc:	80 2f       	mov	r24, r16
    19be:	61 2f       	mov	r22, r17
    19c0:	0e 94 20 04 	call	0x840	; 0x840 <monthlen>
    19c4:	8f 15       	cp	r24, r15
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <set_date+0x166>
    19c8:	f8 2e       	mov	r15, r24
					d = monthlen(y, m);	// just to be sure
					
				cli();		// Make change to clock date in atomic manner
    19ca:	f8 94       	cli
				date_d = d;
    19cc:	f0 92 29 01 	sts	0x0129, r15
				date_m = m;
    19d0:	10 93 3e 01 	sts	0x013E, r17
				date_y = y;
    19d4:	00 93 19 01 	sts	0x0119, r16
				sei();
    19d8:	78 94       	sei
				
				dt[0] = dow (y, m, d);
    19da:	80 2f       	mov	r24, r16
    19dc:	61 2f       	mov	r22, r17
    19de:	4f 2d       	mov	r20, r15
    19e0:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
    19e4:	89 83       	std	Y+1, r24	; 0x01
				dt[1] = b2bcd(d);
    19e6:	8f 2d       	mov	r24, r15
    19e8:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    19ec:	8a 83       	std	Y+2, r24	; 0x02
				dt[2] = b2bcd(m);
    19ee:	81 2f       	mov	r24, r17
    19f0:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    19f4:	8b 83       	std	Y+3, r24	; 0x03
				dt[3] = b2bcd(y);
    19f6:	80 2f       	mov	r24, r16
    19f8:	0e 94 b2 02 	call	0x564	; 0x564 <b2bcd>
    19fc:	8c 83       	std	Y+4, r24	; 0x04
				twiWriteRegN(0xd0, 0x3, 4, dt);		// Update ChronoDot
    19fe:	80 ed       	ldi	r24, 0xD0	; 208
    1a00:	63 e0       	ldi	r22, 0x03	; 3
    1a02:	44 e0       	ldi	r20, 0x04	; 4
    1a04:	9e 01       	movw	r18, r28
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	0e 94 8e 11 	call	0x231c	; 0x231c <twiWriteRegN>
				
				set_dst_offset (date_y, date_m, date_d, time_h);
    1a0e:	80 91 19 01 	lds	r24, 0x0119
    1a12:	60 91 3e 01 	lds	r22, 0x013E
    1a16:	40 91 29 01 	lds	r20, 0x0129
    1a1a:	20 91 15 01 	lds	r18, 0x0115
#define set_flag(n) flags |= _BV(n)
#define clr_flag(n) flags &= ~_BV(n)

inline void set_dst_offset (uint8_t y, uint8_t m, uint8_t d, uint8_t h)
{
	if (dst (y, m, d, h))
    1a1e:	0e 94 3b 04 	call	0x876	; 0x876 <dst>
    1a22:	88 23       	and	r24, r24
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <set_date+0x1ca>
		set_flag (f_dst_offset);
    1a26:	80 91 46 01 	lds	r24, 0x0146
    1a2a:	81 60       	ori	r24, 0x01	; 1
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <set_date+0x1d0>
	else
		clr_flag (f_dst_offset);
    1a2e:	80 91 46 01 	lds	r24, 0x0146
    1a32:	8e 7f       	andi	r24, 0xFE	; 254
    1a34:	80 93 46 01 	sts	0x0146, r24
				dt[2] = b2bcd(m);
				dt[3] = b2bcd(y);
				twiWriteRegN(0xd0, 0x3, 4, dt);		// Update ChronoDot
				
				set_dst_offset (date_y, date_m, date_d, time_h);
				display_date (y, m, d);
    1a38:	80 2f       	mov	r24, r16
    1a3a:	61 2f       	mov	r22, r17
    1a3c:	4f 2d       	mov	r20, r15
    1a3e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				delayms(1500);
    1a42:	8c ed       	ldi	r24, 0xDC	; 220
    1a44:	95 e0       	ldi	r25, 0x05	; 5
    1a46:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
				set_flag(f_show_time);
    1a4a:	80 91 46 01 	lds	r24, 0x0146
    1a4e:	80 68       	ori	r24, 0x80	; 128
    1a50:	80 93 46 01 	sts	0x0146, r24
				break;
    1a54:	5d c0       	rjmp	.+186    	; 0x1b10 <set_date+0x2ac>
			}
		}
		if (b & _BV(2)) {
    1a56:	c2 fe       	sbrs	r12, 2
    1a58:	2e cf       	rjmp	.-420    	; 0x18b6 <set_date+0x52>
			button_clear(2);
    1a5a:	80 91 3b 01 	lds	r24, 0x013B
    1a5e:	8b 7f       	andi	r24, 0xFB	; 251
    1a60:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_MONTH) {
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	e8 16       	cp	r14, r24
    1a68:	71 f4       	brne	.+28     	; 0x1a86 <set_date+0x222>
				m++;
    1a6a:	1f 5f       	subi	r17, 0xFF	; 255
				if (m >= 13)
    1a6c:	1d 30       	cpi	r17, 0x0D	; 13
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <set_date+0x20e>
					m = 1;
    1a70:	11 e0       	ldi	r17, 0x01	; 1
				display_date (y, m, d);
    1a72:	80 2f       	mov	r24, r16
    1a74:	61 2f       	mov	r22, r17
    1a76:	4f 2d       	mov	r20, r15
    1a78:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				if (region == REGION_US) {
    1a7c:	80 91 14 01 	lds	r24, 0x0114
    1a80:	88 23       	and	r24, r24
    1a82:	09 f5       	brne	.+66     	; 0x1ac6 <set_date+0x262>
    1a84:	15 c0       	rjmp	.+42     	; 0x1ab0 <set_date+0x24c>
					display[4] |= 0x1;
					display[5] |= 0x1;
				}
				//twiWriteReg (0xd0, 0x05, b2bcd(date_m));
			}
			if (mode == SET_DAY) {
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	e8 16       	cp	r14, r24
    1a8a:	41 f5       	brne	.+80     	; 0x1adc <set_date+0x278>
				d++;
    1a8c:	f3 94       	inc	r15
				if (d > monthlen(y, m))
    1a8e:	80 2f       	mov	r24, r16
    1a90:	61 2f       	mov	r22, r17
    1a92:	0e 94 20 04 	call	0x840	; 0x840 <monthlen>
    1a96:	8f 15       	cp	r24, r15
    1a98:	10 f4       	brcc	.+4      	; 0x1a9e <set_date+0x23a>
					d = 1;
    1a9a:	ff 24       	eor	r15, r15
    1a9c:	f3 94       	inc	r15
				display_date (y, m, d);
    1a9e:	80 2f       	mov	r24, r16
    1aa0:	61 2f       	mov	r22, r17
    1aa2:	4f 2d       	mov	r20, r15
    1aa4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>

				if (region == REGION_EU) {
    1aa8:	80 91 14 01 	lds	r24, 0x0114
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	59 f4       	brne	.+22     	; 0x1ac6 <set_date+0x262>
					display[1] |= 0x1;
    1ab0:	80 91 2b 01 	lds	r24, 0x012B
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	80 93 2b 01 	sts	0x012B, r24
					display[2] |= 0x1;
    1aba:	80 91 2c 01 	lds	r24, 0x012C
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	80 93 2c 01 	sts	0x012C, r24
    1ac4:	f8 ce       	rjmp	.-528    	; 0x18b6 <set_date+0x52>
				} else {
					display[4] |= 0x1;
    1ac6:	80 91 2e 01 	lds	r24, 0x012E
    1aca:	81 60       	ori	r24, 0x01	; 1
    1acc:	80 93 2e 01 	sts	0x012E, r24
					display[5] |= 0x1;
    1ad0:	80 91 2f 01 	lds	r24, 0x012F
    1ad4:	81 60       	ori	r24, 0x01	; 1
    1ad6:	80 93 2f 01 	sts	0x012F, r24
    1ada:	ed ce       	rjmp	.-550    	; 0x18b6 <set_date+0x52>
				}
				//twiWriteReg (0xd0, 0x04, b2bcd(d));
			}
			if (mode == SET_YEAR) {
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	e8 16       	cp	r14, r24
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <set_date+0x280>
    1ae2:	e9 ce       	rjmp	.-558    	; 0x18b6 <set_date+0x52>
				y++;
    1ae4:	80 2f       	mov	r24, r16
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
				y %= 100;
    1ae8:	6d 2d       	mov	r22, r13
    1aea:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodqi4>
    1aee:	09 2f       	mov	r16, r25
				display_date (y, m, d);
    1af0:	89 2f       	mov	r24, r25
    1af2:	61 2f       	mov	r22, r17
    1af4:	4f 2d       	mov	r20, r15
    1af6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <display_date>
				display[7] |= 0x1;
    1afa:	80 91 31 01 	lds	r24, 0x0131
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	80 93 31 01 	sts	0x0131, r24
				display[8] |= 0x1;
    1b04:	80 91 32 01 	lds	r24, 0x0132
    1b08:	81 60       	ori	r24, 0x01	; 1
    1b0a:	80 93 32 01 	sts	0x0132, r24
    1b0e:	d3 ce       	rjmp	.-602    	; 0x18b6 <set_date+0x52>
				//twiWriteReg (0xd0, 0x06, b2bcd(y));
			}
		}
	}
	brepeat &= ~_BV(2);
    1b10:	80 91 3f 01 	lds	r24, 0x013F
    1b14:	8b 7f       	andi	r24, 0xFB	; 251
    1b16:	80 93 3f 01 	sts	0x013F, r24
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	08 95       	ret

00001b38 <display_day>:
const char fri[] PROGMEM = " friday";
const char sat[] PROGMEM = "saturday";
PGM_P const dayname[7] PROGMEM = {sun, mon, tue, wed, thu, fri, sat};
	
void display_day(void)
{
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2b 97       	sbiw	r28, 0x0b	; 11
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
	char d[DISPLAYSIZE];
	uint8_t dotw;
	PGM_P p;

	display_clear();
    1b4c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>
	dotw = dow(date_y, date_m, date_d);
    1b50:	80 91 19 01 	lds	r24, 0x0119
    1b54:	60 91 3e 01 	lds	r22, 0x013E
    1b58:	40 91 29 01 	lds	r20, 0x0129
    1b5c:	0e 94 cf 03 	call	0x79e	; 0x79e <dow>
	memcpy_P(&p, &dayname[dotw], sizeof(PGM_P));
    1b60:	68 2f       	mov	r22, r24
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	66 0f       	add	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	61 50       	subi	r22, 0x01	; 1
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	42 e0       	ldi	r20, 0x02	; 2
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <memcpy_P>
	strcpy_P (d, p);
    1b78:	69 81       	ldd	r22, Y+1	; 0x01
    1b7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	03 96       	adiw	r24, 0x03	; 3
    1b80:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <strcpy_P>
	display_str(d);
    1b84:	ce 01       	movw	r24, r28
    1b86:	03 96       	adiw	r24, 0x03	; 3
    1b88:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
}
    1b8c:	2b 96       	adiw	r28, 0x0b	; 11
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <set_trim>:
}


const char trim_fmt[] PROGMEM = "trim %-3d";

void set_trim(void) {
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
	uint8_t mode = SHOW_MENU;
	int8_t trim;
	char d[DISPLAYSIZE];
	uint8_t b;

	display_Pstr(PSTR("set trim"));
    1bc2:	86 ec       	ldi	r24, 0xC6	; 198
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	
	timeoutcounter = 5;	
    1bca:	85 e0       	ldi	r24, 0x05	; 5
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	90 93 41 01 	sts	0x0141, r25
    1bd2:	80 93 40 01 	sts	0x0140, r24
	trim = twiReadReg(0xd0, 0x10);
    1bd6:	80 ed       	ldi	r24, 0xD0	; 208
    1bd8:	60 e1       	ldi	r22, 0x10	; 16
    1bda:	0e 94 c9 11 	call	0x2392	; 0x2392 <twiReadReg>
    1bde:	18 2f       	mov	r17, r24
	brepeat |= _BV(0) | _BV(2);
    1be0:	80 91 3f 01 	lds	r24, 0x013F
    1be4:	85 60       	ori	r24, 0x05	; 5
    1be6:	80 93 3f 01 	sts	0x013F, r24


const char trim_fmt[] PROGMEM = "trim %-3d";

void set_trim(void) {
	uint8_t mode = SHOW_MENU;
    1bea:	20 e0       	ldi	r18, 0x00	; 0
	
	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;
    1bec:	e5 e0       	ldi	r30, 0x05	; 5
    1bee:	ae 2e       	mov	r10, r30
    1bf0:	b1 2c       	mov	r11, r1
		}
		if (b & _BV(0)) { // decrement
			if (mode == SET_TRIM) {
				button_clear(0);
				if (--trim < -99) trim = 99;
				sprintf_P (d, trim_fmt, trim);
    1bf2:	7e 01       	movw	r14, r28
    1bf4:	08 94       	sec
    1bf6:	e1 1c       	adc	r14, r1
    1bf8:	f1 1c       	adc	r15, r1
    1bfa:	f2 e6       	ldi	r31, 0x62	; 98
    1bfc:	cf 2e       	mov	r12, r31
    1bfe:	f1 e0       	ldi	r31, 0x01	; 1
    1c00:	df 2e       	mov	r13, r31
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    1c02:	a8 95       	wdr
	trim = twiReadReg(0xd0, 0x10);
	brepeat |= _BV(0) | _BV(2);
	
	while (1) {
		kickthedog();
		b = buttons;
    1c04:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
    1c08:	80 91 3b 01 	lds	r24, 0x013B
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	87 70       	andi	r24, 0x07	; 7
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	29 f0       	breq	.+10     	; 0x1c20 <set_trim+0x82>
			timeoutcounter = 5;
    1c16:	b0 92 41 01 	sts	0x0141, r11
    1c1a:	a0 92 40 01 	sts	0x0140, r10
    1c1e:	06 c0       	rjmp	.+12     	; 0x1c2c <set_trim+0x8e>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    1c20:	80 91 40 01 	lds	r24, 0x0140
    1c24:	90 91 41 01 	lds	r25, 0x0141
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	89 f1       	breq	.+98     	; 0x1c8e <set_trim+0xf0>
			//timed out!
			set_flag(f_show_time);		 
			break;
		}
		if (b & _BV(0)) { // decrement
    1c2c:	00 ff       	sbrs	r16, 0
    1c2e:	35 c0       	rjmp	.+106    	; 0x1c9a <set_trim+0xfc>
			if (mode == SET_TRIM) {
    1c30:	2b 30       	cpi	r18, 0x0B	; 11
    1c32:	69 f5       	brne	.+90     	; 0x1c8e <set_trim+0xf0>
				button_clear(0);
    1c34:	80 91 3b 01 	lds	r24, 0x013B
    1c38:	8e 7f       	andi	r24, 0xFE	; 254
    1c3a:	80 93 3b 01 	sts	0x013B, r24
				if (--trim < -99) trim = 99;
    1c3e:	11 50       	subi	r17, 0x01	; 1
    1c40:	1d 39       	cpi	r17, 0x9D	; 157
    1c42:	0c f4       	brge	.+2      	; 0x1c46 <set_trim+0xa8>
    1c44:	13 e6       	ldi	r17, 0x63	; 99
				sprintf_P (d, trim_fmt, trim);
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <set_trim+0xaa>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <set_trim+0xac>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <set_trim+0xae>
    1c4c:	ed b7       	in	r30, 0x3d	; 61
    1c4e:	fe b7       	in	r31, 0x3e	; 62
    1c50:	31 96       	adiw	r30, 0x01	; 1
    1c52:	ad b7       	in	r26, 0x3d	; 61
    1c54:	be b7       	in	r27, 0x3e	; 62
    1c56:	12 96       	adiw	r26, 0x02	; 2
    1c58:	fc 92       	st	X, r15
    1c5a:	ee 92       	st	-X, r14
    1c5c:	11 97       	sbiw	r26, 0x01	; 1
    1c5e:	d3 82       	std	Z+3, r13	; 0x03
    1c60:	c2 82       	std	Z+2, r12	; 0x02
    1c62:	81 2f       	mov	r24, r17
    1c64:	99 27       	eor	r25, r25
    1c66:	87 fd       	sbrc	r24, 7
    1c68:	90 95       	com	r25
    1c6a:	95 83       	std	Z+5, r25	; 0x05
    1c6c:	84 83       	std	Z+4, r24	; 0x04
    1c6e:	2a 87       	std	Y+10, r18	; 0x0a
    1c70:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
				display_str (d);
    1c74:	8d b7       	in	r24, 0x3d	; 61
    1c76:	9e b7       	in	r25, 0x3e	; 62
    1c78:	06 96       	adiw	r24, 0x06	; 6
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	9e bf       	out	0x3e, r25	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	8d bf       	out	0x3d, r24	; 61
    1c84:	c7 01       	movw	r24, r14
    1c86:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
    1c8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <set_trim+0xfc>
			} else {
				set_flag(f_show_time);
    1c8e:	80 91 46 01 	lds	r24, 0x0146
    1c92:	80 68       	ori	r24, 0x80	; 128
    1c94:	80 93 46 01 	sts	0x0146, r24
				break;
    1c98:	69 c0       	rjmp	.+210    	; 0x1d6c <set_trim+0x1ce>
			}	
		}
		if (b & _BV(1)) {
    1c9a:	01 ff       	sbrs	r16, 1
    1c9c:	35 c0       	rjmp	.+106    	; 0x1d08 <set_trim+0x16a>
			button_clear(1);
    1c9e:	80 91 3b 01 	lds	r24, 0x013B
    1ca2:	8d 7f       	andi	r24, 0xFD	; 253
    1ca4:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
    1ca8:	22 23       	and	r18, r18
    1caa:	19 f5       	brne	.+70     	; 0x1cf2 <set_trim+0x154>
				// first time through loop
				mode = SET_TRIM;
				sprintf_P (d, trim_fmt, trim);
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <set_trim+0x110>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <set_trim+0x112>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <set_trim+0x114>
    1cb2:	ed b7       	in	r30, 0x3d	; 61
    1cb4:	fe b7       	in	r31, 0x3e	; 62
    1cb6:	31 96       	adiw	r30, 0x01	; 1
    1cb8:	ad b7       	in	r26, 0x3d	; 61
    1cba:	be b7       	in	r27, 0x3e	; 62
    1cbc:	12 96       	adiw	r26, 0x02	; 2
    1cbe:	fc 92       	st	X, r15
    1cc0:	ee 92       	st	-X, r14
    1cc2:	11 97       	sbiw	r26, 0x01	; 1
    1cc4:	d3 82       	std	Z+3, r13	; 0x03
    1cc6:	c2 82       	std	Z+2, r12	; 0x02
    1cc8:	81 2f       	mov	r24, r17
    1cca:	99 27       	eor	r25, r25
    1ccc:	87 fd       	sbrc	r24, 7
    1cce:	90 95       	com	r25
    1cd0:	95 83       	std	Z+5, r25	; 0x05
    1cd2:	84 83       	std	Z+4, r24	; 0x04
    1cd4:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
				display_str (d);
    1cd8:	8d b7       	in	r24, 0x3d	; 61
    1cda:	9e b7       	in	r25, 0x3e	; 62
    1cdc:	06 96       	adiw	r24, 0x06	; 6
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	9e bf       	out	0x3e, r25	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	8d bf       	out	0x3d, r24	; 61
    1ce8:	c7 01       	movw	r24, r14
    1cea:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// first time through loop
				mode = SET_TRIM;
    1cee:	2b e0       	ldi	r18, 0x0B	; 11
    1cf0:	0b c0       	rjmp	.+22     	; 0x1d08 <set_trim+0x16a>
				sprintf_P (d, trim_fmt, trim);
				display_str (d);
			} else {
				set_flag(f_show_time);
    1cf2:	80 91 46 01 	lds	r24, 0x0146
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	80 93 46 01 	sts	0x0146, r24
				twiWriteReg (0xd0, 0x10, trim);
    1cfc:	80 ed       	ldi	r24, 0xD0	; 208
    1cfe:	60 e1       	ldi	r22, 0x10	; 16
    1d00:	41 2f       	mov	r20, r17
    1d02:	0e 94 5d 11 	call	0x22ba	; 0x22ba <twiWriteReg>
				break;
    1d06:	32 c0       	rjmp	.+100    	; 0x1d6c <set_trim+0x1ce>
			}
		}
		if (b & _BV(2)) {
    1d08:	02 ff       	sbrs	r16, 2
    1d0a:	7b cf       	rjmp	.-266    	; 0x1c02 <set_trim+0x64>
			button_clear(2);
    1d0c:	80 91 3b 01 	lds	r24, 0x013B
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_TRIM) {
    1d16:	2b 30       	cpi	r18, 0x0B	; 11
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <set_trim+0x17e>
    1d1a:	73 cf       	rjmp	.-282    	; 0x1c02 <set_trim+0x64>
				if (++trim > 99) trim = -99;
    1d1c:	1f 5f       	subi	r17, 0xFF	; 255
    1d1e:	14 36       	cpi	r17, 0x64	; 100
    1d20:	0c f0       	brlt	.+2      	; 0x1d24 <set_trim+0x186>
    1d22:	1d e9       	ldi	r17, 0x9D	; 157
				sprintf_P (d, trim_fmt, trim);
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <set_trim+0x188>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <set_trim+0x18a>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <set_trim+0x18c>
    1d2a:	ed b7       	in	r30, 0x3d	; 61
    1d2c:	fe b7       	in	r31, 0x3e	; 62
    1d2e:	31 96       	adiw	r30, 0x01	; 1
    1d30:	ad b7       	in	r26, 0x3d	; 61
    1d32:	be b7       	in	r27, 0x3e	; 62
    1d34:	12 96       	adiw	r26, 0x02	; 2
    1d36:	fc 92       	st	X, r15
    1d38:	ee 92       	st	-X, r14
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	d3 82       	std	Z+3, r13	; 0x03
    1d3e:	c2 82       	std	Z+2, r12	; 0x02
    1d40:	81 2f       	mov	r24, r17
    1d42:	99 27       	eor	r25, r25
    1d44:	87 fd       	sbrc	r24, 7
    1d46:	90 95       	com	r25
    1d48:	95 83       	std	Z+5, r25	; 0x05
    1d4a:	84 83       	std	Z+4, r24	; 0x04
    1d4c:	2a 87       	std	Y+10, r18	; 0x0a
    1d4e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
				display_str (d);
    1d52:	8d b7       	in	r24, 0x3d	; 61
    1d54:	9e b7       	in	r25, 0x3e	; 62
    1d56:	06 96       	adiw	r24, 0x06	; 6
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	9e bf       	out	0x3e, r25	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	8d bf       	out	0x3d, r24	; 61
    1d62:	c7 01       	movw	r24, r14
    1d64:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
    1d68:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d6a:	4b cf       	rjmp	.-362    	; 0x1c02 <set_trim+0x64>
			}
		}
	}
	brepeat &= ~(_BV(0) | _BV(2));
    1d6c:	80 91 3f 01 	lds	r24, 0x013F
    1d70:	8a 7f       	andi	r24, 0xFA	; 250
    1d72:	80 93 3f 01 	sts	0x013F, r24
}
    1d76:	2a 96       	adiw	r28, 0x0a	; 10
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	bf 90       	pop	r11
    1d94:	af 90       	pop	r10
    1d96:	08 95       	ret

00001d98 <set_brightness>:

const char brit_fmt1[] PROGMEM = "brit %-2d ";
const char brit_fmt2[] PROGMEM = "brit aut";

void set_brightness(void) 
{
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	29 97       	sbiw	r28, 0x09	; 9
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
	uint8_t mode = SHOW_MENU;
	uint8_t b;
	char d[DISPLAYSIZE];

	display_Pstr(PSTR("set brit"));
    1dbc:	8c ea       	ldi	r24, 0xAC	; 172
    1dbe:	92 e0       	ldi	r25, 0x02	; 2
    1dc0:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>

	timeoutcounter = 5;	
    1dc4:	85 e0       	ldi	r24, 0x05	; 5
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	90 93 41 01 	sts	0x0141, r25
    1dcc:	80 93 40 01 	sts	0x0140, r24
	brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
    1dd8:	80 93 45 01 	sts	0x0145, r24
const char brit_fmt1[] PROGMEM = "brit %-2d ";
const char brit_fmt2[] PROGMEM = "brit aut";

void set_brightness(void) 
{
	uint8_t mode = SHOW_MENU;
    1ddc:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		kickthedog();
		b = buttons;
		if (buttons & 0x7) {
			timeoutcounter = 5;
    1dde:	a5 e0       	ldi	r26, 0x05	; 5
    1de0:	aa 2e       	mov	r10, r26
    1de2:	b1 2c       	mov	r11, r1
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
					sprintf_P (d, brit_fmt1, brightness);
    1de4:	7e 01       	movw	r14, r28
    1de6:	08 94       	sec
    1de8:	e1 1c       	adc	r14, r1
    1dea:	f1 1c       	adc	r15, r1
    1dec:	be e9       	ldi	r27, 0x9E	; 158
    1dee:	cb 2e       	mov	r12, r27
    1df0:	b1 e0       	ldi	r27, 0x01	; 1
    1df2:	db 2e       	mov	r13, r27
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <set_brightness+0x60>
				break;
			}
		}
		if (b & _BV(2)) {
			button_clear(2);
			if (mode == SET_BRITE) {
    1df6:	10 e0       	ldi	r17, 0x00	; 0
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    1df8:	a8 95       	wdr
	timeoutcounter = 5;	
	brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);

	while (1) {
		kickthedog();
		b = buttons;
    1dfa:	00 91 3b 01 	lds	r16, 0x013B
		if (buttons & 0x7) {
    1dfe:	80 91 3b 01 	lds	r24, 0x013B
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	87 70       	andi	r24, 0x07	; 7
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	29 f0       	breq	.+10     	; 0x1e16 <set_brightness+0x7e>
			timeoutcounter = 5;
    1e0c:	b0 92 41 01 	sts	0x0141, r11
    1e10:	a0 92 40 01 	sts	0x0140, r10
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <set_brightness+0x90>
			// timeout w/no buttons pressed after 3 seconds?
		} else if (!timeoutcounter) {
    1e16:	80 91 40 01 	lds	r24, 0x0140
    1e1a:	90 91 41 01 	lds	r25, 0x0141
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <set_brightness+0x90>
			//timed out!
			set_flag(f_show_time);		 
    1e22:	80 91 46 01 	lds	r24, 0x0146
    1e26:	35 c0       	rjmp	.+106    	; 0x1e92 <set_brightness+0xfa>
				init_autobright();
			else
				ADCSRA &= ~(_BV(ADEN) | _BV(ADIE));
			break;
		}
		if (b & _BV(0)) { // mode change
    1e28:	00 fd       	sbrc	r16, 0
    1e2a:	98 c0       	rjmp	.+304    	; 0x1f5c <set_brightness+0x1c4>
			break;
		}
		if (b & _BV(1)) {
    1e2c:	01 ff       	sbrs	r16, 1
    1e2e:	4e c0       	rjmp	.+156    	; 0x1ecc <set_brightness+0x134>
			button_clear(1);
    1e30:	80 91 3b 01 	lds	r24, 0x013B
    1e34:	8d 7f       	andi	r24, 0xFD	; 253
    1e36:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
    1e3a:	80 91 46 01 	lds	r24, 0x0146
		if (b & _BV(0)) { // mode change
			break;
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
    1e3e:	11 23       	and	r17, r17
    1e40:	41 f5       	brne	.+80     	; 0x1e92 <set_brightness+0xfa>
				// start!
				mode = SET_BRITE;
				// display brightness
				if (!flag(f_autobright)) {
    1e42:	85 fd       	sbrc	r24, 5
    1e44:	20 c0       	rjmp	.+64     	; 0x1e86 <set_brightness+0xee>
					sprintf_P (d, brit_fmt1, brightness);
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <set_brightness+0xb0>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <set_brightness+0xb2>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <set_brightness+0xb4>
    1e4c:	ed b7       	in	r30, 0x3d	; 61
    1e4e:	fe b7       	in	r31, 0x3e	; 62
    1e50:	31 96       	adiw	r30, 0x01	; 1
    1e52:	ad b7       	in	r26, 0x3d	; 61
    1e54:	be b7       	in	r27, 0x3e	; 62
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	fc 92       	st	X, r15
    1e5a:	ee 92       	st	-X, r14
    1e5c:	11 97       	sbiw	r26, 0x01	; 1
    1e5e:	d3 82       	std	Z+3, r13	; 0x03
    1e60:	c2 82       	std	Z+2, r12	; 0x02
    1e62:	80 91 45 01 	lds	r24, 0x0145
    1e66:	84 83       	std	Z+4, r24	; 0x04
    1e68:	15 82       	std	Z+5, r1	; 0x05
    1e6a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
					display_str (d);
    1e6e:	8d b7       	in	r24, 0x3d	; 61
    1e70:	9e b7       	in	r25, 0x3e	; 62
    1e72:	06 96       	adiw	r24, 0x06	; 6
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	9e bf       	out	0x3e, r25	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	8d bf       	out	0x3d, r24	; 61
    1e7e:	c7 01       	movw	r24, r14
    1e80:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <set_brightness+0xf6>
				} else {
					display_Pstr (brit_fmt2);
    1e86:	85 e9       	ldi	r24, 0x95	; 149
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
		}
		if (b & _BV(1)) {
			button_clear(1);
			if (mode == SHOW_MENU) {
				// start!
				mode = SET_BRITE;
    1e8e:	11 e0       	ldi	r17, 0x01	; 1
    1e90:	1d c0       	rjmp	.+58     	; 0x1ecc <set_brightness+0x134>
					display_str (d);
				} else {
					display_Pstr (brit_fmt2);
				}				
			} else {
				set_flag(f_show_time);
    1e92:	80 68       	ori	r24, 0x80	; 128
    1e94:	80 93 46 01 	sts	0x0146, r24
				eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness);
    1e98:	89 e0       	ldi	r24, 0x09	; 9
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	60 91 45 01 	lds	r22, 0x0145
    1ea0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
				eeprom_write_byte((uint8_t *)EE_AUTOB, flag (f_autobright));
    1ea4:	60 91 46 01 	lds	r22, 0x0146
    1ea8:	60 72       	andi	r22, 0x20	; 32
    1eaa:	8e e0       	ldi	r24, 0x0E	; 14
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__eewr_byte_m328p>
				if (flag(f_autobright))
    1eb2:	80 91 46 01 	lds	r24, 0x0146
    1eb6:	85 ff       	sbrs	r24, 5
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <set_brightness+0x128>
					init_autobright();
    1eba:	0e 94 90 03 	call	0x720	; 0x720 <init_autobright>
    1ebe:	4e c0       	rjmp	.+156    	; 0x1f5c <set_brightness+0x1c4>
				else
					ADCSRA &= ~(_BV(ADEN) | _BV(ADIE));
    1ec0:	80 91 7a 00 	lds	r24, 0x007A
    1ec4:	87 77       	andi	r24, 0x77	; 119
    1ec6:	80 93 7a 00 	sts	0x007A, r24
    1eca:	48 c0       	rjmp	.+144    	; 0x1f5c <set_brightness+0x1c4>
				break;
			}
		}
		if (b & _BV(2)) {
    1ecc:	02 ff       	sbrs	r16, 2
    1ece:	94 cf       	rjmp	.-216    	; 0x1df8 <set_brightness+0x60>
			button_clear(2);
    1ed0:	80 91 3b 01 	lds	r24, 0x013B
    1ed4:	8b 7f       	andi	r24, 0xFB	; 251
    1ed6:	80 93 3b 01 	sts	0x013B, r24
			if (mode == SET_BRITE) {
    1eda:	11 30       	cpi	r17, 0x01	; 1
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <set_brightness+0x148>
    1ede:	8b cf       	rjmp	.-234    	; 0x1df6 <set_brightness+0x5e>
				if (flag(f_autobright) || brightness < 90) {
    1ee0:	80 91 46 01 	lds	r24, 0x0146
    1ee4:	85 fd       	sbrc	r24, 5
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <set_brightness+0x158>
    1ee8:	80 91 45 01 	lds	r24, 0x0145
    1eec:	8a 35       	cpi	r24, 0x5A	; 90
    1eee:	60 f5       	brcc	.+88     	; 0x1f48 <set_brightness+0x1b0>
					clr_flag (f_autobright);
    1ef0:	80 91 46 01 	lds	r24, 0x0146
    1ef4:	8f 7d       	andi	r24, 0xDF	; 223
    1ef6:	80 93 46 01 	sts	0x0146, r24
					brightness = limit_brightness (brightness+5);
    1efa:	80 91 45 01 	lds	r24, 0x0145
    1efe:	8b 5f       	subi	r24, 0xFB	; 251
    1f00:	0e 94 c4 02 	call	0x588	; 0x588 <limit_brightness>
    1f04:	80 93 45 01 	sts	0x0145, r24
					ocr0a = brightness;
    1f08:	80 93 3d 01 	sts	0x013D, r24
					sprintf_P (d, brit_fmt1, brightness);
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <set_brightness+0x176>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <set_brightness+0x178>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <set_brightness+0x17a>
    1f12:	ed b7       	in	r30, 0x3d	; 61
    1f14:	fe b7       	in	r31, 0x3e	; 62
    1f16:	31 96       	adiw	r30, 0x01	; 1
    1f18:	ad b7       	in	r26, 0x3d	; 61
    1f1a:	be b7       	in	r27, 0x3e	; 62
    1f1c:	12 96       	adiw	r26, 0x02	; 2
    1f1e:	fc 92       	st	X, r15
    1f20:	ee 92       	st	-X, r14
    1f22:	11 97       	sbiw	r26, 0x01	; 1
    1f24:	d3 82       	std	Z+3, r13	; 0x03
    1f26:	c2 82       	std	Z+2, r12	; 0x02
    1f28:	84 83       	std	Z+4, r24	; 0x04
    1f2a:	15 82       	std	Z+5, r1	; 0x05
    1f2c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf_P>
					display_str (d);
    1f30:	8d b7       	in	r24, 0x3d	; 61
    1f32:	9e b7       	in	r25, 0x3e	; 62
    1f34:	06 96       	adiw	r24, 0x06	; 6
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	9e bf       	out	0x3e, r25	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	8d bf       	out	0x3d, r24	; 61
    1f40:	c7 01       	movw	r24, r14
    1f42:	0e 94 2f 09 	call	0x125e	; 0x125e <display_str>
    1f46:	58 cf       	rjmp	.-336    	; 0x1df8 <set_brightness+0x60>
				} else {
					set_flag (f_autobright);
    1f48:	80 91 46 01 	lds	r24, 0x0146
    1f4c:	80 62       	ori	r24, 0x20	; 32
    1f4e:	80 93 46 01 	sts	0x0146, r24
					display_Pstr (brit_fmt2);
    1f52:	85 e9       	ldi	r24, 0x95	; 149
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
    1f5a:	4e cf       	rjmp	.-356    	; 0x1df8 <set_brightness+0x60>
				}				
			}
		}
	}
}
    1f5c:	29 96       	adiw	r28, 0x09	; 9
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	08 95       	ret

00001f7e <init_vfd>:

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void init_vfd(void) {
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    1f7e:	81 e5       	ldi	r24, 0x51	; 81
    1f80:	8c bd       	out	0x2c, r24	; 44
}
    1f82:	08 95       	ret

00001f84 <spi_xfer>:
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) 
{
	SPDR = c;
    1f84:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & _BV(SPIF)))
    1f86:	0d b4       	in	r0, 0x2d	; 45
    1f88:	07 fe       	sbrs	r0, 7
    1f8a:	fd cf       	rjmp	.-6      	; 0x1f86 <spi_xfer+0x2>
		;
}
    1f8c:	08 95       	ret

00001f8e <setdisplay>:
}

// This changes and updates the display
// We use the digit/segment table to determine which
// pins on the MAX6921 to turn on
void setdisplay(uint8_t digit, uint8_t segments) {
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
	uint32_t d = 0;	// we only need 20 bits but 32 will do
	uint8_t i;

	// Set the digit selection pin
	d |= _BV(pgm_read_byte(digittable_p + digit));
    1fa2:	e8 2f       	mov	r30, r24
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	e0 54       	subi	r30, 0x40	; 64
    1fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1faa:	e4 91       	lpm	r30, Z
    1fac:	21 e0       	ldi	r18, 0x01	; 1
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <setdisplay+0x28>
    1fb2:	22 0f       	add	r18, r18
    1fb4:	33 1f       	adc	r19, r19
    1fb6:	ea 95       	dec	r30
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <setdisplay+0x24>
    1fba:	69 01       	movw	r12, r18
    1fbc:	ee 24       	eor	r14, r14
    1fbe:	d7 fc       	sbrc	r13, 7
    1fc0:	e0 94       	com	r14
    1fc2:	fe 2c       	mov	r15, r14
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
		if (segments & _BV(i))
    1fc8:	a6 2f       	mov	r26, r22
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
			d |= ((uint32_t)1 << pgm_read_byte(segmenttable_p + i));
    1fcc:	11 e0       	ldi	r17, 0x01	; 1
    1fce:	81 2e       	mov	r8, r17
    1fd0:	91 2c       	mov	r9, r1
    1fd2:	a1 2c       	mov	r10, r1
    1fd4:	b1 2c       	mov	r11, r1
	d |= _BV(pgm_read_byte(digittable_p + digit));

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
		if (segments & _BV(i))
    1fd6:	9d 01       	movw	r18, r26
    1fd8:	08 2e       	mov	r0, r24
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <setdisplay+0x52>
    1fdc:	35 95       	asr	r19
    1fde:	27 95       	ror	r18
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <setdisplay+0x4e>
    1fe4:	20 ff       	sbrs	r18, 0
    1fe6:	11 c0       	rjmp	.+34     	; 0x200a <setdisplay+0x7c>
			d |= ((uint32_t)1 << pgm_read_byte(segmenttable_p + i));
    1fe8:	fc 01       	movw	r30, r24
    1fea:	ea 54       	subi	r30, 0x4A	; 74
    1fec:	fe 4f       	sbci	r31, 0xFE	; 254
    1fee:	44 91       	lpm	r20, Z
    1ff0:	95 01       	movw	r18, r10
    1ff2:	84 01       	movw	r16, r8
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <setdisplay+0x70>
    1ff6:	00 0f       	add	r16, r16
    1ff8:	11 1f       	adc	r17, r17
    1ffa:	22 1f       	adc	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	4a 95       	dec	r20
    2000:	d2 f7       	brpl	.-12     	; 0x1ff6 <setdisplay+0x68>
    2002:	c0 2a       	or	r12, r16
    2004:	d1 2a       	or	r13, r17
    2006:	e2 2a       	or	r14, r18
    2008:	f3 2a       	or	r15, r19
    200a:	01 96       	adiw	r24, 0x01	; 1
	// Set the digit selection pin
	d |= _BV(pgm_read_byte(digittable_p + digit));

	
	// Set the individual segments for this digit
	for (i=0; i<8; i++) {
    200c:	88 30       	cpi	r24, 0x08	; 8
    200e:	91 05       	cpc	r25, r1
    2010:	11 f7       	brne	.-60     	; 0x1fd6 <setdisplay+0x48>
	}

	// Shift the data out to the display

	// send lowest 20 bits
	cli();			 // to prevent flicker we turn off interrupts
    2012:	f8 94       	cli
	spi_xfer(d >> 16);
    2014:	8e 2d       	mov	r24, r14
    2016:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <spi_xfer>
	spi_xfer(d >> 8);
    201a:	8d 2d       	mov	r24, r13
    201c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <spi_xfer>
	spi_xfer(d);
    2020:	8c 2d       	mov	r24, r12
    2022:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <spi_xfer>

	// latch data
	VFDLOAD_PORT |= _BV(VFDLOAD);
    2026:	40 9a       	sbi	0x08, 0	; 8
	VFDLOAD_PORT &= ~_BV(VFDLOAD);
    2028:	40 98       	cbi	0x08, 0	; 8
	sei();
    202a:	78 94       	sei
}
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
    203c:	9f 90       	pop	r9
    203e:	8f 90       	pop	r8
    2040:	08 95       	ret

00002042 <__vector_16>:

/******************************** TIMER INTERRUPTS ********************************/

// Timer 0 overflow -- display multiplex -- called @ (F_CPU/256) = ~30khz (31.25 khz)
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    2042:	78 94       	sei
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ef 93       	push	r30
    2074:	ff 93       	push	r31
	if (++mildiv >= MIL_DIVIDER) {
    2076:	80 91 3c 01 	lds	r24, 0x013C
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	80 93 3c 01 	sts	0x013C, r24
    2080:	8f 31       	cpi	r24, 0x1F	; 31
    2082:	08 f4       	brcc	.+2      	; 0x2086 <__vector_16+0x44>
    2084:	99 c0       	rjmp	.+306    	; 0x21b8 <__vector_16+0x176>
		// Everything in this block happens every millisecond
		uint16_t *ptimer;
		uint8_t button;
		
		OCR0A = ocr0a;	// prevents flicker
    2086:	80 91 3d 01 	lds	r24, 0x013D
    208a:	87 bd       	out	0x27, r24	; 39
		mildiv = 0;
    208c:	10 92 3c 01 	sts	0x013C, r1
		milliseconds++;
    2090:	80 91 10 01 	lds	r24, 0x0110
    2094:	90 91 11 01 	lds	r25, 0x0111
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	90 93 11 01 	sts	0x0111, r25
    209e:	80 93 10 01 	sts	0x0110, r24
		
		// check if we should have the buzzer on
		if (alarming && !snoozetimer) {
    20a2:	80 91 3a 01 	lds	r24, 0x013A
    20a6:	88 23       	and	r24, r24
    20a8:	49 f1       	breq	.+82     	; 0x20fc <__vector_16+0xba>
    20aa:	80 91 43 01 	lds	r24, 0x0143
    20ae:	90 91 44 01 	lds	r25, 0x0144
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	19 f5       	brne	.+70     	; 0x20fc <__vector_16+0xba>
			alarmdiv++;
    20b6:	80 91 12 01 	lds	r24, 0x0112
    20ba:	90 91 13 01 	lds	r25, 0x0113
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	90 93 13 01 	sts	0x0113, r25
    20c4:	80 93 12 01 	sts	0x0112, r24
			if (alarmdiv > ALARM_DIVIDER) {
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	8d 32       	cpi	r24, 0x2D	; 45
    20cc:	92 07       	cpc	r25, r18
    20ce:	b0 f0       	brcs	.+44     	; 0x20fc <__vector_16+0xba>
				// This part only gets reached at about 1Hz
				alarmdiv = 0;
    20d0:	10 92 13 01 	sts	0x0113, r1
    20d4:	10 92 12 01 	sts	0x0112, r1
				beep (4000, ALARM_BEEP, (alarming & 0x80));	// Runs in background
    20d8:	40 91 3a 01 	lds	r20, 0x013A
    20dc:	40 78       	andi	r20, 0x80	; 128
    20de:	80 ea       	ldi	r24, 0xA0	; 160
    20e0:	9f e0       	ldi	r25, 0x0F	; 15
    20e2:	68 e5       	ldi	r22, 0x58	; 88
    20e4:	72 e0       	ldi	r23, 0x02	; 2
    20e6:	0e 94 2b 03 	call	0x656	; 0x656 <beep>
				if (!(alarming & 0x80))
    20ea:	80 91 3a 01 	lds	r24, 0x013A
    20ee:	87 fd       	sbrc	r24, 7
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <__vector_16+0xba>
					alarming += 0x4;		// increment beep count
    20f2:	80 91 3a 01 	lds	r24, 0x013A
    20f6:	8c 5f       	subi	r24, 0xFC	; 252
    20f8:	80 93 3a 01 	sts	0x013A, r24

/******************************** TIMER INTERRUPTS ********************************/

// Timer 0 overflow -- display multiplex -- called @ (F_CPU/256) = ~30khz (31.25 khz)
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    20fc:	00 e0       	ldi	r16, 0x00	; 0
    20fe:	10 e0       	ldi	r17, 0x00	; 0
    2100:	cf e1       	ldi	r28, 0x1F	; 31
    2102:	d1 e0       	ldi	r29, 0x01	; 1
					else if (*ptimer == BT_HELD) {
						buttons |= _BV(button);		// Signal another button press
						tick();
						(*ptimer)++;			// Start timing to repeat
					} else if (++(*ptimer) >= BT_REPEAT)
						*ptimer = BT_HELD;
    2104:	88 ee       	ldi	r24, 0xE8	; 232
    2106:	c8 2e       	mov	r12, r24
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	d8 2e       	mov	r13, r24
					(*ptimer)++;			// Timer stops here unless repeated button
				} else if (brepeat & _BV(button)) {
					if (*ptimer < BT_HELD)
						(*ptimer)++;
					else if (*ptimer == BT_HELD) {
						buttons |= _BV(button);		// Signal another button press
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	e9 2e       	mov	r14, r25
    2110:	f1 2c       	mov	r15, r1
			}			
		}
		
		// Button timing processing
		for (ptimer = btimer, button = 0; button < BT_NUM; ptimer++, button++) {
			if (*ptimer) {	// timer set to 1 when button down detected by ISR
    2112:	28 81       	ld	r18, Y
    2114:	39 81       	ldd	r19, Y+1	; 0x01
    2116:	21 15       	cp	r18, r1
    2118:	31 05       	cpc	r19, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <__vector_16+0xdc>
    211c:	46 c0       	rjmp	.+140    	; 0x21aa <__vector_16+0x168>
				if (*ptimer < BT_DEBOUNCE)
    211e:	29 31       	cpi	r18, 0x19	; 25
    2120:	31 05       	cpc	r19, r1
    2122:	e0 f0       	brcs	.+56     	; 0x215c <__vector_16+0x11a>
					(*ptimer)++;			// May still be bouncing
				else if (*ptimer == BT_DEBOUNCE) {
    2124:	29 31       	cpi	r18, 0x19	; 25
    2126:	31 05       	cpc	r19, r1
    2128:	51 f4       	brne	.+20     	; 0x213e <__vector_16+0xfc>
					buttons |= _BV(button);		// Hasn't bounced yet, must really be down
    212a:	20 91 3b 01 	lds	r18, 0x013B
    212e:	c7 01       	movw	r24, r14
    2130:	00 2e       	mov	r0, r16
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <__vector_16+0xf6>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <__vector_16+0xf2>
    213c:	21 c0       	rjmp	.+66     	; 0x2180 <__vector_16+0x13e>
					tick();
					(*ptimer)++;			// Timer stops here unless repeated button
				} else if (brepeat & _BV(button)) {
    213e:	80 91 3f 01 	lds	r24, 0x013F
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	00 2e       	mov	r0, r16
    2146:	02 c0       	rjmp	.+4      	; 0x214c <__vector_16+0x10a>
    2148:	95 95       	asr	r25
    214a:	87 95       	ror	r24
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <__vector_16+0x106>
    2150:	80 ff       	sbrs	r24, 0
    2152:	2b c0       	rjmp	.+86     	; 0x21aa <__vector_16+0x168>
					if (*ptimer < BT_HELD)
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	28 3e       	cpi	r18, 0xE8	; 232
    2158:	38 07       	cpc	r19, r24
    215a:	28 f4       	brcc	.+10     	; 0x2166 <__vector_16+0x124>
						(*ptimer)++;
    215c:	2f 5f       	subi	r18, 0xFF	; 255
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	39 83       	std	Y+1, r19	; 0x01
    2162:	28 83       	st	Y, r18
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <__vector_16+0x168>
					else if (*ptimer == BT_HELD) {
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	28 3e       	cpi	r18, 0xE8	; 232
    216a:	38 07       	cpc	r19, r24
    216c:	a1 f4       	brne	.+40     	; 0x2196 <__vector_16+0x154>
						buttons |= _BV(button);		// Signal another button press
    216e:	20 91 3b 01 	lds	r18, 0x013B
    2172:	c7 01       	movw	r24, r14
    2174:	00 2e       	mov	r0, r16
    2176:	02 c0       	rjmp	.+4      	; 0x217c <__vector_16+0x13a>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <__vector_16+0x136>
    2180:	28 2b       	or	r18, r24
    2182:	20 93 3b 01 	sts	0x013B, r18
						tick();
    2186:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <tick>
						(*ptimer)++;			// Start timing to repeat
    218a:	88 81       	ld	r24, Y
    218c:	99 81       	ldd	r25, Y+1	; 0x01
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	99 83       	std	Y+1, r25	; 0x01
    2192:	88 83       	st	Y, r24
    2194:	0a c0       	rjmp	.+20     	; 0x21aa <__vector_16+0x168>
					} else if (++(*ptimer) >= BT_REPEAT)
    2196:	2f 5f       	subi	r18, 0xFF	; 255
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	39 83       	std	Y+1, r19	; 0x01
    219c:	28 83       	st	Y, r18
    219e:	84 e0       	ldi	r24, 0x04	; 4
    21a0:	20 3b       	cpi	r18, 0xB0	; 176
    21a2:	38 07       	cpc	r19, r24
    21a4:	10 f0       	brcs	.+4      	; 0x21aa <__vector_16+0x168>
						*ptimer = BT_HELD;
    21a6:	d9 82       	std	Y+1, r13	; 0x01
    21a8:	c8 82       	st	Y, r12
					alarming += 0x4;		// increment beep count
			}			
		}
		
		// Button timing processing
		for (ptimer = btimer, button = 0; button < BT_NUM; ptimer++, button++) {
    21aa:	22 96       	adiw	r28, 0x02	; 2
    21ac:	0f 5f       	subi	r16, 0xFF	; 255
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	05 30       	cpi	r16, 0x05	; 5
    21b2:	11 05       	cpc	r17, r1
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <__vector_16+0x176>
    21b6:	ad cf       	rjmp	.-166    	; 0x2112 <__vector_16+0xd0>
				}
			}
		}
	}	

	if (++muxdiv >= pgm_read_byte(mux_divider + currdigit)) {
    21b8:	80 91 47 01 	lds	r24, 0x0147
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	80 93 47 01 	sts	0x0147, r24
    21c2:	90 91 16 01 	lds	r25, 0x0116
    21c6:	e9 2f       	mov	r30, r25
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	e5 55       	subi	r30, 0x55	; 85
    21cc:	fe 4f       	sbci	r31, 0xFE	; 254
    21ce:	e4 91       	lpm	r30, Z
    21d0:	8e 17       	cp	r24, r30
    21d2:	e0 f1       	brcs	.+120    	; 0x224c <__vector_16+0x20a>
		muxdiv = 0;
    21d4:	10 92 47 01 	sts	0x0147, r1
	
		// Cycle through each digit in the display
		if (++currdigit >= DISPLAYSIZE) {
    21d8:	9f 5f       	subi	r25, 0xFF	; 255
    21da:	90 93 16 01 	sts	0x0116, r25
    21de:	99 30       	cpi	r25, 0x09	; 9
    21e0:	60 f1       	brcs	.+88     	; 0x223a <__vector_16+0x1f8>
			currdigit = 0;
    21e2:	10 92 16 01 	sts	0x0116, r1

			if (flag(f_show_time)) {
    21e6:	80 91 46 01 	lds	r24, 0x0146
    21ea:	87 ff       	sbrs	r24, 7
    21ec:	26 c0       	rjmp	.+76     	; 0x223a <__vector_16+0x1f8>
				if (snoozetimer) {
    21ee:	80 91 43 01 	lds	r24, 0x0143
    21f2:	90 91 44 01 	lds	r25, 0x0144
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	a9 f0       	breq	.+42     	; 0x2224 <__vector_16+0x1e2>
					// blink alarm indicator while snoozing
					if (++snoozediv > SNOOZE_DIVIDER) {
    21fa:	80 91 36 01 	lds	r24, 0x0136
    21fe:	90 91 37 01 	lds	r25, 0x0137
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	90 93 37 01 	sts	0x0137, r25
    2208:	80 93 36 01 	sts	0x0136, r24
    220c:	83 33       	cpi	r24, 0x33	; 51
    220e:	91 05       	cpc	r25, r1
    2210:	a0 f0       	brcs	.+40     	; 0x223a <__vector_16+0x1f8>
						snoozediv = 0;
    2212:	10 92 37 01 	sts	0x0137, r1
    2216:	10 92 36 01 	sts	0x0136, r1
						display[0] ^= 0x2;
    221a:	80 91 2a 01 	lds	r24, 0x012A
    221e:	92 e0       	ldi	r25, 0x02	; 2
    2220:	89 27       	eor	r24, r25
    2222:	09 c0       	rjmp	.+18     	; 0x2236 <__vector_16+0x1f4>
					}			
				} else
					display[0] = (flag(f_alarm_on)) ? (display[0] | 0x2) : (display[0] & ~0x2);
    2224:	90 91 46 01 	lds	r25, 0x0146
    2228:	80 91 2a 01 	lds	r24, 0x012A
    222c:	96 ff       	sbrs	r25, 6
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <__vector_16+0x1f2>
    2230:	82 60       	ori	r24, 0x02	; 2
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <__vector_16+0x1f4>
    2234:	8d 7f       	andi	r24, 0xFD	; 253
    2236:	80 93 2a 01 	sts	0x012A, r24
			}
		}

		// Set the current display's segments
		setdisplay(currdigit, display[currdigit]);
    223a:	80 91 16 01 	lds	r24, 0x0116
    223e:	e8 2f       	mov	r30, r24
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	e6 5d       	subi	r30, 0xD6	; 214
    2244:	fe 4f       	sbci	r31, 0xFE	; 254
    2246:	60 81       	ld	r22, Z
    2248:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <setdisplay>
	}	
}
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	0f 90       	pop	r0
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	0f 90       	pop	r0
    227a:	1f 90       	pop	r1
    227c:	18 95       	reti

0000227e <twiStart>:
*/
static uint8_t twiStart (void)
{
	uint8_t stat;
	
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
    227e:	84 ea       	ldi	r24, 0xA4	; 164
    2280:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    2284:	80 91 bc 00 	lds	r24, 0x00BC
    2288:	87 ff       	sbrs	r24, 7
    228a:	fc cf       	rjmp	.-8      	; 0x2284 <twiStart+0x6>
	stat = TWSR & 0xf8;
    228c:	90 91 b9 00 	lds	r25, 0x00B9
    2290:	98 7f       	andi	r25, 0xF8	; 248
	if ((stat == SR_START) || (stat == SR_RSTART))
    2292:	98 30       	cpi	r25, 0x08	; 8
    2294:	29 f0       	breq	.+10     	; 0x22a0 <twiStart+0x22>
		return 0;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 31       	cpi	r25, 0x10	; 16
    229a:	19 f4       	brne	.+6      	; 0x22a2 <twiStart+0x24>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	08 95       	ret
    22a0:	80 e0       	ldi	r24, 0x00	; 0
	twiError (SR_START, stat);
	return 1;
}
    22a2:	08 95       	ret

000022a4 <twiWrite>:
/*
** Write one byte of data
*/
static inline void twiWrite(const uint8_t data)
{
	TWDR = data;
    22a4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    22a8:	84 e8       	ldi	r24, 0x84	; 132
    22aa:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    22ae:	80 91 bc 00 	lds	r24, 0x00BC
    22b2:	87 ff       	sbrs	r24, 7
    22b4:	fc cf       	rjmp	.-8      	; 0x22ae <twiWrite+0xa>
}
    22b6:	08 95       	ret

000022b8 <twiError>:
	char d[12];
	
	sprintf_P (d, twi_fmt, expected, received);
	uart_puts (d);
#endif
}
    22b8:	08 95       	ret

000022ba <twiWriteReg>:

/*
** Write <data> into register <reg> of device at address <addr>
*/
int twiWriteReg(const uint8_t addr, const uint8_t reg, const uint8_t data)
{
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	c8 2f       	mov	r28, r24
    22c2:	d6 2f       	mov	r29, r22
    22c4:	14 2f       	mov	r17, r20
	if (twiStart() == 0) {
    22c6:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    22ca:	88 23       	and	r24, r24
    22cc:	f9 f4       	brne	.+62     	; 0x230c <twiWriteReg+0x52>
		twiWrite((addr & 0xfe) | W);
    22ce:	8c 2f       	mov	r24, r28
    22d0:	8e 7f       	andi	r24, 0xFE	; 254
    22d2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
		if (TWSR != SR_SLA_WA)
    22d6:	80 91 b9 00 	lds	r24, 0x00B9
    22da:	88 31       	cpi	r24, 0x18	; 24
    22dc:	71 f4       	brne	.+28     	; 0x22fa <twiWriteReg+0x40>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    22de:	8d 2f       	mov	r24, r29
    22e0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
			if (TWSR != SR_DTA_A)
    22e4:	80 91 b9 00 	lds	r24, 0x00B9
    22e8:	88 32       	cpi	r24, 0x28	; 40
    22ea:	39 f4       	brne	.+14     	; 0x22fa <twiWriteReg+0x40>
				twiError(SR_DTA_A, TWSR);
			else {
				twiWrite(data);
    22ec:	81 2f       	mov	r24, r17
    22ee:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
				if (TWSR != SR_DTA_A)
    22f2:	80 91 b9 00 	lds	r24, 0x00B9
    22f6:	88 32       	cpi	r24, 0x28	; 40
    22f8:	19 f0       	breq	.+6      	; 0x2300 <twiWriteReg+0x46>
					twiError(SR_DTA_A, TWSR);
    22fa:	80 91 b9 00 	lds	r24, 0x00B9
    22fe:	06 c0       	rjmp	.+12     	; 0x230c <twiWriteReg+0x52>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2300:	84 e9       	ldi	r24, 0x94	; 148
    2302:	80 93 bc 00 	sts	0x00BC, r24
				twiWrite(data);
				if (TWSR != SR_DTA_A)
					twiError(SR_DTA_A, TWSR);
				else {
					twiStop();
					return 0;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <twiWriteReg+0x5a>
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    230c:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    2310:	8f ef       	ldi	r24, 0xFF	; 255
    2312:	9f ef       	ldi	r25, 0xFF	; 255
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	08 95       	ret

0000231c <twiWriteRegN>:

/*
** Write N sequential bytes of data starting at register <reg>
*/
int twiWriteRegN(const uint8_t addr, const uint8_t reg, uint8_t n, void *pdata)
{
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	18 2f       	mov	r17, r24
    2328:	06 2f       	mov	r16, r22
    232a:	f4 2e       	mov	r15, r20
    232c:	e9 01       	movw	r28, r18
	if (twiStart() == 0) {
    232e:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    2332:	88 23       	and	r24, r24
    2334:	21 f5       	brne	.+72     	; 0x237e <twiWriteRegN+0x62>
		twiWrite((addr & 0xfe) | W);
    2336:	81 2f       	mov	r24, r17
    2338:	8e 7f       	andi	r24, 0xFE	; 254
    233a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
		if (TWSR != SR_SLA_WA)
    233e:	80 91 b9 00 	lds	r24, 0x00B9
    2342:	88 31       	cpi	r24, 0x18	; 24
    2344:	79 f4       	brne	.+30     	; 0x2364 <twiWriteRegN+0x48>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    2346:	80 2f       	mov	r24, r16
    2348:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
			if (TWSR != SR_DTA_A)
    234c:	80 91 b9 00 	lds	r24, 0x00B9
    2350:	88 32       	cpi	r24, 0x28	; 40
    2352:	69 f0       	breq	.+26     	; 0x236e <twiWriteRegN+0x52>
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <twiWriteRegN+0x48>
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
					twiWrite(*(uint8_t *)pdata++);
    2356:	88 81       	ld	r24, Y
    2358:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
					if (TWSR != SR_DTA_A) {
    235c:	80 91 b9 00 	lds	r24, 0x00B9
    2360:	88 32       	cpi	r24, 0x28	; 40
    2362:	19 f0       	breq	.+6      	; 0x236a <twiWriteRegN+0x4e>
						twiError(SR_DTA_A, TWSR);
    2364:	80 91 b9 00 	lds	r24, 0x00B9
    2368:	0a c0       	rjmp	.+20     	; 0x237e <twiWriteRegN+0x62>
			twiWrite(reg);
			if (TWSR != SR_DTA_A)
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
					twiWrite(*(uint8_t *)pdata++);
    236a:	21 96       	adiw	r28, 0x01	; 1
					if (TWSR != SR_DTA_A) {
						twiError(SR_DTA_A, TWSR);
						TWCR = 0;
						return -1;
					}
					n--;
    236c:	fa 94       	dec	r15
		else {
			twiWrite(reg);
			if (TWSR != SR_DTA_A)
				twiError(SR_DTA_A, TWSR);
			else {
				while (n > 0) {
    236e:	ff 20       	and	r15, r15
    2370:	91 f7       	brne	.-28     	; 0x2356 <twiWriteRegN+0x3a>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2372:	84 e9       	ldi	r24, 0x94	; 148
    2374:	80 93 bc 00 	sts	0x00BC, r24
						return -1;
					}
					n--;
				}
				twiStop();
				return 0;				
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <twiWriteRegN+0x6a>
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    237e:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	9f ef       	ldi	r25, 0xFF	; 255
}
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	08 95       	ret

00002392 <twiReadReg>:

/*
** Read register <reg> from device at address <addr>
*/
int twiReadReg(const uint8_t addr, const uint8_t reg)
{
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	c8 2f       	mov	r28, r24
    2398:	d6 2f       	mov	r29, r22
	uint8_t dr;
	
	if (twiStart() == 0) {
    239a:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    239e:	88 23       	and	r24, r24
    23a0:	81 f5       	brne	.+96     	; 0x2402 <twiReadReg+0x70>
		twiWrite((addr & 0xfe) | W);
    23a2:	8c 2f       	mov	r24, r28
    23a4:	8e 7f       	andi	r24, 0xFE	; 254
    23a6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
		if (TWSR != SR_SLA_WA)
    23aa:	80 91 b9 00 	lds	r24, 0x00B9
    23ae:	88 31       	cpi	r24, 0x18	; 24
    23b0:	f1 f4       	brne	.+60     	; 0x23ee <twiReadReg+0x5c>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    23b2:	8d 2f       	mov	r24, r29
    23b4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
			if (TWSR != SR_DTA_A)
    23b8:	80 91 b9 00 	lds	r24, 0x00B9
    23bc:	88 32       	cpi	r24, 0x28	; 40
    23be:	b9 f4       	brne	.+46     	; 0x23ee <twiReadReg+0x5c>
				twiError(SR_DTA_A, TWSR);
			else if (twiStart() == 0) {
    23c0:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    23c4:	88 23       	and	r24, r24
    23c6:	e9 f4       	brne	.+58     	; 0x2402 <twiReadReg+0x70>
				twiWrite((addr & 0xfe) | R);
    23c8:	8c 2f       	mov	r24, r28
    23ca:	81 60       	ori	r24, 0x01	; 1
    23cc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
				if (TWSR != SR_SLA_RA)
    23d0:	80 91 b9 00 	lds	r24, 0x00B9
    23d4:	80 34       	cpi	r24, 0x40	; 64
    23d6:	59 f4       	brne	.+22     	; 0x23ee <twiReadReg+0x5c>
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    23d8:	84 e8       	ldi	r24, 0x84	; 132
    23da:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    23de:	80 91 bc 00 	lds	r24, 0x00BC
    23e2:	87 ff       	sbrs	r24, 7
    23e4:	fc cf       	rjmp	.-8      	; 0x23de <twiReadReg+0x4c>
				twiWrite((addr & 0xfe) | R);
				if (TWSR != SR_SLA_RA)
					twiError(SR_SLA_RA, TWSR);
				else {
					twiReadNack();
					if (TWSR != SR_DTR)
    23e6:	80 91 b9 00 	lds	r24, 0x00B9
    23ea:	88 35       	cpi	r24, 0x58	; 88
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <twiReadReg+0x62>
						twiError(SR_DTR, TWSR);
    23ee:	80 91 b9 00 	lds	r24, 0x00B9
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <twiReadReg+0x70>
					else {
						dr = TWDR;
    23f4:	80 91 bb 00 	lds	r24, 0x00BB
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    23f8:	94 e9       	ldi	r25, 0x94	; 148
    23fa:	90 93 bc 00 	sts	0x00BC, r25
					if (TWSR != SR_DTR)
						twiError(SR_DTR, TWSR);
					else {
						dr = TWDR;
						twiStop();
						return (dr);
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	04 c0       	rjmp	.+8      	; 0x240a <twiReadReg+0x78>
					}
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    2402:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    2406:	8f ef       	ldi	r24, 0xFF	; 255
    2408:	9f ef       	ldi	r25, 0xFF	; 255
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <twiReadRegN>:
** Read N sequential bytes of data starting at register <reg>
**
** Note pdata must point to a buffer of sufficient size.
*/
int twiReadRegN(const uint8_t addr, const uint8_t reg, uint8_t n, void *pdata)
{
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	18 2f       	mov	r17, r24
    241c:	06 2f       	mov	r16, r22
    241e:	f4 2e       	mov	r15, r20
    2420:	e9 01       	movw	r28, r18
	if (twiStart() == 0) {
    2422:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    2426:	88 23       	and	r24, r24
    2428:	09 f0       	breq	.+2      	; 0x242c <twiReadRegN+0x1c>
    242a:	46 c0       	rjmp	.+140    	; 0x24b8 <twiReadRegN+0xa8>
		twiWrite((addr & 0xfe) | W);
    242c:	81 2f       	mov	r24, r17
    242e:	8e 7f       	andi	r24, 0xFE	; 254
    2430:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
		if (TWSR != SR_SLA_WA)
    2434:	80 91 b9 00 	lds	r24, 0x00B9
    2438:	88 31       	cpi	r24, 0x18	; 24
    243a:	61 f5       	brne	.+88     	; 0x2494 <twiReadRegN+0x84>
			twiError(SR_SLA_WA, TWSR);
		else {
			twiWrite(reg);
    243c:	80 2f       	mov	r24, r16
    243e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
			if (TWSR != SR_DTA_A)
    2442:	80 91 b9 00 	lds	r24, 0x00B9
    2446:	88 32       	cpi	r24, 0x28	; 40
    2448:	29 f5       	brne	.+74     	; 0x2494 <twiReadRegN+0x84>
				twiError(SR_DTA_A, TWSR);
			else if (twiStart() == 0) {
    244a:	0e 94 3f 11 	call	0x227e	; 0x227e <twiStart>
    244e:	88 23       	and	r24, r24
    2450:	99 f5       	brne	.+102    	; 0x24b8 <twiReadRegN+0xa8>
				twiWrite((addr & 0xfe) | R);
    2452:	81 2f       	mov	r24, r17
    2454:	81 60       	ori	r24, 0x01	; 1
    2456:	0e 94 52 11 	call	0x22a4	; 0x22a4 <twiWrite>
				if (TWSR != SR_SLA_RA)
    245a:	80 91 b9 00 	lds	r24, 0x00B9
    245e:	80 34       	cpi	r24, 0x40	; 64
    2460:	09 f1       	breq	.+66     	; 0x24a4 <twiReadRegN+0x94>
    2462:	18 c0       	rjmp	.+48     	; 0x2494 <twiReadRegN+0x84>
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
						if (n == 1) {
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	f2 16       	cp	r15, r18
    2468:	59 f4       	brne	.+22     	; 0x2480 <twiReadRegN+0x70>
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    246a:	80 93 bc 00 	sts	0x00BC, r24
	twiWait();
    246e:	20 91 bc 00 	lds	r18, 0x00BC
    2472:	27 ff       	sbrs	r18, 7
    2474:	fc cf       	rjmp	.-8      	; 0x246e <twiReadRegN+0x5e>
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
						if (n == 1) {
							twiReadNack();	/* Last byte */
							if (TWSR != SR_DTR) {
    2476:	20 91 b9 00 	lds	r18, 0x00B9
    247a:	28 35       	cpi	r18, 0x58	; 88
    247c:	71 f0       	breq	.+28     	; 0x249a <twiReadRegN+0x8a>
    247e:	0a c0       	rjmp	.+20     	; 0x2494 <twiReadRegN+0x84>
/*
** Read one byte of data
*/
static inline void twiRead(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    2480:	90 93 bc 00 	sts	0x00BC, r25
	twiWait();
    2484:	20 91 bc 00 	lds	r18, 0x00BC
    2488:	27 ff       	sbrs	r18, 7
    248a:	fc cf       	rjmp	.-8      	; 0x2484 <twiReadRegN+0x74>
								TWCR = 0;		/* Disable TWI */
								return -1;
							}
						} else {
							twiRead();
							if (TWSR != SR_DTR_A) {
    248c:	20 91 b9 00 	lds	r18, 0x00B9
    2490:	20 35       	cpi	r18, 0x50	; 80
    2492:	19 f0       	breq	.+6      	; 0x249a <twiReadRegN+0x8a>
								twiError(SR_DTR_A, TWSR);
    2494:	80 91 b9 00 	lds	r24, 0x00B9
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <twiReadRegN+0xa8>
								TWCR = 0;		/* Disable TWI */
								return -1;
							}
						}
						*(uint8_t *)pdata++ = TWDR;
    249a:	20 91 bb 00 	lds	r18, 0x00BB
    249e:	29 93       	st	Y+, r18
						n--;
    24a0:	fa 94       	dec	r15
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <twiReadRegN+0x98>
/*
** Read one byte of data
*/
static inline void twiRead(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    24a4:	94 ec       	ldi	r25, 0xC4	; 196
/*
** Read one byte without ACK
*/
static inline void twiReadNack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
    24a6:	84 e8       	ldi	r24, 0x84	; 132
			else if (twiStart() == 0) {
				twiWrite((addr & 0xfe) | R);
				if (TWSR != SR_SLA_RA)
					twiError(SR_SLA_RA, TWSR);
				else {
					while (n > 0) {
    24a8:	ff 20       	and	r15, r15
    24aa:	e1 f6       	brne	.-72     	; 0x2464 <twiReadRegN+0x54>
/*
** Issue STOP condition on TWI bus
*/
static inline void twiStop (void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    24ac:	84 e9       	ldi	r24, 0x94	; 148
    24ae:	80 93 bc 00 	sts	0x00BC, r24
						}
						*(uint8_t *)pdata++ = TWDR;
						n--;
					}
					twiStop();
					return 0;
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <twiReadRegN+0xb0>
				}
			}
		}
	}
	TWCR = 0;		/* Disable TWI */
    24b8:	10 92 bc 00 	sts	0x00BC, r1
	return -1;
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	9f ef       	ldi	r25, 0xFF	; 255
}
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	08 95       	ret

000024cc <twiInit>:

void twiInit (void)
{
	/* SCL freq = CPU clock/(16+2*TWBR*4^TWPS) */
	TWSR = 0x00;		/* prescale CPU/1 (Note: for status comparisons to work, must be =0) */
    24cc:	10 92 b9 00 	sts	0x00B9, r1
	
	/* Min TWBR is 10 */
	//TWBR = 0xff;		/* 15.2khz for debugging */
	TWBR = 32;			/* 100khz */
    24d0:	80 e2       	ldi	r24, 0x20	; 32
    24d2:	80 93 b8 00 	sts	0x00B8, r24
}
    24d6:	08 95       	ret

000024d8 <delay_10us>:

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <delay_10us+0xc>
    ns--;
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	9e e1       	ldi	r25, 0x1E	; 30
    for (i=0; i< 30; i++) {
      nop;
    24de:	00 00       	nop
    24e0:	91 50       	subi	r25, 0x01	; 1
{
  uint8_t i;
  
  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    24e2:	e9 f7       	brne	.-6      	; 0x24de <delay_10us+0x6>

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    24e4:	88 23       	and	r24, r24
    24e6:	c9 f7       	brne	.-14     	; 0x24da <delay_10us+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    }
  }
}
    24e8:	08 95       	ret

000024ea <delay_s>:

void delay_s(uint8_t s) {
  while (s--) {
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <delay_s+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24ec:	2f ef       	ldi	r18, 0xFF	; 255
    24ee:	39 e6       	ldi	r19, 0x69	; 105
    24f0:	48 e1       	ldi	r20, 0x18	; 24
    24f2:	21 50       	subi	r18, 0x01	; 1
    24f4:	30 40       	sbci	r19, 0x00	; 0
    24f6:	40 40       	sbci	r20, 0x00	; 0
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <delay_s+0x8>
    24fa:	00 c0       	rjmp	.+0      	; 0x24fc <delay_s+0x12>
    24fc:	00 00       	nop
    24fe:	81 50       	subi	r24, 0x01	; 1
    2500:	88 23       	and	r24, r24
    2502:	a1 f7       	brne	.-24     	; 0x24ec <delay_s+0x2>
    _delay_ms(1000);
  }
}
    2504:	08 95       	ret

00002506 <uart_init>:

#if DEBUG
void uart_init(uint16_t BRR) {
  /* setup the main UART */
  UBRR0 = BRR;               // set baudrate counter
    2506:	90 93 c5 00 	sts	0x00C5, r25
    250a:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    250e:	88 e1       	ldi	r24, 0x18	; 24
    2510:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    2514:	8e e0       	ldi	r24, 0x0E	; 14
    2516:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(PD1);
    251a:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(PD0);
    251c:	50 98       	cbi	0x0a, 0	; 10

}
    251e:	08 95       	ret

00002520 <uart_putchar>:

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2520:	90 91 c0 00 	lds	r25, 0x00C0
    2524:	95 ff       	sbrs	r25, 5
    2526:	fc cf       	rjmp	.-8      	; 0x2520 <uart_putchar>
  UDR0 = c;
    2528:	80 93 c6 00 	sts	0x00C6, r24
  return 0;
}
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	08 95       	ret

00002532 <uart_getchar>:

char uart_getchar(void) {
	while (!(UCSR0A & _BV(RXC0)));
    2532:	80 91 c0 00 	lds	r24, 0x00C0
    2536:	87 ff       	sbrs	r24, 7
    2538:	fc cf       	rjmp	.-8      	; 0x2532 <uart_getchar>
	return UDR0;
    253a:	80 91 c6 00 	lds	r24, 0x00C6
}
    253e:	08 95       	ret

00002540 <uart_getch>:

char uart_getch(void) {
	return (UCSR0A & _BV(RXC0));
    2540:	80 91 c0 00 	lds	r24, 0x00C0
}
    2544:	80 78       	andi	r24, 0x80	; 128
    2546:	08 95       	ret

00002548 <ROM_putstring>:

void ROM_putstring(const char *str, uint8_t nl) {
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	7c 01       	movw	r14, r24
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    255a:	10 e0       	ldi	r17, 0x00	; 0
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <ROM_putstring+0x20>
        uart_putchar(pgm_read_byte(&str[i]));
    255e:	69 83       	std	Y+1, r22	; 0x01
    2560:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
}

void ROM_putstring(const char *str, uint8_t nl) {
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    2564:	1f 5f       	subi	r17, 0xFF	; 255
    2566:	69 81       	ldd	r22, Y+1	; 0x01
    2568:	f7 01       	movw	r30, r14
    256a:	e1 0f       	add	r30, r17
    256c:	f1 1d       	adc	r31, r1
    256e:	84 91       	lpm	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	a9 f7       	brne	.-22     	; 0x255e <ROM_putstring+0x16>
        uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    2574:	66 23       	and	r22, r22
    2576:	31 f0       	breq	.+12     	; 0x2584 <ROM_putstring+0x3c>
        uart_putchar('\n'); uart_putchar('\r');
    2578:	8a e0       	ldi	r24, 0x0A	; 10
    257a:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
    257e:	8d e0       	ldi	r24, 0x0D	; 13
    2580:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
  }
}
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	08 95       	ret

00002592 <uart_puts>:

void uart_puts(const char* str)
{
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	ec 01       	movw	r28, r24
    while(*str)
    2598:	02 c0       	rjmp	.+4      	; 0x259e <uart_puts+0xc>
        uart_putc(*str++);
    259a:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
  }
}

void uart_puts(const char* str)
{
    while(*str)
    259e:	89 91       	ld	r24, Y+
    25a0:	88 23       	and	r24, r24
    25a2:	d9 f7       	brne	.-10     	; 0x259a <uart_puts+0x8>
        uart_putc(*str++);
}
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <uart_puts_P>:

void uart_puts_P(PGM_P str)
{
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	ec 01       	movw	r28, r24
	char c;
	
	while (1) {
		c = pgm_read_byte (str++);
    25b0:	fe 01       	movw	r30, r28
    25b2:	21 96       	adiw	r28, 0x01	; 1
    25b4:	84 91       	lpm	r24, Z
		if (c == 0) break;
    25b6:	88 23       	and	r24, r24
    25b8:	19 f0       	breq	.+6      	; 0x25c0 <uart_puts_P+0x16>
		uart_putc (c);
    25ba:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
	}	
    25be:	f8 cf       	rjmp	.-16     	; 0x25b0 <uart_puts_P+0x6>
}
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    25c6:	cf 93       	push	r28
    25c8:	c8 2f       	mov	r28, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    25ca:	82 95       	swap	r24
    25cc:	8f 70       	andi	r24, 0x0F	; 15
    25ce:	8a 30       	cpi	r24, 0x0A	; 10
    25d0:	10 f4       	brcc	.+4      	; 0x25d6 <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
    25d2:	80 5d       	subi	r24, 0xD0	; 208
    25d4:	01 c0       	rjmp	.+2      	; 0x25d8 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    25d6:	89 5a       	subi	r24, 0xA9	; 169
    25d8:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    25dc:	2c 2f       	mov	r18, r28
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	2f 70       	andi	r18, 0x0F	; 15
    25e2:	30 70       	andi	r19, 0x00	; 0
    25e4:	8c 2f       	mov	r24, r28
    25e6:	8f 70       	andi	r24, 0x0F	; 15
    25e8:	2a 30       	cpi	r18, 0x0A	; 10
    25ea:	31 05       	cpc	r19, r1
    25ec:	14 f4       	brge	.+4      	; 0x25f2 <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
    25ee:	80 5d       	subi	r24, 0xD0	; 208
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <uart_putc_hex+0x2e>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    25f2:	89 5a       	subi	r24, 0xA9	; 169
    25f4:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
}
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    25fc:	cf 93       	push	r28
    25fe:	c8 2f       	mov	r28, r24
    uart_putc_hex((uint8_t) (w >> 8));
    2600:	89 2f       	mov	r24, r25
    2602:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    2606:	8c 2f       	mov	r24, r28
    2608:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <uart_putc_hex>
}
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	6b 01       	movw	r12, r22
    261a:	7c 01       	movw	r14, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    261c:	c7 01       	movw	r24, r14
    261e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    2622:	c6 01       	movw	r24, r12
    2624:	0e 94 fe 12 	call	0x25fc	; 0x25fc <uart_putw_hex>
}
    2628:	ff 90       	pop	r15
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
    2630:	08 95       	ret

00002632 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	8c 01       	movw	r16, r24
    2646:	25 e0       	ldi	r18, 0x05	; 5
    2648:	e2 2e       	mov	r14, r18
    264a:	f1 2c       	mov	r15, r1
    uint16_t num = 10000;
    uint8_t started = 0;
    264c:	20 e0       	ldi	r18, 0x00	; 0
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    264e:	c0 e1       	ldi	r28, 0x10	; 16
    2650:	d7 e2       	ldi	r29, 0x27	; 39
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    2652:	3a e0       	ldi	r19, 0x0A	; 10
    2654:	c3 2e       	mov	r12, r19
    2656:	d1 2c       	mov	r13, r1
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    2658:	c8 01       	movw	r24, r16
    265a:	be 01       	movw	r22, r28
    265c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
    2660:	b6 2e       	mov	r11, r22
        if(b > 0 || started || num == 1)
    2662:	66 23       	and	r22, r22
    2664:	29 f4       	brne	.+10     	; 0x2670 <uart_putw_dec+0x3e>
    2666:	22 23       	and	r18, r18
    2668:	19 f4       	brne	.+6      	; 0x2670 <uart_putw_dec+0x3e>
    266a:	c1 30       	cpi	r28, 0x01	; 1
    266c:	d1 05       	cpc	r29, r1
    266e:	29 f4       	brne	.+10     	; 0x267a <uart_putw_dec+0x48>
        {
            uart_putc('0' + b);
    2670:	8b 2d       	mov	r24, r11
    2672:	80 5d       	subi	r24, 0xD0	; 208
    2674:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
            started = 1;
    2678:	21 e0       	ldi	r18, 0x01	; 1
        }
        w -= b * num;
    267a:	6b 2d       	mov	r22, r11
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	6c 9f       	mul	r22, r28
    2680:	c0 01       	movw	r24, r0
    2682:	6d 9f       	mul	r22, r29
    2684:	90 0d       	add	r25, r0
    2686:	7c 9f       	mul	r23, r28
    2688:	90 0d       	add	r25, r0
    268a:	11 24       	eor	r1, r1
    268c:	08 1b       	sub	r16, r24
    268e:	19 0b       	sbc	r17, r25

        num /= 10;
    2690:	ce 01       	movw	r24, r28
    2692:	b6 01       	movw	r22, r12
    2694:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
    2698:	eb 01       	movw	r28, r22
    269a:	08 94       	sec
    269c:	e1 08       	sbc	r14, r1
    269e:	f1 08       	sbc	r15, r1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    26a0:	e1 14       	cp	r14, r1
    26a2:	f1 04       	cpc	r15, r1
    26a4:	c9 f6       	brne	.-78     	; 0x2658 <uart_putw_dec+0x26>
        }
        w -= b * num;

        num /= 10;
    }
}
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	df 90       	pop	r13
    26b4:	cf 90       	pop	r12
    26b6:	bf 90       	pop	r11
    26b8:	08 95       	ret

000026ba <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    26ba:	4f 92       	push	r4
    26bc:	5f 92       	push	r5
    26be:	6f 92       	push	r6
    26c0:	7f 92       	push	r7
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	bf 92       	push	r11
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	4b 01       	movw	r8, r22
    26dc:	5c 01       	movw	r10, r24
    26de:	0a e0       	ldi	r16, 0x0A	; 10
    26e0:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;
    26e2:	c0 e0       	ldi	r28, 0x00	; 0
    }
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    26e4:	c1 2c       	mov	r12, r1
    26e6:	4a ec       	ldi	r20, 0xCA	; 202
    26e8:	d4 2e       	mov	r13, r20
    26ea:	4a e9       	ldi	r20, 0x9A	; 154
    26ec:	e4 2e       	mov	r14, r20
    26ee:	4b e3       	ldi	r20, 0x3B	; 59
    26f0:	f4 2e       	mov	r15, r20
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    26f2:	5a e0       	ldi	r21, 0x0A	; 10
    26f4:	45 2e       	mov	r4, r21
    26f6:	51 2c       	mov	r5, r1
    26f8:	61 2c       	mov	r6, r1
    26fa:	71 2c       	mov	r7, r1
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    26fc:	c5 01       	movw	r24, r10
    26fe:	b4 01       	movw	r22, r8
    2700:	a7 01       	movw	r20, r14
    2702:	96 01       	movw	r18, r12
    2704:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>
    2708:	d2 2f       	mov	r29, r18
        if(b > 0 || started || num == 1)
    270a:	22 23       	and	r18, r18
    270c:	41 f4       	brne	.+16     	; 0x271e <uart_putdw_dec+0x64>
    270e:	cc 23       	and	r28, r28
    2710:	31 f4       	brne	.+12     	; 0x271e <uart_putdw_dec+0x64>
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	c8 16       	cp	r12, r24
    2716:	d1 04       	cpc	r13, r1
    2718:	e1 04       	cpc	r14, r1
    271a:	f1 04       	cpc	r15, r1
    271c:	29 f4       	brne	.+10     	; 0x2728 <uart_putdw_dec+0x6e>
        {
            uart_putc('0' + b);
    271e:	8d 2f       	mov	r24, r29
    2720:	80 5d       	subi	r24, 0xD0	; 208
    2722:	0e 94 90 12 	call	0x2520	; 0x2520 <uart_putchar>
            started = 1;
    2726:	c1 e0       	ldi	r28, 0x01	; 1
        }
        dw -= b * num;
    2728:	6d 2f       	mov	r22, r29
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a7 01       	movw	r20, r14
    2732:	96 01       	movw	r18, r12
    2734:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsi3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	88 1a       	sub	r8, r24
    273e:	99 0a       	sbc	r9, r25
    2740:	aa 0a       	sbc	r10, r26
    2742:	bb 0a       	sbc	r11, r27

        num /= 10;
    2744:	c7 01       	movw	r24, r14
    2746:	b6 01       	movw	r22, r12
    2748:	a3 01       	movw	r20, r6
    274a:	92 01       	movw	r18, r4
    274c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>
    2750:	69 01       	movw	r12, r18
    2752:	7a 01       	movw	r14, r20
    2754:	01 50       	subi	r16, 0x01	; 1
    2756:	10 40       	sbci	r17, 0x00	; 0
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    2758:	89 f6       	brne	.-94     	; 0x26fc <uart_putdw_dec+0x42>
        }
        dw -= b * num;

        num /= 10;
    }
}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	df 90       	pop	r13
    2768:	cf 90       	pop	r12
    276a:	bf 90       	pop	r11
    276c:	af 90       	pop	r10
    276e:	9f 90       	pop	r9
    2770:	8f 90       	pop	r8
    2772:	7f 90       	pop	r7
    2774:	6f 90       	pop	r6
    2776:	5f 90       	pop	r5
    2778:	4f 90       	pop	r4
    277a:	08 95       	ret

0000277c <main>:
int main(void) {
	uint8_t menu = 0;
	void (*menup)(void);

	// turn boost off
	TCCR0B = 0;
    277c:	15 bc       	out	0x25, r1	; 37
	BOOST_DDR |= _BV(BOOST);
    277e:	56 9a       	sbi	0x0a, 6	; 10
	BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
    2780:	5e 98       	cbi	0x0b, 6	; 11

	// disable watchdog
	WDTCSR = 0;
    2782:	10 92 60 00 	sts	0x0060, r1
	wdt_disable();
    2786:	88 e1       	ldi	r24, 0x18	; 24
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	80 93 60 00 	sts	0x0060, r24
    2790:	10 92 60 00 	sts	0x0060, r1
    2794:	0f be       	out	0x3f, r0	; 63
	// now turn it back on... 4 second time out
	WDTCSR |= _BV(WDP3);
    2796:	80 91 60 00 	lds	r24, 0x0060
    279a:	80 62       	ori	r24, 0x20	; 32
    279c:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE);
    27a0:	88 e0       	ldi	r24, 0x08	; 8
    27a2:	80 93 60 00 	sts	0x0060, r24
	wdt_enable(WDTO_2S);
    27a6:	2f e0       	ldi	r18, 0x0F	; 15
    27a8:	88 e1       	ldi	r24, 0x18	; 24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	a8 95       	wdr
    27b2:	80 93 60 00 	sts	0x0060, r24
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	20 93 60 00 	sts	0x0060, r18
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    27bc:	a8 95       	wdr
	uart_init(BRRL_192);
#endif
*/

	// init io's
	init_buttons();
    27be:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <init_buttons>
		
	VFDSWITCH_PORT &= ~_BV(VFDSWITCH);
    27c2:	5b 98       	cbi	0x0b, 3	; 11
		
	DEBUGP("turning on buttons");
    27c4:	8a e0       	ldi	r24, 0x0A	; 10
    27c6:	92 e0       	ldi	r25, 0x02	; 2
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	// set up button interrupts
	DEBUGP("turning on alarmsw");
    27ce:	8d e1       	ldi	r24, 0x1D	; 29
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	// set off an interrupt if alarm is set or unset
	EICRA = _BV(ISC00);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	80 93 69 00 	sts	0x0069, r24
	EIMSK = _BV(INT0);
    27de:	8d bb       	out	0x1d, r24	; 29
	
	set_flag (f_show_time);
    27e0:	80 91 46 01 	lds	r24, 0x0146
    27e4:	80 68       	ori	r24, 0x80	; 128
    27e6:	80 93 46 01 	sts	0x0146, r24
	DEBUGP("vfd init");
    27ea:	80 e3       	ldi	r24, 0x30	; 48
    27ec:	92 e0       	ldi	r25, 0x02	; 2
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void init_vfd(void) {
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    27f4:	81 e5       	ldi	r24, 0x51	; 81
    27f6:	8c bd       	out	0x2c, r24	; 44
	
	set_flag (f_show_time);
	DEBUGP("vfd init");
	init_vfd();
		
	DEBUGP("boost init");
    27f8:	89 e3       	ldi	r24, 0x39	; 57
    27fa:	92 e0       	ldi	r25, 0x02	; 2
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	init_boost();
    2802:	0e 94 72 03 	call	0x6e4	; 0x6e4 <init_boost>

	region = eeprom_read_byte((uint8_t *)EE_REGION);
    2806:	8b e0       	ldi	r24, 0x0B	; 11
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__eerd_byte_m328p>
    280e:	80 93 14 01 	sts	0x0114, r24
		
	DEBUGP("speaker init");
    2812:	84 e4       	ldi	r24, 0x44	; 68
    2814:	92 e0       	ldi	r25, 0x02	; 2
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	init_speaker();
    281c:	0e 94 0f 03 	call	0x61e	; 0x61e <init_speaker>

	DEBUGP("clock init");
    2820:	81 e5       	ldi	r24, 0x51	; 81
    2822:	92 e0       	ldi	r25, 0x02	; 2
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	init_rtc();
    282a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <init_rtc>
	init_clock();
    282e:	0e 94 87 04 	call	0x90e	; 0x90e <init_clock>

	init_autobright();
    2832:	0e 94 90 03 	call	0x720	; 0x720 <init_autobright>

	sei();
    2836:	78 94       	sei

	DEBUGP("alarm init");
    2838:	8c e5       	ldi	r24, 0x5C	; 92
    283a:	92 e0       	ldi	r25, 0x02	; 2
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>
	init_alarm();
    2842:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <init_alarm>
	if (PIND & _BV(ALARM))
    2846:	4a 9b       	sbis	0x09, 2	; 9
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <main+0xd6>
		set_flag (f_alarm_on);
    284a:	80 91 46 01 	lds	r24, 0x0146
    284e:	80 64       	ori	r24, 0x40	; 64
    2850:	03 c0       	rjmp	.+6      	; 0x2858 <main+0xdc>
	else
		clr_flag (f_alarm_on);
    2852:	80 91 46 01 	lds	r24, 0x0146
    2856:	8f 7b       	andi	r24, 0xBF	; 191
    2858:	80 93 46 01 	sts	0x0146, r24

	DEBUGP("init done");
    285c:	87 e6       	ldi	r24, 0x67	; 103
    285e:	92 e0       	ldi	r25, 0x02	; 2
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	0e 94 a4 12 	call	0x2548	; 0x2548 <ROM_putstring>

	display_Pstr (PSTR ("icetube"));
    2866:	81 e7       	ldi	r24, 0x71	; 113
    2868:	92 e0       	ldi	r25, 0x02	; 2
    286a:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	delayms (1000);
    286e:	88 ee       	ldi	r24, 0xE8	; 232
    2870:	93 e0       	ldi	r25, 0x03	; 3
    2872:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
	display_Pstr (verstr);
    2876:	89 ec       	ldi	r24, 0xC9	; 201
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	0e 94 9b 06 	call	0xd36	; 0xd36 <display_Pstr>
	beep(4000, 2000, 0);	// 500ms @ 4000Hz
    287e:	80 ea       	ldi	r24, 0xA0	; 160
    2880:	9f e0       	ldi	r25, 0x0F	; 15
    2882:	60 ed       	ldi	r22, 0xD0	; 208
    2884:	77 e0       	ldi	r23, 0x07	; 7
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 2b 03 	call	0x656	; 0x656 <beep>
	while (beepcounter) ;
    288c:	80 91 33 01 	lds	r24, 0x0133
    2890:	90 91 34 01 	lds	r25, 0x0134
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	d1 f7       	brne	.-12     	; 0x288c <main+0x110>
    2898:	c0 e0       	ldi	r28, 0x00	; 0
			button_clear(4);
			setalarmstate(0);
		}

		if (flag(f_show_time) && flag(f_display_update)) {
			uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
    289a:	08 e1       	ldi	r16, 0x18	; 24
    289c:	10 e0       	ldi	r17, 0x00	; 0
			delayms (1500);

			set_flag(f_show_time);		 
		} else if (button_test(1)) {
			button_clear(1);
			flags ^= _BV(f_tick_on_sec);	// toggle tick
    289e:	d4 e0       	ldi	r29, 0x04	; 4
volatile uint16_t beepcounter;

// we reset the watchdog timer 
static inline void kickthedog(void)
{
	wdt_reset();
    28a0:	a8 95       	wdr
	while (beepcounter) ;

	while (1) {
		kickthedog();
		
		if (button_test(3)) {
    28a2:	80 91 3b 01 	lds	r24, 0x013B
    28a6:	83 ff       	sbrs	r24, 3
    28a8:	08 c0       	rjmp	.+16     	; 0x28ba <main+0x13e>
			button_clear(3);
    28aa:	80 91 3b 01 	lds	r24, 0x013B
    28ae:	87 7f       	andi	r24, 0xF7	; 247
    28b0:	80 93 3b 01 	sts	0x013B, r24
			setalarmstate(1);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <setalarmstate>
		}
		if (button_test(4)) {
    28ba:	80 91 3b 01 	lds	r24, 0x013B
    28be:	84 ff       	sbrs	r24, 4
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <main+0x156>
			button_clear(4);
    28c2:	80 91 3b 01 	lds	r24, 0x013B
    28c6:	8f 7e       	andi	r24, 0xEF	; 239
    28c8:	80 93 3b 01 	sts	0x013B, r24
			setalarmstate(0);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <setalarmstate>
		}

		if (flag(f_show_time) && flag(f_display_update)) {
    28d2:	80 91 46 01 	lds	r24, 0x0146
    28d6:	87 ff       	sbrs	r24, 7
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <main+0x1dc>
    28da:	80 91 46 01 	lds	r24, 0x0146
    28de:	84 ff       	sbrs	r24, 4
    28e0:	3b c0       	rjmp	.+118    	; 0x2958 <main+0x1dc>
			uint8_t h = (time_h + flag(f_dst_offset)) % 24;		// DST-adjusted hour
    28e2:	20 91 15 01 	lds	r18, 0x0115
    28e6:	80 91 46 01 	lds	r24, 0x0146
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	81 70       	andi	r24, 0x01	; 1
    28ee:	90 70       	andi	r25, 0x00	; 0
    28f0:	82 0f       	add	r24, r18
    28f2:	91 1d       	adc	r25, r1
    28f4:	b8 01       	movw	r22, r16
    28f6:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    28fa:	f8 2e       	mov	r15, r24
			if (flag(f_timeunknown) && (time_s % 2))
    28fc:	80 91 46 01 	lds	r24, 0x0146
    2900:	81 ff       	sbrs	r24, 1
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <main+0x196>
    2904:	80 91 42 01 	lds	r24, 0x0142
    2908:	80 ff       	sbrs	r24, 0
    290a:	03 c0       	rjmp	.+6      	; 0x2912 <main+0x196>
				display_clear();
    290c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <display_clear>
    2910:	07 c0       	rjmp	.+14     	; 0x2920 <main+0x1a4>
			else
				display_time(h, time_m, time_s);
    2912:	60 91 35 01 	lds	r22, 0x0135
    2916:	40 91 42 01 	lds	r20, 0x0142
    291a:	8f 2d       	mov	r24, r15
    291c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <display_time>

			if (flag(f_tick_on_sec) && !alarming)
    2920:	80 91 46 01 	lds	r24, 0x0146
    2924:	82 ff       	sbrs	r24, 2
    2926:	06 c0       	rjmp	.+12     	; 0x2934 <main+0x1b8>
    2928:	80 91 3a 01 	lds	r24, 0x013A
    292c:	88 23       	and	r24, r24
    292e:	11 f4       	brne	.+4      	; 0x2934 <main+0x1b8>
				tick();
    2930:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <tick>

			if (h == 2 && time_m == 30 && time_s == 0)
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	f8 16       	cp	r15, r24
    2938:	51 f4       	brne	.+20     	; 0x294e <main+0x1d2>
    293a:	80 91 35 01 	lds	r24, 0x0135
    293e:	8e 31       	cpi	r24, 0x1E	; 30
    2940:	31 f4       	brne	.+12     	; 0x294e <main+0x1d2>
    2942:	80 91 42 01 	lds	r24, 0x0142
    2946:	88 23       	and	r24, r24
    2948:	11 f4       	brne	.+4      	; 0x294e <main+0x1d2>
				init_clock();	// Re-sync with ChronoDot once a day
    294a:	0e 94 87 04 	call	0x90e	; 0x90e <init_clock>

			clr_flag (f_display_update);
    294e:	80 91 46 01 	lds	r24, 0x0146
    2952:	8f 7e       	andi	r24, 0xEF	; 239
    2954:	80 93 46 01 	sts	0x0146, r24
		}
		
		if (flag(f_show_time) && alarming && (buttons & 0x7)) {
    2958:	80 91 46 01 	lds	r24, 0x0146
    295c:	87 ff       	sbrs	r24, 7
    295e:	12 c0       	rjmp	.+36     	; 0x2984 <main+0x208>
    2960:	80 91 3a 01 	lds	r24, 0x013A
    2964:	88 23       	and	r24, r24
    2966:	71 f0       	breq	.+28     	; 0x2984 <main+0x208>
    2968:	80 91 3b 01 	lds	r24, 0x013B
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	87 70       	andi	r24, 0x07	; 7
    2970:	90 70       	andi	r25, 0x00	; 0
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	39 f0       	breq	.+14     	; 0x2984 <main+0x208>
			buttons &= ~0x7;
    2976:	80 91 3b 01 	lds	r24, 0x013B
    297a:	88 7f       	andi	r24, 0xF8	; 248
    297c:	80 93 3b 01 	sts	0x013B, r24
			setsnooze();
    2980:	0e 94 11 09 	call	0x1222	; 0x1222 <setsnooze>
		}

		if (button_test (0)) {
    2984:	80 91 3b 01 	lds	r24, 0x013B
    2988:	80 ff       	sbrs	r24, 0
    298a:	2b c0       	rjmp	.+86     	; 0x29e2 <main+0x266>
			// 'menu' button pressed
			button_clear (0);
    298c:	80 91 3b 01 	lds	r24, 0x013B
    2990:	8e 7f       	andi	r24, 0xFE	; 254
    2992:	80 93 3b 01 	sts	0x013B, r24
			if (flag(f_show_time)) {
    2996:	80 91 46 01 	lds	r24, 0x0146
    299a:	87 ff       	sbrs	r24, 7
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <main+0x22e>
				clr_flag(f_show_time);	// Take us out of SHOW_TIME mode
    299e:	80 91 46 01 	lds	r24, 0x0146
    29a2:	8f 77       	andi	r24, 0x7F	; 127
    29a4:	80 93 46 01 	sts	0x0146, r24
				menu = 0;				// Start at first item in menu
    29a8:	c0 e0       	ldi	r28, 0x00	; 0
			}
			
			// Call next item in menu
			menup = (void(*)(void))pgm_read_word(menu_list + menu++);
    29aa:	ec 2f       	mov	r30, r28
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	e0 50       	subi	r30, 0x00	; 0
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	cf 5f       	subi	r28, 0xFF	; 255
    29b8:	85 91       	lpm	r24, Z+
    29ba:	94 91       	lpm	r25, Z
			(*menup)();		
    29bc:	fc 01       	movw	r30, r24
    29be:	09 95       	icall
			// Button 0 will be TRUE on return if 'menu' was pressed again
			
			// Check if we reached the end of menu
			if (!pgm_read_word(menu_list + menu)) {
    29c0:	ec 2f       	mov	r30, r28
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	ee 0f       	add	r30, r30
    29c6:	ff 1f       	adc	r31, r31
    29c8:	e0 50       	subi	r30, 0x00	; 0
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	85 91       	lpm	r24, Z+
    29ce:	94 91       	lpm	r25, Z
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <main+0x25a>
    29d4:	65 cf       	rjmp	.-310    	; 0x28a0 <main+0x124>
				// Return to SHOW_TIME mode
				button_clear(0);
    29d6:	80 91 3b 01 	lds	r24, 0x013B
    29da:	8e 7f       	andi	r24, 0xFE	; 254
    29dc:	80 93 3b 01 	sts	0x013B, r24
    29e0:	20 c0       	rjmp	.+64     	; 0x2a22 <main+0x2a6>
				set_flag(f_show_time);
			}			
		} else if (button_test(2)) {
    29e2:	80 91 3b 01 	lds	r24, 0x013B
    29e6:	82 ff       	sbrs	r24, 2
    29e8:	20 c0       	rjmp	.+64     	; 0x2a2a <main+0x2ae>
			// Info display
			button_clear(2);
    29ea:	80 91 3b 01 	lds	r24, 0x013B
    29ee:	8b 7f       	andi	r24, 0xFB	; 251
    29f0:	80 93 3b 01 	sts	0x013B, r24
			clr_flag(f_show_time);
    29f4:	80 91 46 01 	lds	r24, 0x0146
    29f8:	8f 77       	andi	r24, 0x7F	; 127
    29fa:	80 93 46 01 	sts	0x0146, r24
			
			display_day();
    29fe:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <display_day>
			delayms (1500);
    2a02:	8c ed       	ldi	r24, 0xDC	; 220
    2a04:	95 e0       	ldi	r25, 0x05	; 5
    2a06:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			
			display_sdate();
    2a0a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <display_sdate>
			delayms (1500);
    2a0e:	8c ed       	ldi	r24, 0xDC	; 220
    2a10:	95 e0       	ldi	r25, 0x05	; 5
    2a12:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>
			
			display_temp();
    2a16:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <display_temp>
			delayms (1500);
    2a1a:	8c ed       	ldi	r24, 0xDC	; 220
    2a1c:	95 e0       	ldi	r25, 0x05	; 5
    2a1e:	0e 94 a7 01 	call	0x34e	; 0x34e <delayms>

			set_flag(f_show_time);		 
    2a22:	80 91 46 01 	lds	r24, 0x0146
    2a26:	80 68       	ori	r24, 0x80	; 128
    2a28:	0c c0       	rjmp	.+24     	; 0x2a42 <main+0x2c6>
		} else if (button_test(1)) {
    2a2a:	80 91 3b 01 	lds	r24, 0x013B
    2a2e:	81 ff       	sbrs	r24, 1
    2a30:	37 cf       	rjmp	.-402    	; 0x28a0 <main+0x124>
			button_clear(1);
    2a32:	80 91 3b 01 	lds	r24, 0x013B
    2a36:	8d 7f       	andi	r24, 0xFD	; 253
    2a38:	80 93 3b 01 	sts	0x013B, r24
			flags ^= _BV(f_tick_on_sec);	// toggle tick
    2a3c:	80 91 46 01 	lds	r24, 0x0146
    2a40:	8d 27       	eor	r24, r29
    2a42:	80 93 46 01 	sts	0x0146, r24
    2a46:	2c cf       	rjmp	.-424    	; 0x28a0 <main+0x124>

00002a48 <__mulsi3>:
    2a48:	62 9f       	mul	r22, r18
    2a4a:	d0 01       	movw	r26, r0
    2a4c:	73 9f       	mul	r23, r19
    2a4e:	f0 01       	movw	r30, r0
    2a50:	82 9f       	mul	r24, r18
    2a52:	e0 0d       	add	r30, r0
    2a54:	f1 1d       	adc	r31, r1
    2a56:	64 9f       	mul	r22, r20
    2a58:	e0 0d       	add	r30, r0
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	92 9f       	mul	r25, r18
    2a5e:	f0 0d       	add	r31, r0
    2a60:	83 9f       	mul	r24, r19
    2a62:	f0 0d       	add	r31, r0
    2a64:	74 9f       	mul	r23, r20
    2a66:	f0 0d       	add	r31, r0
    2a68:	65 9f       	mul	r22, r21
    2a6a:	f0 0d       	add	r31, r0
    2a6c:	99 27       	eor	r25, r25
    2a6e:	72 9f       	mul	r23, r18
    2a70:	b0 0d       	add	r27, r0
    2a72:	e1 1d       	adc	r30, r1
    2a74:	f9 1f       	adc	r31, r25
    2a76:	63 9f       	mul	r22, r19
    2a78:	b0 0d       	add	r27, r0
    2a7a:	e1 1d       	adc	r30, r1
    2a7c:	f9 1f       	adc	r31, r25
    2a7e:	bd 01       	movw	r22, r26
    2a80:	cf 01       	movw	r24, r30
    2a82:	11 24       	eor	r1, r1
    2a84:	08 95       	ret

00002a86 <__udivmodqi4>:
    2a86:	99 1b       	sub	r25, r25
    2a88:	79 e0       	ldi	r23, 0x09	; 9
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <__udivmodqi4_ep>

00002a8c <__udivmodqi4_loop>:
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	96 17       	cp	r25, r22
    2a90:	08 f0       	brcs	.+2      	; 0x2a94 <__udivmodqi4_ep>
    2a92:	96 1b       	sub	r25, r22

00002a94 <__udivmodqi4_ep>:
    2a94:	88 1f       	adc	r24, r24
    2a96:	7a 95       	dec	r23
    2a98:	c9 f7       	brne	.-14     	; 0x2a8c <__udivmodqi4_loop>
    2a9a:	80 95       	com	r24
    2a9c:	08 95       	ret

00002a9e <__udivmodhi4>:
    2a9e:	aa 1b       	sub	r26, r26
    2aa0:	bb 1b       	sub	r27, r27
    2aa2:	51 e1       	ldi	r21, 0x11	; 17
    2aa4:	07 c0       	rjmp	.+14     	; 0x2ab4 <__udivmodhi4_ep>

00002aa6 <__udivmodhi4_loop>:
    2aa6:	aa 1f       	adc	r26, r26
    2aa8:	bb 1f       	adc	r27, r27
    2aaa:	a6 17       	cp	r26, r22
    2aac:	b7 07       	cpc	r27, r23
    2aae:	10 f0       	brcs	.+4      	; 0x2ab4 <__udivmodhi4_ep>
    2ab0:	a6 1b       	sub	r26, r22
    2ab2:	b7 0b       	sbc	r27, r23

00002ab4 <__udivmodhi4_ep>:
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	5a 95       	dec	r21
    2aba:	a9 f7       	brne	.-22     	; 0x2aa6 <__udivmodhi4_loop>
    2abc:	80 95       	com	r24
    2abe:	90 95       	com	r25
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	08 95       	ret

00002ac6 <__divmodhi4>:
    2ac6:	97 fb       	bst	r25, 7
    2ac8:	09 2e       	mov	r0, r25
    2aca:	07 26       	eor	r0, r23
    2acc:	0a d0       	rcall	.+20     	; 0x2ae2 <__divmodhi4_neg1>
    2ace:	77 fd       	sbrc	r23, 7
    2ad0:	04 d0       	rcall	.+8      	; 0x2ada <__divmodhi4_neg2>
    2ad2:	e5 df       	rcall	.-54     	; 0x2a9e <__udivmodhi4>
    2ad4:	06 d0       	rcall	.+12     	; 0x2ae2 <__divmodhi4_neg1>
    2ad6:	00 20       	and	r0, r0
    2ad8:	1a f4       	brpl	.+6      	; 0x2ae0 <__divmodhi4_exit>

00002ada <__divmodhi4_neg2>:
    2ada:	70 95       	com	r23
    2adc:	61 95       	neg	r22
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255

00002ae0 <__divmodhi4_exit>:
    2ae0:	08 95       	ret

00002ae2 <__divmodhi4_neg1>:
    2ae2:	f6 f7       	brtc	.-4      	; 0x2ae0 <__divmodhi4_exit>
    2ae4:	90 95       	com	r25
    2ae6:	81 95       	neg	r24
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	08 95       	ret

00002aec <__udivmodsi4>:
    2aec:	a1 e2       	ldi	r26, 0x21	; 33
    2aee:	1a 2e       	mov	r1, r26
    2af0:	aa 1b       	sub	r26, r26
    2af2:	bb 1b       	sub	r27, r27
    2af4:	fd 01       	movw	r30, r26
    2af6:	0d c0       	rjmp	.+26     	; 0x2b12 <__udivmodsi4_ep>

00002af8 <__udivmodsi4_loop>:
    2af8:	aa 1f       	adc	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	ee 1f       	adc	r30, r30
    2afe:	ff 1f       	adc	r31, r31
    2b00:	a2 17       	cp	r26, r18
    2b02:	b3 07       	cpc	r27, r19
    2b04:	e4 07       	cpc	r30, r20
    2b06:	f5 07       	cpc	r31, r21
    2b08:	20 f0       	brcs	.+8      	; 0x2b12 <__udivmodsi4_ep>
    2b0a:	a2 1b       	sub	r26, r18
    2b0c:	b3 0b       	sbc	r27, r19
    2b0e:	e4 0b       	sbc	r30, r20
    2b10:	f5 0b       	sbc	r31, r21

00002b12 <__udivmodsi4_ep>:
    2b12:	66 1f       	adc	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	88 1f       	adc	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	1a 94       	dec	r1
    2b1c:	69 f7       	brne	.-38     	; 0x2af8 <__udivmodsi4_loop>
    2b1e:	60 95       	com	r22
    2b20:	70 95       	com	r23
    2b22:	80 95       	com	r24
    2b24:	90 95       	com	r25
    2b26:	9b 01       	movw	r18, r22
    2b28:	ac 01       	movw	r20, r24
    2b2a:	bd 01       	movw	r22, r26
    2b2c:	cf 01       	movw	r24, r30
    2b2e:	08 95       	ret

00002b30 <__divmodsi4>:
    2b30:	97 fb       	bst	r25, 7
    2b32:	09 2e       	mov	r0, r25
    2b34:	05 26       	eor	r0, r21
    2b36:	0e d0       	rcall	.+28     	; 0x2b54 <__divmodsi4_neg1>
    2b38:	57 fd       	sbrc	r21, 7
    2b3a:	04 d0       	rcall	.+8      	; 0x2b44 <__divmodsi4_neg2>
    2b3c:	d7 df       	rcall	.-82     	; 0x2aec <__udivmodsi4>
    2b3e:	0a d0       	rcall	.+20     	; 0x2b54 <__divmodsi4_neg1>
    2b40:	00 1c       	adc	r0, r0
    2b42:	38 f4       	brcc	.+14     	; 0x2b52 <__divmodsi4_exit>

00002b44 <__divmodsi4_neg2>:
    2b44:	50 95       	com	r21
    2b46:	40 95       	com	r20
    2b48:	30 95       	com	r19
    2b4a:	21 95       	neg	r18
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255

00002b52 <__divmodsi4_exit>:
    2b52:	08 95       	ret

00002b54 <__divmodsi4_neg1>:
    2b54:	f6 f7       	brtc	.-4      	; 0x2b52 <__divmodsi4_exit>
    2b56:	90 95       	com	r25
    2b58:	80 95       	com	r24
    2b5a:	70 95       	com	r23
    2b5c:	61 95       	neg	r22
    2b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b60:	8f 4f       	sbci	r24, 0xFF	; 255
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	08 95       	ret

00002b66 <memcpy_P>:
    2b66:	fb 01       	movw	r30, r22
    2b68:	dc 01       	movw	r26, r24
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <memcpy_P+0xa>
    2b6c:	05 90       	lpm	r0, Z+
    2b6e:	0d 92       	st	X+, r0
    2b70:	41 50       	subi	r20, 0x01	; 1
    2b72:	50 40       	sbci	r21, 0x00	; 0
    2b74:	d8 f7       	brcc	.-10     	; 0x2b6c <memcpy_P+0x6>
    2b76:	08 95       	ret

00002b78 <strcpy_P>:
    2b78:	fb 01       	movw	r30, r22
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	05 90       	lpm	r0, Z+
    2b7e:	0d 92       	st	X+, r0
    2b80:	00 20       	and	r0, r0
    2b82:	e1 f7       	brne	.-8      	; 0x2b7c <strcpy_P+0x4>
    2b84:	08 95       	ret

00002b86 <sprintf_P>:
    2b86:	ae e0       	ldi	r26, 0x0E	; 14
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b8c:	f5 e1       	ldi	r31, 0x15	; 21
    2b8e:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x1c>
    2b92:	0d 89       	ldd	r16, Y+21	; 0x15
    2b94:	1e 89       	ldd	r17, Y+22	; 0x16
    2b96:	8e e0       	ldi	r24, 0x0E	; 14
    2b98:	8c 83       	std	Y+4, r24	; 0x04
    2b9a:	1a 83       	std	Y+2, r17	; 0x02
    2b9c:	09 83       	std	Y+1, r16	; 0x01
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	9f e7       	ldi	r25, 0x7F	; 127
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	ae 01       	movw	r20, r28
    2ba8:	47 5e       	subi	r20, 0xE7	; 231
    2baa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bac:	ce 01       	movw	r24, r28
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	6f 89       	ldd	r22, Y+23	; 0x17
    2bb2:	78 8d       	ldd	r23, Y+24	; 0x18
    2bb4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vfprintf>
    2bb8:	ef 81       	ldd	r30, Y+7	; 0x07
    2bba:	f8 85       	ldd	r31, Y+8	; 0x08
    2bbc:	e0 0f       	add	r30, r16
    2bbe:	f1 1f       	adc	r31, r17
    2bc0:	10 82       	st	Z, r1
    2bc2:	2e 96       	adiw	r28, 0x0e	; 14
    2bc4:	e4 e0       	ldi	r30, 0x04	; 4
    2bc6:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x1c>

00002bca <vfprintf>:
    2bca:	ad e0       	ldi	r26, 0x0D	; 13
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	eb ee       	ldi	r30, 0xEB	; 235
    2bd0:	f5 e1       	ldi	r31, 0x15	; 21
    2bd2:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__>
    2bd6:	3c 01       	movw	r6, r24
    2bd8:	7d 87       	std	Y+13, r23	; 0x0d
    2bda:	6c 87       	std	Y+12, r22	; 0x0c
    2bdc:	5a 01       	movw	r10, r20
    2bde:	fc 01       	movw	r30, r24
    2be0:	17 82       	std	Z+7, r1	; 0x07
    2be2:	16 82       	std	Z+6, r1	; 0x06
    2be4:	83 81       	ldd	r24, Z+3	; 0x03
    2be6:	81 ff       	sbrs	r24, 1
    2be8:	c8 c1       	rjmp	.+912    	; 0x2f7a <vfprintf+0x3b0>
    2bea:	2e 01       	movw	r4, r28
    2bec:	08 94       	sec
    2bee:	41 1c       	adc	r4, r1
    2bf0:	51 1c       	adc	r5, r1
    2bf2:	f3 01       	movw	r30, r6
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2bf8:	fd 85       	ldd	r31, Y+13	; 0x0d
    2bfa:	93 fd       	sbrc	r25, 3
    2bfc:	85 91       	lpm	r24, Z+
    2bfe:	93 ff       	sbrs	r25, 3
    2c00:	81 91       	ld	r24, Z+
    2c02:	fd 87       	std	Y+13, r31	; 0x0d
    2c04:	ec 87       	std	Y+12, r30	; 0x0c
    2c06:	88 23       	and	r24, r24
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <vfprintf+0x42>
    2c0a:	b3 c1       	rjmp	.+870    	; 0x2f72 <vfprintf+0x3a8>
    2c0c:	85 32       	cpi	r24, 0x25	; 37
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <vfprintf+0x56>
    2c10:	93 fd       	sbrc	r25, 3
    2c12:	85 91       	lpm	r24, Z+
    2c14:	93 ff       	sbrs	r25, 3
    2c16:	81 91       	ld	r24, Z+
    2c18:	fd 87       	std	Y+13, r31	; 0x0d
    2c1a:	ec 87       	std	Y+12, r30	; 0x0c
    2c1c:	85 32       	cpi	r24, 0x25	; 37
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <vfprintf+0x60>
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	b3 01       	movw	r22, r6
    2c24:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2c28:	e4 cf       	rjmp	.-56     	; 0x2bf2 <vfprintf+0x28>
    2c2a:	ff 24       	eor	r15, r15
    2c2c:	ee 24       	eor	r14, r14
    2c2e:	10 e0       	ldi	r17, 0x00	; 0
    2c30:	10 32       	cpi	r17, 0x20	; 32
    2c32:	b0 f4       	brcc	.+44     	; 0x2c60 <vfprintf+0x96>
    2c34:	8b 32       	cpi	r24, 0x2B	; 43
    2c36:	69 f0       	breq	.+26     	; 0x2c52 <vfprintf+0x88>
    2c38:	8c 32       	cpi	r24, 0x2C	; 44
    2c3a:	28 f4       	brcc	.+10     	; 0x2c46 <vfprintf+0x7c>
    2c3c:	80 32       	cpi	r24, 0x20	; 32
    2c3e:	51 f0       	breq	.+20     	; 0x2c54 <vfprintf+0x8a>
    2c40:	83 32       	cpi	r24, 0x23	; 35
    2c42:	71 f4       	brne	.+28     	; 0x2c60 <vfprintf+0x96>
    2c44:	0b c0       	rjmp	.+22     	; 0x2c5c <vfprintf+0x92>
    2c46:	8d 32       	cpi	r24, 0x2D	; 45
    2c48:	39 f0       	breq	.+14     	; 0x2c58 <vfprintf+0x8e>
    2c4a:	80 33       	cpi	r24, 0x30	; 48
    2c4c:	49 f4       	brne	.+18     	; 0x2c60 <vfprintf+0x96>
    2c4e:	11 60       	ori	r17, 0x01	; 1
    2c50:	2c c0       	rjmp	.+88     	; 0x2caa <vfprintf+0xe0>
    2c52:	12 60       	ori	r17, 0x02	; 2
    2c54:	14 60       	ori	r17, 0x04	; 4
    2c56:	29 c0       	rjmp	.+82     	; 0x2caa <vfprintf+0xe0>
    2c58:	18 60       	ori	r17, 0x08	; 8
    2c5a:	27 c0       	rjmp	.+78     	; 0x2caa <vfprintf+0xe0>
    2c5c:	10 61       	ori	r17, 0x10	; 16
    2c5e:	25 c0       	rjmp	.+74     	; 0x2caa <vfprintf+0xe0>
    2c60:	17 fd       	sbrc	r17, 7
    2c62:	2e c0       	rjmp	.+92     	; 0x2cc0 <vfprintf+0xf6>
    2c64:	28 2f       	mov	r18, r24
    2c66:	20 53       	subi	r18, 0x30	; 48
    2c68:	2a 30       	cpi	r18, 0x0A	; 10
    2c6a:	98 f4       	brcc	.+38     	; 0x2c92 <vfprintf+0xc8>
    2c6c:	16 ff       	sbrs	r17, 6
    2c6e:	08 c0       	rjmp	.+16     	; 0x2c80 <vfprintf+0xb6>
    2c70:	8f 2d       	mov	r24, r15
    2c72:	88 0f       	add	r24, r24
    2c74:	f8 2e       	mov	r15, r24
    2c76:	ff 0c       	add	r15, r15
    2c78:	ff 0c       	add	r15, r15
    2c7a:	f8 0e       	add	r15, r24
    2c7c:	f2 0e       	add	r15, r18
    2c7e:	15 c0       	rjmp	.+42     	; 0x2caa <vfprintf+0xe0>
    2c80:	8e 2d       	mov	r24, r14
    2c82:	88 0f       	add	r24, r24
    2c84:	e8 2e       	mov	r14, r24
    2c86:	ee 0c       	add	r14, r14
    2c88:	ee 0c       	add	r14, r14
    2c8a:	e8 0e       	add	r14, r24
    2c8c:	e2 0e       	add	r14, r18
    2c8e:	10 62       	ori	r17, 0x20	; 32
    2c90:	0c c0       	rjmp	.+24     	; 0x2caa <vfprintf+0xe0>
    2c92:	8e 32       	cpi	r24, 0x2E	; 46
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <vfprintf+0xd4>
    2c96:	16 fd       	sbrc	r17, 6
    2c98:	6c c1       	rjmp	.+728    	; 0x2f72 <vfprintf+0x3a8>
    2c9a:	10 64       	ori	r17, 0x40	; 64
    2c9c:	06 c0       	rjmp	.+12     	; 0x2caa <vfprintf+0xe0>
    2c9e:	8c 36       	cpi	r24, 0x6C	; 108
    2ca0:	11 f4       	brne	.+4      	; 0x2ca6 <vfprintf+0xdc>
    2ca2:	10 68       	ori	r17, 0x80	; 128
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <vfprintf+0xe0>
    2ca6:	88 36       	cpi	r24, 0x68	; 104
    2ca8:	59 f4       	brne	.+22     	; 0x2cc0 <vfprintf+0xf6>
    2caa:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cac:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cae:	93 fd       	sbrc	r25, 3
    2cb0:	85 91       	lpm	r24, Z+
    2cb2:	93 ff       	sbrs	r25, 3
    2cb4:	81 91       	ld	r24, Z+
    2cb6:	fd 87       	std	Y+13, r31	; 0x0d
    2cb8:	ec 87       	std	Y+12, r30	; 0x0c
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <vfprintf+0xf6>
    2cbe:	b8 cf       	rjmp	.-144    	; 0x2c30 <vfprintf+0x66>
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	95 54       	subi	r25, 0x45	; 69
    2cc4:	93 30       	cpi	r25, 0x03	; 3
    2cc6:	18 f0       	brcs	.+6      	; 0x2cce <vfprintf+0x104>
    2cc8:	90 52       	subi	r25, 0x20	; 32
    2cca:	93 30       	cpi	r25, 0x03	; 3
    2ccc:	38 f4       	brcc	.+14     	; 0x2cdc <vfprintf+0x112>
    2cce:	24 e0       	ldi	r18, 0x04	; 4
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	a2 0e       	add	r10, r18
    2cd4:	b3 1e       	adc	r11, r19
    2cd6:	3f e3       	ldi	r19, 0x3F	; 63
    2cd8:	39 83       	std	Y+1, r19	; 0x01
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <vfprintf+0x130>
    2cdc:	83 36       	cpi	r24, 0x63	; 99
    2cde:	31 f0       	breq	.+12     	; 0x2cec <vfprintf+0x122>
    2ce0:	83 37       	cpi	r24, 0x73	; 115
    2ce2:	81 f0       	breq	.+32     	; 0x2d04 <vfprintf+0x13a>
    2ce4:	83 35       	cpi	r24, 0x53	; 83
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <vfprintf+0x120>
    2ce8:	5a c0       	rjmp	.+180    	; 0x2d9e <vfprintf+0x1d4>
    2cea:	22 c0       	rjmp	.+68     	; 0x2d30 <vfprintf+0x166>
    2cec:	f5 01       	movw	r30, r10
    2cee:	80 81       	ld	r24, Z
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	22 e0       	ldi	r18, 0x02	; 2
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	a2 0e       	add	r10, r18
    2cf8:	b3 1e       	adc	r11, r19
    2cfa:	21 e0       	ldi	r18, 0x01	; 1
    2cfc:	c2 2e       	mov	r12, r18
    2cfe:	d1 2c       	mov	r13, r1
    2d00:	42 01       	movw	r8, r4
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <vfprintf+0x162>
    2d04:	92 e0       	ldi	r25, 0x02	; 2
    2d06:	29 2e       	mov	r2, r25
    2d08:	31 2c       	mov	r3, r1
    2d0a:	2a 0c       	add	r2, r10
    2d0c:	3b 1c       	adc	r3, r11
    2d0e:	f5 01       	movw	r30, r10
    2d10:	80 80       	ld	r8, Z
    2d12:	91 80       	ldd	r9, Z+1	; 0x01
    2d14:	16 ff       	sbrs	r17, 6
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <vfprintf+0x154>
    2d18:	6f 2d       	mov	r22, r15
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <vfprintf+0x158>
    2d1e:	6f ef       	ldi	r22, 0xFF	; 255
    2d20:	7f ef       	ldi	r23, 0xFF	; 255
    2d22:	c4 01       	movw	r24, r8
    2d24:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strnlen>
    2d28:	6c 01       	movw	r12, r24
    2d2a:	51 01       	movw	r10, r2
    2d2c:	1f 77       	andi	r17, 0x7F	; 127
    2d2e:	15 c0       	rjmp	.+42     	; 0x2d5a <vfprintf+0x190>
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	28 2e       	mov	r2, r24
    2d34:	31 2c       	mov	r3, r1
    2d36:	2a 0c       	add	r2, r10
    2d38:	3b 1c       	adc	r3, r11
    2d3a:	f5 01       	movw	r30, r10
    2d3c:	80 80       	ld	r8, Z
    2d3e:	91 80       	ldd	r9, Z+1	; 0x01
    2d40:	16 ff       	sbrs	r17, 6
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <vfprintf+0x180>
    2d44:	6f 2d       	mov	r22, r15
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <vfprintf+0x184>
    2d4a:	6f ef       	ldi	r22, 0xFF	; 255
    2d4c:	7f ef       	ldi	r23, 0xFF	; 255
    2d4e:	c4 01       	movw	r24, r8
    2d50:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <strnlen_P>
    2d54:	6c 01       	movw	r12, r24
    2d56:	10 68       	ori	r17, 0x80	; 128
    2d58:	51 01       	movw	r10, r2
    2d5a:	13 fd       	sbrc	r17, 3
    2d5c:	1c c0       	rjmp	.+56     	; 0x2d96 <vfprintf+0x1cc>
    2d5e:	06 c0       	rjmp	.+12     	; 0x2d6c <vfprintf+0x1a2>
    2d60:	80 e2       	ldi	r24, 0x20	; 32
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	b3 01       	movw	r22, r6
    2d66:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2d6a:	ea 94       	dec	r14
    2d6c:	8e 2d       	mov	r24, r14
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	c8 16       	cp	r12, r24
    2d72:	d9 06       	cpc	r13, r25
    2d74:	a8 f3       	brcs	.-22     	; 0x2d60 <vfprintf+0x196>
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <vfprintf+0x1cc>
    2d78:	f4 01       	movw	r30, r8
    2d7a:	17 fd       	sbrc	r17, 7
    2d7c:	85 91       	lpm	r24, Z+
    2d7e:	17 ff       	sbrs	r17, 7
    2d80:	81 91       	ld	r24, Z+
    2d82:	4f 01       	movw	r8, r30
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	b3 01       	movw	r22, r6
    2d88:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2d8c:	e1 10       	cpse	r14, r1
    2d8e:	ea 94       	dec	r14
    2d90:	08 94       	sec
    2d92:	c1 08       	sbc	r12, r1
    2d94:	d1 08       	sbc	r13, r1
    2d96:	c1 14       	cp	r12, r1
    2d98:	d1 04       	cpc	r13, r1
    2d9a:	71 f7       	brne	.-36     	; 0x2d78 <vfprintf+0x1ae>
    2d9c:	e7 c0       	rjmp	.+462    	; 0x2f6c <vfprintf+0x3a2>
    2d9e:	84 36       	cpi	r24, 0x64	; 100
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <vfprintf+0x1dc>
    2da2:	89 36       	cpi	r24, 0x69	; 105
    2da4:	51 f5       	brne	.+84     	; 0x2dfa <vfprintf+0x230>
    2da6:	f5 01       	movw	r30, r10
    2da8:	17 ff       	sbrs	r17, 7
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <vfprintf+0x1f0>
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	a2 81       	ldd	r26, Z+2	; 0x02
    2db2:	b3 81       	ldd	r27, Z+3	; 0x03
    2db4:	24 e0       	ldi	r18, 0x04	; 4
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <vfprintf+0x200>
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	aa 27       	eor	r26, r26
    2dc0:	97 fd       	sbrc	r25, 7
    2dc2:	a0 95       	com	r26
    2dc4:	ba 2f       	mov	r27, r26
    2dc6:	22 e0       	ldi	r18, 0x02	; 2
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	a2 0e       	add	r10, r18
    2dcc:	b3 1e       	adc	r11, r19
    2dce:	01 2f       	mov	r16, r17
    2dd0:	0f 76       	andi	r16, 0x6F	; 111
    2dd2:	b7 ff       	sbrs	r27, 7
    2dd4:	08 c0       	rjmp	.+16     	; 0x2de6 <vfprintf+0x21c>
    2dd6:	b0 95       	com	r27
    2dd8:	a0 95       	com	r26
    2dda:	90 95       	com	r25
    2ddc:	81 95       	neg	r24
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	af 4f       	sbci	r26, 0xFF	; 255
    2de2:	bf 4f       	sbci	r27, 0xFF	; 255
    2de4:	00 68       	ori	r16, 0x80	; 128
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	a2 01       	movw	r20, r4
    2dec:	2a e0       	ldi	r18, 0x0A	; 10
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	0e 94 1b 18 	call	0x3036	; 0x3036 <__ultoa_invert>
    2df4:	d8 2e       	mov	r13, r24
    2df6:	d4 18       	sub	r13, r4
    2df8:	3f c0       	rjmp	.+126    	; 0x2e78 <vfprintf+0x2ae>
    2dfa:	85 37       	cpi	r24, 0x75	; 117
    2dfc:	21 f4       	brne	.+8      	; 0x2e06 <vfprintf+0x23c>
    2dfe:	1f 7e       	andi	r17, 0xEF	; 239
    2e00:	2a e0       	ldi	r18, 0x0A	; 10
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	20 c0       	rjmp	.+64     	; 0x2e46 <vfprintf+0x27c>
    2e06:	19 7f       	andi	r17, 0xF9	; 249
    2e08:	8f 36       	cpi	r24, 0x6F	; 111
    2e0a:	a9 f0       	breq	.+42     	; 0x2e36 <vfprintf+0x26c>
    2e0c:	80 37       	cpi	r24, 0x70	; 112
    2e0e:	20 f4       	brcc	.+8      	; 0x2e18 <vfprintf+0x24e>
    2e10:	88 35       	cpi	r24, 0x58	; 88
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <vfprintf+0x24c>
    2e14:	ae c0       	rjmp	.+348    	; 0x2f72 <vfprintf+0x3a8>
    2e16:	0b c0       	rjmp	.+22     	; 0x2e2e <vfprintf+0x264>
    2e18:	80 37       	cpi	r24, 0x70	; 112
    2e1a:	21 f0       	breq	.+8      	; 0x2e24 <vfprintf+0x25a>
    2e1c:	88 37       	cpi	r24, 0x78	; 120
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <vfprintf+0x258>
    2e20:	a8 c0       	rjmp	.+336    	; 0x2f72 <vfprintf+0x3a8>
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <vfprintf+0x25c>
    2e24:	10 61       	ori	r17, 0x10	; 16
    2e26:	14 ff       	sbrs	r17, 4
    2e28:	09 c0       	rjmp	.+18     	; 0x2e3c <vfprintf+0x272>
    2e2a:	14 60       	ori	r17, 0x04	; 4
    2e2c:	07 c0       	rjmp	.+14     	; 0x2e3c <vfprintf+0x272>
    2e2e:	14 ff       	sbrs	r17, 4
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <vfprintf+0x278>
    2e32:	16 60       	ori	r17, 0x06	; 6
    2e34:	06 c0       	rjmp	.+12     	; 0x2e42 <vfprintf+0x278>
    2e36:	28 e0       	ldi	r18, 0x08	; 8
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <vfprintf+0x27c>
    2e3c:	20 e1       	ldi	r18, 0x10	; 16
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <vfprintf+0x27c>
    2e42:	20 e1       	ldi	r18, 0x10	; 16
    2e44:	32 e0       	ldi	r19, 0x02	; 2
    2e46:	f5 01       	movw	r30, r10
    2e48:	17 ff       	sbrs	r17, 7
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <vfprintf+0x290>
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	44 e0       	ldi	r20, 0x04	; 4
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x29c>
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	42 e0       	ldi	r20, 0x02	; 2
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	a4 0e       	add	r10, r20
    2e68:	b5 1e       	adc	r11, r21
    2e6a:	a2 01       	movw	r20, r4
    2e6c:	0e 94 1b 18 	call	0x3036	; 0x3036 <__ultoa_invert>
    2e70:	d8 2e       	mov	r13, r24
    2e72:	d4 18       	sub	r13, r4
    2e74:	01 2f       	mov	r16, r17
    2e76:	0f 77       	andi	r16, 0x7F	; 127
    2e78:	06 ff       	sbrs	r16, 6
    2e7a:	09 c0       	rjmp	.+18     	; 0x2e8e <vfprintf+0x2c4>
    2e7c:	0e 7f       	andi	r16, 0xFE	; 254
    2e7e:	df 14       	cp	r13, r15
    2e80:	30 f4       	brcc	.+12     	; 0x2e8e <vfprintf+0x2c4>
    2e82:	04 ff       	sbrs	r16, 4
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <vfprintf+0x2c8>
    2e86:	02 fd       	sbrc	r16, 2
    2e88:	04 c0       	rjmp	.+8      	; 0x2e92 <vfprintf+0x2c8>
    2e8a:	0f 7e       	andi	r16, 0xEF	; 239
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <vfprintf+0x2c8>
    2e8e:	1d 2d       	mov	r17, r13
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <vfprintf+0x2ca>
    2e92:	1f 2d       	mov	r17, r15
    2e94:	80 2f       	mov	r24, r16
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	04 ff       	sbrs	r16, 4
    2e9a:	0c c0       	rjmp	.+24     	; 0x2eb4 <vfprintf+0x2ea>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ed 0d       	add	r30, r13
    2ea0:	f1 1d       	adc	r31, r1
    2ea2:	20 81       	ld	r18, Z
    2ea4:	20 33       	cpi	r18, 0x30	; 48
    2ea6:	11 f4       	brne	.+4      	; 0x2eac <vfprintf+0x2e2>
    2ea8:	09 7e       	andi	r16, 0xE9	; 233
    2eaa:	09 c0       	rjmp	.+18     	; 0x2ebe <vfprintf+0x2f4>
    2eac:	02 ff       	sbrs	r16, 2
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <vfprintf+0x2f2>
    2eb0:	1e 5f       	subi	r17, 0xFE	; 254
    2eb2:	05 c0       	rjmp	.+10     	; 0x2ebe <vfprintf+0x2f4>
    2eb4:	86 78       	andi	r24, 0x86	; 134
    2eb6:	90 70       	andi	r25, 0x00	; 0
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <vfprintf+0x2f4>
    2ebc:	1f 5f       	subi	r17, 0xFF	; 255
    2ebe:	80 2e       	mov	r8, r16
    2ec0:	99 24       	eor	r9, r9
    2ec2:	03 fd       	sbrc	r16, 3
    2ec4:	12 c0       	rjmp	.+36     	; 0x2eea <vfprintf+0x320>
    2ec6:	00 ff       	sbrs	r16, 0
    2ec8:	0d c0       	rjmp	.+26     	; 0x2ee4 <vfprintf+0x31a>
    2eca:	fd 2c       	mov	r15, r13
    2ecc:	1e 15       	cp	r17, r14
    2ece:	50 f4       	brcc	.+20     	; 0x2ee4 <vfprintf+0x31a>
    2ed0:	fe 0c       	add	r15, r14
    2ed2:	f1 1a       	sub	r15, r17
    2ed4:	1e 2d       	mov	r17, r14
    2ed6:	06 c0       	rjmp	.+12     	; 0x2ee4 <vfprintf+0x31a>
    2ed8:	80 e2       	ldi	r24, 0x20	; 32
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	b3 01       	movw	r22, r6
    2ede:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2ee2:	1f 5f       	subi	r17, 0xFF	; 255
    2ee4:	1e 15       	cp	r17, r14
    2ee6:	c0 f3       	brcs	.-16     	; 0x2ed8 <vfprintf+0x30e>
    2ee8:	04 c0       	rjmp	.+8      	; 0x2ef2 <vfprintf+0x328>
    2eea:	1e 15       	cp	r17, r14
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <vfprintf+0x328>
    2eee:	e1 1a       	sub	r14, r17
    2ef0:	01 c0       	rjmp	.+2      	; 0x2ef4 <vfprintf+0x32a>
    2ef2:	ee 24       	eor	r14, r14
    2ef4:	84 fe       	sbrs	r8, 4
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <vfprintf+0x34c>
    2ef8:	80 e3       	ldi	r24, 0x30	; 48
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	b3 01       	movw	r22, r6
    2efe:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2f02:	82 fe       	sbrs	r8, 2
    2f04:	1f c0       	rjmp	.+62     	; 0x2f44 <vfprintf+0x37a>
    2f06:	81 fe       	sbrs	r8, 1
    2f08:	03 c0       	rjmp	.+6      	; 0x2f10 <vfprintf+0x346>
    2f0a:	88 e5       	ldi	r24, 0x58	; 88
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	10 c0       	rjmp	.+32     	; 0x2f30 <vfprintf+0x366>
    2f10:	88 e7       	ldi	r24, 0x78	; 120
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0d c0       	rjmp	.+26     	; 0x2f30 <vfprintf+0x366>
    2f16:	c4 01       	movw	r24, r8
    2f18:	86 78       	andi	r24, 0x86	; 134
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	91 f0       	breq	.+36     	; 0x2f44 <vfprintf+0x37a>
    2f20:	81 fc       	sbrc	r8, 1
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <vfprintf+0x35e>
    2f24:	80 e2       	ldi	r24, 0x20	; 32
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <vfprintf+0x360>
    2f28:	8b e2       	ldi	r24, 0x2B	; 43
    2f2a:	07 fd       	sbrc	r16, 7
    2f2c:	8d e2       	ldi	r24, 0x2D	; 45
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	b3 01       	movw	r22, r6
    2f32:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2f36:	06 c0       	rjmp	.+12     	; 0x2f44 <vfprintf+0x37a>
    2f38:	80 e3       	ldi	r24, 0x30	; 48
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	b3 01       	movw	r22, r6
    2f3e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2f42:	fa 94       	dec	r15
    2f44:	df 14       	cp	r13, r15
    2f46:	c0 f3       	brcs	.-16     	; 0x2f38 <vfprintf+0x36e>
    2f48:	da 94       	dec	r13
    2f4a:	f2 01       	movw	r30, r4
    2f4c:	ed 0d       	add	r30, r13
    2f4e:	f1 1d       	adc	r31, r1
    2f50:	80 81       	ld	r24, Z
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	b3 01       	movw	r22, r6
    2f56:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2f5a:	dd 20       	and	r13, r13
    2f5c:	a9 f7       	brne	.-22     	; 0x2f48 <vfprintf+0x37e>
    2f5e:	06 c0       	rjmp	.+12     	; 0x2f6c <vfprintf+0x3a2>
    2f60:	80 e2       	ldi	r24, 0x20	; 32
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	b3 01       	movw	r22, r6
    2f66:	0e 94 ef 17 	call	0x2fde	; 0x2fde <fputc>
    2f6a:	ea 94       	dec	r14
    2f6c:	ee 20       	and	r14, r14
    2f6e:	c1 f7       	brne	.-16     	; 0x2f60 <vfprintf+0x396>
    2f70:	40 ce       	rjmp	.-896    	; 0x2bf2 <vfprintf+0x28>
    2f72:	f3 01       	movw	r30, r6
    2f74:	86 81       	ldd	r24, Z+6	; 0x06
    2f76:	97 81       	ldd	r25, Z+7	; 0x07
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <vfprintf+0x3b4>
    2f7a:	8f ef       	ldi	r24, 0xFF	; 255
    2f7c:	9f ef       	ldi	r25, 0xFF	; 255
    2f7e:	2d 96       	adiw	r28, 0x0d	; 13
    2f80:	e2 e1       	ldi	r30, 0x12	; 18
    2f82:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__>

00002f86 <__eerd_byte_m328p>:
    2f86:	f9 99       	sbic	0x1f, 1	; 31
    2f88:	fe cf       	rjmp	.-4      	; 0x2f86 <__eerd_byte_m328p>
    2f8a:	92 bd       	out	0x22, r25	; 34
    2f8c:	81 bd       	out	0x21, r24	; 33
    2f8e:	f8 9a       	sbi	0x1f, 0	; 31
    2f90:	99 27       	eor	r25, r25
    2f92:	80 b5       	in	r24, 0x20	; 32
    2f94:	08 95       	ret

00002f96 <__eewr_byte_m328p>:
    2f96:	26 2f       	mov	r18, r22

00002f98 <__eewr_r18_m328p>:
    2f98:	f9 99       	sbic	0x1f, 1	; 31
    2f9a:	fe cf       	rjmp	.-4      	; 0x2f98 <__eewr_r18_m328p>
    2f9c:	1f ba       	out	0x1f, r1	; 31
    2f9e:	92 bd       	out	0x22, r25	; 34
    2fa0:	81 bd       	out	0x21, r24	; 33
    2fa2:	20 bd       	out	0x20, r18	; 32
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	fa 9a       	sbi	0x1f, 2	; 31
    2faa:	f9 9a       	sbi	0x1f, 1	; 31
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	08 95       	ret

00002fb2 <strnlen_P>:
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	05 90       	lpm	r0, Z+
    2fb6:	61 50       	subi	r22, 0x01	; 1
    2fb8:	70 40       	sbci	r23, 0x00	; 0
    2fba:	01 10       	cpse	r0, r1
    2fbc:	d8 f7       	brcc	.-10     	; 0x2fb4 <strnlen_P+0x2>
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	8e 0f       	add	r24, r30
    2fc4:	9f 1f       	adc	r25, r31
    2fc6:	08 95       	ret

00002fc8 <strnlen>:
    2fc8:	fc 01       	movw	r30, r24
    2fca:	61 50       	subi	r22, 0x01	; 1
    2fcc:	70 40       	sbci	r23, 0x00	; 0
    2fce:	01 90       	ld	r0, Z+
    2fd0:	01 10       	cpse	r0, r1
    2fd2:	d8 f7       	brcc	.-10     	; 0x2fca <strnlen+0x2>
    2fd4:	80 95       	com	r24
    2fd6:	90 95       	com	r25
    2fd8:	8e 0f       	add	r24, r30
    2fda:	9f 1f       	adc	r25, r31
    2fdc:	08 95       	ret

00002fde <fputc>:
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	8c 01       	movw	r16, r24
    2fe8:	eb 01       	movw	r28, r22
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	81 ff       	sbrs	r24, 1
    2fee:	1b c0       	rjmp	.+54     	; 0x3026 <fputc+0x48>
    2ff0:	82 ff       	sbrs	r24, 2
    2ff2:	0d c0       	rjmp	.+26     	; 0x300e <fputc+0x30>
    2ff4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ff6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffc:	28 17       	cp	r18, r24
    2ffe:	39 07       	cpc	r19, r25
    3000:	64 f4       	brge	.+24     	; 0x301a <fputc+0x3c>
    3002:	e8 81       	ld	r30, Y
    3004:	f9 81       	ldd	r31, Y+1	; 0x01
    3006:	01 93       	st	Z+, r16
    3008:	f9 83       	std	Y+1, r31	; 0x01
    300a:	e8 83       	st	Y, r30
    300c:	06 c0       	rjmp	.+12     	; 0x301a <fputc+0x3c>
    300e:	e8 85       	ldd	r30, Y+8	; 0x08
    3010:	f9 85       	ldd	r31, Y+9	; 0x09
    3012:	80 2f       	mov	r24, r16
    3014:	09 95       	icall
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	31 f4       	brne	.+12     	; 0x3026 <fputc+0x48>
    301a:	8e 81       	ldd	r24, Y+6	; 0x06
    301c:	9f 81       	ldd	r25, Y+7	; 0x07
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	9f 83       	std	Y+7, r25	; 0x07
    3022:	8e 83       	std	Y+6, r24	; 0x06
    3024:	02 c0       	rjmp	.+4      	; 0x302a <fputc+0x4c>
    3026:	0f ef       	ldi	r16, 0xFF	; 255
    3028:	1f ef       	ldi	r17, 0xFF	; 255
    302a:	c8 01       	movw	r24, r16
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	08 95       	ret

00003036 <__ultoa_invert>:
    3036:	fa 01       	movw	r30, r20
    3038:	aa 27       	eor	r26, r26
    303a:	28 30       	cpi	r18, 0x08	; 8
    303c:	51 f1       	breq	.+84     	; 0x3092 <__ultoa_invert+0x5c>
    303e:	20 31       	cpi	r18, 0x10	; 16
    3040:	81 f1       	breq	.+96     	; 0x30a2 <__ultoa_invert+0x6c>
    3042:	e8 94       	clt
    3044:	6f 93       	push	r22
    3046:	6e 7f       	andi	r22, 0xFE	; 254
    3048:	6e 5f       	subi	r22, 0xFE	; 254
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	8f 4f       	sbci	r24, 0xFF	; 255
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	af 4f       	sbci	r26, 0xFF	; 255
    3052:	b1 e0       	ldi	r27, 0x01	; 1
    3054:	3e d0       	rcall	.+124    	; 0x30d2 <__ultoa_invert+0x9c>
    3056:	b4 e0       	ldi	r27, 0x04	; 4
    3058:	3c d0       	rcall	.+120    	; 0x30d2 <__ultoa_invert+0x9c>
    305a:	67 0f       	add	r22, r23
    305c:	78 1f       	adc	r23, r24
    305e:	89 1f       	adc	r24, r25
    3060:	9a 1f       	adc	r25, r26
    3062:	a1 1d       	adc	r26, r1
    3064:	68 0f       	add	r22, r24
    3066:	79 1f       	adc	r23, r25
    3068:	8a 1f       	adc	r24, r26
    306a:	91 1d       	adc	r25, r1
    306c:	a1 1d       	adc	r26, r1
    306e:	6a 0f       	add	r22, r26
    3070:	71 1d       	adc	r23, r1
    3072:	81 1d       	adc	r24, r1
    3074:	91 1d       	adc	r25, r1
    3076:	a1 1d       	adc	r26, r1
    3078:	20 d0       	rcall	.+64     	; 0x30ba <__ultoa_invert+0x84>
    307a:	09 f4       	brne	.+2      	; 0x307e <__ultoa_invert+0x48>
    307c:	68 94       	set
    307e:	3f 91       	pop	r19
    3080:	2a e0       	ldi	r18, 0x0A	; 10
    3082:	26 9f       	mul	r18, r22
    3084:	11 24       	eor	r1, r1
    3086:	30 19       	sub	r19, r0
    3088:	30 5d       	subi	r19, 0xD0	; 208
    308a:	31 93       	st	Z+, r19
    308c:	de f6       	brtc	.-74     	; 0x3044 <__ultoa_invert+0xe>
    308e:	cf 01       	movw	r24, r30
    3090:	08 95       	ret
    3092:	46 2f       	mov	r20, r22
    3094:	47 70       	andi	r20, 0x07	; 7
    3096:	40 5d       	subi	r20, 0xD0	; 208
    3098:	41 93       	st	Z+, r20
    309a:	b3 e0       	ldi	r27, 0x03	; 3
    309c:	0f d0       	rcall	.+30     	; 0x30bc <__ultoa_invert+0x86>
    309e:	c9 f7       	brne	.-14     	; 0x3092 <__ultoa_invert+0x5c>
    30a0:	f6 cf       	rjmp	.-20     	; 0x308e <__ultoa_invert+0x58>
    30a2:	46 2f       	mov	r20, r22
    30a4:	4f 70       	andi	r20, 0x0F	; 15
    30a6:	40 5d       	subi	r20, 0xD0	; 208
    30a8:	4a 33       	cpi	r20, 0x3A	; 58
    30aa:	18 f0       	brcs	.+6      	; 0x30b2 <__ultoa_invert+0x7c>
    30ac:	49 5d       	subi	r20, 0xD9	; 217
    30ae:	31 fd       	sbrc	r19, 1
    30b0:	40 52       	subi	r20, 0x20	; 32
    30b2:	41 93       	st	Z+, r20
    30b4:	02 d0       	rcall	.+4      	; 0x30ba <__ultoa_invert+0x84>
    30b6:	a9 f7       	brne	.-22     	; 0x30a2 <__ultoa_invert+0x6c>
    30b8:	ea cf       	rjmp	.-44     	; 0x308e <__ultoa_invert+0x58>
    30ba:	b4 e0       	ldi	r27, 0x04	; 4
    30bc:	a6 95       	lsr	r26
    30be:	97 95       	ror	r25
    30c0:	87 95       	ror	r24
    30c2:	77 95       	ror	r23
    30c4:	67 95       	ror	r22
    30c6:	ba 95       	dec	r27
    30c8:	c9 f7       	brne	.-14     	; 0x30bc <__ultoa_invert+0x86>
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	61 05       	cpc	r22, r1
    30ce:	71 05       	cpc	r23, r1
    30d0:	08 95       	ret
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	0a 2e       	mov	r0, r26
    30d8:	06 94       	lsr	r0
    30da:	57 95       	ror	r21
    30dc:	47 95       	ror	r20
    30de:	37 95       	ror	r19
    30e0:	27 95       	ror	r18
    30e2:	ba 95       	dec	r27
    30e4:	c9 f7       	brne	.-14     	; 0x30d8 <__ultoa_invert+0xa2>
    30e6:	62 0f       	add	r22, r18
    30e8:	73 1f       	adc	r23, r19
    30ea:	84 1f       	adc	r24, r20
    30ec:	95 1f       	adc	r25, r21
    30ee:	a0 1d       	adc	r26, r0
    30f0:	08 95       	ret

000030f2 <__prologue_saves__>:
    30f2:	2f 92       	push	r2
    30f4:	3f 92       	push	r3
    30f6:	4f 92       	push	r4
    30f8:	5f 92       	push	r5
    30fa:	6f 92       	push	r6
    30fc:	7f 92       	push	r7
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	ca 1b       	sub	r28, r26
    311c:	db 0b       	sbc	r29, r27
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	09 94       	ijmp

0000312a <__epilogue_restores__>:
    312a:	2a 88       	ldd	r2, Y+18	; 0x12
    312c:	39 88       	ldd	r3, Y+17	; 0x11
    312e:	48 88       	ldd	r4, Y+16	; 0x10
    3130:	5f 84       	ldd	r5, Y+15	; 0x0f
    3132:	6e 84       	ldd	r6, Y+14	; 0x0e
    3134:	7d 84       	ldd	r7, Y+13	; 0x0d
    3136:	8c 84       	ldd	r8, Y+12	; 0x0c
    3138:	9b 84       	ldd	r9, Y+11	; 0x0b
    313a:	aa 84       	ldd	r10, Y+10	; 0x0a
    313c:	b9 84       	ldd	r11, Y+9	; 0x09
    313e:	c8 84       	ldd	r12, Y+8	; 0x08
    3140:	df 80       	ldd	r13, Y+7	; 0x07
    3142:	ee 80       	ldd	r14, Y+6	; 0x06
    3144:	fd 80       	ldd	r15, Y+5	; 0x05
    3146:	0c 81       	ldd	r16, Y+4	; 0x04
    3148:	1b 81       	ldd	r17, Y+3	; 0x03
    314a:	aa 81       	ldd	r26, Y+2	; 0x02
    314c:	b9 81       	ldd	r27, Y+1	; 0x01
    314e:	ce 0f       	add	r28, r30
    3150:	d1 1d       	adc	r29, r1
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	ed 01       	movw	r28, r26
    315e:	08 95       	ret

00003160 <_exit>:
    3160:	f8 94       	cli

00003162 <__stop_program>:
    3162:	ff cf       	rjmp	.-2      	; 0x3162 <__stop_program>
